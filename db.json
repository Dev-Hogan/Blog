{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1681310845561},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1681310845397},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1681310845543},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1681310845557},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1681310845621},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1681310845623},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1681310845622},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1681310845625},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1681310845624},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1681310845442},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1681310845563},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1681310845624},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1681310845627},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1681310845626},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1681310845627},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1681310845628},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1681310845629},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1681310845630},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1681310845630},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1681310845541},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1681310845466},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1681310845472},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1681310845479},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1681310845480},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1681310845487},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1681310845482},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1681310845483},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1681310845462},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1681310845472},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1681310845476},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1681310845477},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1681310845463},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1681310845480},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1681310845462},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1681310845468},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1681310845477},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1681310845484},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1681310845478},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1681310845465},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1681310845471},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1681310845484},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1681310845485},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1681310845488},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1681310845574},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1681310845587},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1681310845573},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1681310845493},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1681310845495},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1681310845496},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1681310845569},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1681310845570},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1681310845550},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1681310845555},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1681310845460},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1681310845470},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1681310845571},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1681310845551},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1681310845472},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1681310845485},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1681310845490},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1681310845577},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1681310845481},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1681310845578},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1681310845575},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1681310845582},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1681310845475},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1681310845583},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1681310845584},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1681310845580},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1681310845585},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1681310845581},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1681310845576},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1681310845579},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1681310845582},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1681310845492},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1681310845568},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1681310845618},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1681310845568},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1681310845547},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1681310845454},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1681310845549},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1681310845456},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1681310845548},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1681310845616},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1681310845593},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1681310845528},{"_id":"public/2023/04/12/hello-world/index.html","hash":"6131e5a5eb7aa37b093d0e08b50905fc2f370ec0","modified":1681385568940},{"_id":"public/archives/index.html","hash":"01766c7d13c1337376d43d9abfa4ef9dafea79d8","modified":1681385568940},{"_id":"public/archives/2023/index.html","hash":"e05d656f2e1d8fce52fe17e96b3c068a622970ef","modified":1681385568940},{"_id":"public/archives/2023/04/index.html","hash":"cbcbe83937cb7f3eeae4b69368caa714f5701bb4","modified":1681385568940},{"_id":"public/index.html","hash":"dbd51c66bac691f2a3a78dce14d9b81ebbec5bac","modified":1681385568940},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1681385568940},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1681385568940},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1681385568940},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1681385568940},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1681385568940},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1681385568940},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1681385568940},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1681385568940},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1681385568940},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1681385568940},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1681385568940},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1681385568940},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1681385568940},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1681385568940},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1681385568940},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1681385568940},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1681385568940},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1681385568940},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1681385568940},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1681385568940},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1681385568940},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1681385568940},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1681385568940},{"_id":"source/_posts/first.md","hash":"b93202613a29d1beb8b575a45d511f30fedc41fc","modified":1681395906681},{"_id":"public/2023/04/13/first/index.html","hash":"1ca41dac7324eb3d825452c465301e9a6cbc4b70","modified":1681385568940},{"_id":"source/_posts/问题思考.md","hash":"444b4e74cf2e2724eecfbfb70500c8e95d891273","modified":1681359585166}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-04-12T14:48:01.957Z","updated":"2023-04-12T14:47:25.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgdt6ikf0000mkuu435ubt42","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"技术总结V1.0","date":"2023-04-13T11:32:17.000Z","_content":"# 技术总结v1.0\n\n## 1. 面向对象与面向过程的区别\n\n​ **面向过程**：是将事件分成步骤，按部就班一步一步完成的。\n\n​ **面向对象** ：将事件分成一个又一个对象，每个对象有自己的属性及方法。是各个对象之间的方法交互。\n\n## 2. flex布局与grid布局的区别\n\n​ grid布局讲容器分成行与块，远比flex布局强。\n\n参考链接\n\n\n## 3.Sass与Less的区别？用哪个好？\n\n​ Sass 的主版本现在已经改用 Dart 实现了，Ruby 的版本一年前就不再维护了。Sass 和 Less 的使用并没有明显的「复杂」和「简单」的区别，常用部分大同小异。Less 运行在浏览器端只是方便初学者上手，生产环境是绝对不会这么做的，都是随着前端项目一起构建，构建完之后的都是静态资源，不涉及服务端什么事。两者都有线上的 REPL，所以简单的演示代码不用担心用不了 Sass。Sass 以 $ 打头比较不容易和 CSS 标准语法冲突，Less 的语法跟 CSS 标准太像了，有时候会难以区分（Stylus 更糟糕）。Sass 和 Less 的变量机制有很大的不同，Sass 是类似 JS 的块级作用域一样，可以在作用域内重新赋值而不影响外部，Less 是以全局的最后一次赋值为准，这也是为什么大部分 UI 组件库都选择 Less。Compass 这个东西……已经没什么人在用的了，只存在于教材上的东西，忘了它吧。SASS 和 SCSS 只是两种语法风格而已，**推荐使用 SCSS** ，但 SASS 也没有不再支持，放到现在来看，跟版本没关系。Sass 的模块机制现在大改了，建议跟进下。不论国内外市场如何，Less 和 Sass 最常用的部分并没有明显的区别，不用太在意该用哪个，Just pick one。我个人比较偏好 Sass，生态更好（踩过 Stylus 的坑，深刻的教训），至于公司用哪个，跟着用就行，不出大问题不用考虑换。\n\n## 4.sass使用过程中的问题\n\n### Easy Sass插件没有生成.css文件问题\n\n- 检查是否安装好\n\n```\nsass -v //检查是否安装好sass\ncompass -v\n```\n\n- **路径保存问题**，settings.json中保存路径应该为`css/`这样才能在上一级文件夹（当前在sass文件夹内）的`css`文件夹生成对应`.css`文件。<b>ps</b>:需要自己新建`css`文件夹，不然会报错。\n- settings.json配置\n\n```\n\"easysass.compileAfterSave\": true,\n\"easysass.formats\": [ \n        //nested：嵌套缩进的 css 代码。\n        //expanded：没有缩进的、扩展的css代码。\n        //compact：简洁格式的 css 代码。\n        //compressed：压缩后的 css 代码\n\n        {\n            \"format\": \"expanded\",\n            \"extension\": \".css\" //设置编译输出的文件名\n    ],\n      //这会回到根目录的css文件夹内创建同名.css文件\n    \"easysass.targetDir\": \"css/\" //提供 css 输出路径的设置.\n  \n```\n\n- 需要自己提前在**根目录创建好css文件夹**否则会报错。\n\n## 5.写css的命名规范--BEM\n\n- 命名规范\n\n```\n\n```\n\n参考连接[css命名规范--知乎](<https://zhuanlan.zhihu.com/p/122214519>)\n\n## 6.tree生成目录的使用\n\n- 在在Tree for Winodws页面，下载二进制文件Binaries zip\n- 解压压缩包，找到压缩包内的 bin 目录，将 bin 目录下的 tree.exe 复制到git文件夹Git\\usr\\bin 目录下，将 tree.exe 粘贴到该目录下，安装完成，即可使用。\n- git bash\n\n```\ntree -L 1 >tree.txt\n```\n\n### tree命令行参数\n\n-a 显示所有文件和目录。<br>\n-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。<br>\n-C 在文件和目录清单加上色彩，便于区分各种类型。<br>\n-d 显示目录名称而非内容。<br>\n-D 列出文件或目录的更改时间。<br>\n-f 在每个文件或目录之前，显示完整的相对路径名称。<br>\n-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|“号。<br>\n-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。<br>\n-i 不以阶梯状列出文件或目录名称。<br>\n-I 不显示符合范本样式的文件或目录名称。<br>\n-n 不在文件和目录清单加上色彩。<br>\n-N 直接列出文件和目录名称，包括控制字符。<br>\n-p 列出权限标示。<br>\n-P 只显示符合范本样式的文件或目录名称。<br>\n-q 用”?\"号取代控制字符，列出文件和目录名称。<br>\n-s 列出文件或目录大小。<br>\n-t 用文件和目录的更改时间排序。<br>\n-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。<br>\n-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n\n## 7.this的指向\n\n- **方法中**，`this`指向方法所在的对象。\n- 单独使用`this`指向`window`。\n- 函数中`this`为函数的所有者。如果在浏览器中就是`window`。\n<br>函数默认指向最高的`window`。\n<br><b>构造函数是obj对象</b>，所以`this`会指向该构造函数（obj）。\n- **事件中**的`this`指向接收事件的HTML元素。因为**HTML元素是对象**。???\n  \n## 8.for in 与for of的区别\n\n- `for in`其中的参数保存的是**键名**，而`for of`其中的参数保存的是**键值**。\n\n## 9.逻辑中断\n\n- 某些场景用来替代if-else操作，默认值\n- `&`中断，左边false中断\n\n```\nlet a = false && 5 //false\nlet a = true && 5 // 5\n```\n\n- `||`中断，左边true中断\n\n```\nlet a = true || 5 // true\nlet a = false || 5 // 5\n```\n\n## 10.原型与原型链与原型对象\n\n<https://juejin.cn/post/6984678359275929637#comment>这篇文章写的十分透彻\n\n### 10.1构造函数创建实例对象过程？\n\n  1、创建新对象\n  <br>2、将构造函数作用域赋值给新对象（this指向新对象）\n  <br>3、执行构造函数中的代码，给实例对象添加实例属性和实例方法。\n\n  ```\n  // 构造函数\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\n// 生成实例\nconst p = new Person('zhangsan', 18);\n  ```\n\n### 10.2原型对象\n\n  `函数`在创建时会生成一个`prototype`属性，该属性`指向一个对象`，这个对象就是`原型对象`\n![](/images/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp)\n\n### 10.3原型链\n\n- 通过`构造函数`创建出的`实例对象`有个`_proto_`属性，该属性指向`实例对象的构造函数的原型对象`\n![](/images/%E5%AE%9E%E4%BE%8B%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp)\n其实就是`实例的_proto_`指向`原型对象`,同时`构造函数的prototype`也指向`原型对象`。\n- **原型链**就是访问对象属性时，查找对象有没有查找的对象，没有就找`_proto_的原型对象（构造函数的prototype）`，还是没有就找`原型对象的_proto_查找`，因此形成原型链。\n- 原型链的尽头是`null`\n\n### 10.4在构造函数原型对象修改属性\n\n- 要让所有实例共享构造函数属性，添加或删改内在的属性或方法，应该在`构造函数的prototype（原型对象）`去更改。\n- 在实例对象修改`_proto_`会影响**所有共享构造函数**的实例对象。\n\n### 10.5GPT的说法\n\n在 JavaScript 中，每个对象都有一个原型对象（prototype），它定义了该对象的属性和方法。当访问一个对象的属性或方法时，如果该对象本身没有定义该属性或方法，则会沿着原型链向上查找，直到找到该属性或方法为止。\n\n原型链是由一系列原型对象组成的链式结构，它描述了对象之间的继承关系。每个对象都有一个原型对象，如果对象 A 的原型对象是对象 B，那么对象 A 就可以继承对象 B 中定义的属性和方法。\n\n原型对象可以通过函数的 `prototype` 属性进行访问和修改。例如，可以定义一个构造函数 `Person`，并在其原型对象上添加一个方法 `sayHello()`：\n\n```\nfunction Person(name) {\n  this.name = name\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}`)\n}\n\nlet person = new Person('John')\nperson.sayHello() // 输出：Hello, my name is John\n```\n\n在这个例子中，`Person` 函数定义了一个 `name` 属性，并在其原型对象上添加了一个 `sayHello()` 方法。当创建一个 `Person` 对象时，可以通过 `new` 运算符调用 `Person` 函数，并返回一个新的对象。这个新对象的原型对象指向 `Person.prototype`，因此可以访问 `sayHello()` 方法。\n\n需要注意的是，原型对象是在对象创建时动态生成的，因此可以在运行时动态地修改原型对象。同时，原型对象是基于引用的，即多个对象可以共享同一个原型对象。这种机制不仅可以提高代码的复用性，还能够实现面向对象编程中的继承和多态等特性。\n\n### 10.6为什么有原型链？\n\nJavaScript 之所以有原型链，是因为其是一种基于**原型继承**的面向对象编程语言。在 JavaScript 中，`每个对象都有一个指向其原型的内部链接`，这个链接被称为原型链。\n\n当我们访问一个对象的属性或方法时，如果当前对象没有这个属性或方法，JavaScript 引擎就会去该对象的原型对象中查找是否有这个属性或方法。如果原型对象中也没有这个属性或方法，那么就会继续在原型对象的原型对象中查找，直到找到 Object.prototype 对象为止，如果还没有找到，则返回 undefined。\n\n这样的设计可以让对象之间实现继承，从而使得代码更加简洁、灵活和可重用。通过在原型对象中定义方法和属性，我们可以让所有基于该原型的对象都共享这些方法和属性，从而避免在每个对象中都定义一遍，提高了代码的复用性和效率。\n\n因此，原型链是 JavaScript 面向对象编程的一个重要特性，也是理解 JavaScript 中对象和继承机制的关键。\n\n### 10.7浏览器的[[prototype]]是什么\n\n在JavaScript中，每个对象都有一个原型对象（即_proto_属性），它决定了对象的属性和方法。同时，每个构造函数也有一个原型对象（即prototype属性），它是通过new操作符创建的实例的原型对象。\n\n在浏览器中，对象的_proto_属性通常被称为对象的“隐式原型”（implicit prototype），它指向该对象的原型对象。而该对象的原型对象通常被称为对象的“显示原型”（explicit prototype），它是一个对象，它包含了该对象的属性和方法。\n\n具体来说，浏览器中的对象的[[prototype]]属性（即_proto_属性）指向该对象的原型对象，它是一个内部属性，通常无法直接访问。而该对象的原型对象通常是通过构造函数的prototype属性设置的，从而让该对象可以访问到构造函数中定义的属性和方法。\n\n例如，以下代码演示了在浏览器中创建对象时的[[prototype]]属性和prototype属性的关系：\n\n```\n// 定义一个构造函数\nfunction Person(name) {\n  this.name = name;\n}\n\n// 在构造函数的原型对象中定义一个方法\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}`);\n}\n\n// 创建一个Person对象\nconst person = new Person('Tom');\n\n// 输出person对象的[[prototype]]属性\nconsole.log(person.__proto__); // 输出：Person {sayHello: ƒ, constructor: ƒ}\n\n// 输出person对象的构造函数\nconsole.log(person.constructor); // 输出：ƒ Person(name) {this.name = name;}\n\n// 调用person对象的方法\nperson.sayHello(); // 输出：Hello, my name is Tom\n```\n\n在这个例子中，我们定义了一个构造函数Person，然后在它的原型对象中定义了一个方法sayHello。接着，我们使用new操作符创建了一个Person对象，并输出了它的[[prototype]]属性和constructor属性。可以看到，person对象的[[prototype]]属性指向了Person构造\n\n## 11.自增的数据类型转换\n\n```js\nvar a1 = \"2\";\nvar a2 =\"w\";\nvar b1 = false;\nvar bin = 1.1;\nvar o ={\n valueOf:function(){\n  return -1;\n }\n};\na1++;\na2++;\nb1++;\nbin--;\no--;\nconsole.log(a1);  //3\nconsole.log(a2);  //NaN\nconsole.log(b1);  //0.10000000000000009\nconsole.log(bin);  //1.1\nconsole.log(o);   //-2\n\n```\n\n## 12.闭包的理解\n\n闭包是指在函数内部定义的函数可以访问函数外部的变量，即使在函数外部这些变量已经不可访问。闭包通常由一个函数和在该函数内部定义的另一个函数组成，在内部函数中可以访问外部函数的变量和参数，即使在外部函数执行完毕后，这些变量和参数仍然可以被内部函数访问。\n\n闭包的概念可能比较抽象，以下是一个例子来帮助理解：\n\n```\nfunction outer() {\n  let count = 0\n  function inner() {\n    count++\n    console.log(count)\n  }\n  return inner\n}\n\nlet fn = outer()\nfn() // 1\nfn() // 2\nfn() // 3\n```\n\n在这个例子中，函数 `outer` 内部定义了一个变量 `count` 和一个函数 `inner`，`inner` 函数可以访问 `outer` 函数中的变量 `count`。`outer` 函数最终返回 `inner` 函数，并将其赋值给变量 `fn`。\n\n当执行 `fn()` 的时候，实际上是在执行 `inner()` 函数，因此每次执行 `fn()` 都会输出 `count` 变量的值，并将其自增。由于 `count` 变量是在 `outer` 函数中定义的，因此在 `inner` 函数中也可以访问和修改 `count` 变量的值，即使 `outer` 函数已经执行完毕。\n\n这个例子就展示了一个闭包的具体实现：内部函数 `inner` 可以访问外部函数 `outer` 中的变量 `count`，即使 `outer` 函数执行完毕后这个变量仍然可以被访问和修改。闭包可以用于实现一些高级的 JavaScript 技术，例如柯里化、函数式编程、模块化等。\n\n## 13.函数式编程\n\n函数式编程是一种编程范式，它是一种程序设计的风格，强调函数的使用来构建软件应用程序。它是一种声明式编程，而不是命令式编程。在函数式编程中，程序由许多小的、可组合的函数组成，每个函数都有一个明确定义的输入和输出，不会修改函数外的状态。函数式编程的目标是编写简单、可读、可维护和可扩展的代码。\n\n函数式编程的一些特征包括：\n\n- 纯函数：函数的输出仅取决于输入，而不依赖于任何外部状态或副作用。\n- 不可变性：数据不可被修改，一旦创建就不能再改变，因此任何对数据的修改都会创建一个新的数据对象。\n- 高阶函数：函数可以作为参数传递给其他函数，也可以返回其他函数。\n- 延迟执行：表达式的求值被延迟到需要使用它的时候。\n- 函数组合：将函数组合起来构建更复杂的函数。\n\n函数式编程有许多优点，例如代码简洁、可读性高、易于测试、可维护性强、并发性好等。它在处理大规模数据、并发编程和分布式系统方面具有巨大的优势。在 JavaScript 中，函数式编程的特征可以通过使用高阶函数和内置的 `Array` 方法如 `map()`、`filter()`、`reduce()` 等来实现。\n\n## 14.开源项目怎么学习\n\n学习开源项目需要一定的技能和经验，以下是一些建议：\n\n1. 了解项目：在探索一个新的开源项目之前，应该先了解项目的背景、目的和技术栈等信息。这可以通过项目的文档、代码库、社区和邮件列表等渠道来获取。\n2. 安装和运行代码：安装和运行代码是了解项目的一个重要部分。这可以通过阅读项目的文档和代码库来完成。如果遇到问题，可以查看项目的社区和邮件列表，也可以尝试在开发者社区中提问。\n3. 阅读代码：阅读代码是了解项目的另一个重要部分。可以通过阅读项目的代码库来了解代码的结构、功能和实现细节。此外，还可以使用调试工具来了解代码的执行过程。\n4. 参与社区：参与社区是学习开源项目的另一个重要部分。可以通过参加社区讨论、提供反馈和贡献代码等方式来参与项目。这可以帮助学习项目，并建立联系和信任。\n5. 贡献代码：贡献代码是学习开源项目的最终目标之一。可以通过提供修复错误、新增功能、重构代码等方式来贡献代码。这可以帮助学习项目的实现和贡献开源社区。\n\n总之，学习开源项目需要花费一定的时间和精力。一旦掌握了这些技巧和经验，就可以更轻松地了解和贡献开源项目。\n\n### 源代码的阅读\n\n阅读源代码可以帮助深入了解项目的实现细节和结构，以下是一些阅读源代码的建议：\n\n1. 了解项目结构：在阅读代码之前，应该先了解项目的目录结构和文件组织方式。这可以帮助理解代码中各个模块和组件之间的关系和依赖关系。\n2. 阅读文档：阅读项目的文档可以帮助了解项目的功能、设计和代码结构。这可以帮助理解代码的目的和实现细节，减少阅读代码的时间和难度。\n3. 阅读代码注释：阅读代码注释可以帮助理解代码的实现细节和目的。注释应该提供有关代码结构、函数用途、变量定义等方面的信息。\n4. 使用调试工具：使用调试工具可以帮助了解代码的执行过程和调用关系。可以使用调试器、日志和断点来追踪代码的执行路径和状态变化。\n5. 运行示例代码：运行示例代码可以帮助理解代码的实现和功能。可以尝试运行和调试示例代码，并尝试修改代码和观察结果。\n6. 尝试重构代码：尝试重构代码可以帮助理解代码的结构和逻辑。可以尝试删除冗余代码、合并函数或变量、提取公共代码块等操作，以改善代码的可读性和维护性。\n\n总之，在阅读源代码时，应该有一个系统性的方法来了解项目的结构和实现细节。可以阅读文档和代码注释，使用调试工具和运行示例代码，并尝试重构代码以提高代码的可读性和维护性。\n\n## 15. 魔术字符串\n\n魔术字符串是指在代码中多次出现的、与代码实现相关的、没有被封装成常量或变量的字符串。这些字符串通常被直接硬编码在代码中，而没有使用变量或常量的形式来表示。\n\n魔术字符串有以下几个问题：\n\n1. 可读性差：魔术字符串通常没有描述性的名称，使用它们的代码难以理解和阅读。\n2. 维护性差：魔术字符串存在于代码的多个地方，如果需要修改它们，就需要在多个地方进行修改，增加了代码的维护成本。\n3. 可重用性差：魔术字符串通常不能被重用，如果需要在代码的不同地方使用相同的字符串，就需要重复硬编码这些字符串，增加了代码的冗余。\n\n为了解决这些问题，可以将魔术字符串封装成常量或变量。这样可以提高代码的可读性、维护性和可重用性。\n\n例如，下面的代码中使用了魔术字符串：\n\n```\nfunction getUserRole(user) {\n  if (user.role === 'admin') {\n    return 'admin';\n  } else if (user.role === 'manager') {\n    return 'manager';\n  } else {\n    return 'guest';\n  }\n}\n```\n\n可以将魔术字符串封装成常量形式，例如：\n\n```\nconst ROLE_ADMIN = 'admin';\nconst ROLE_MANAGER = 'manager';\nconst ROLE_GUEST = 'guest';\n\nfunction getUserRole(user) {\n  if (user.role === ROLE_ADMIN) {\n    return ROLE_ADMIN;\n  } else if (user.role === ROLE_MANAGER) {\n    return ROLE_MANAGER;\n  } else {\n    return ROLE_GUEST;\n  }\n}\n```\n\n这样可以提高代码的可读性、维护性和可重用性，减少代码中的冗余和错误。\n\n## 16. 对象的计算属性\n\n### 16.1 计算属性\n\n在 JavaScript 中，对象的属性名可以是字符串或 Symbol 类型。在这个例子中，`val.name` 是一个字符串类型，而我们需要将它作为属性名添加到对象中。因为对象属性名需要满足标识符的命名规则，所以我们需要将 `val.name` 包含在方括号中，将它作为属性名添加到对象中。这种方式被称为计算属性名，它可以让我们在对象字面量中使用表达式作为属性名。\n\n例如，如果我们想要使用一个变量作为属性名，就可以使用计算属性名：\n\n```\nconst propName = 'name';\nconst person = {\n  [propName]: 'Alice'\n};\nconsole.log(person); // { name: 'Alice' }\n```\n\n在这个例子中，`[propName]` 就是一个计算属性名，它会将 `propName` 的值作为属性名添加到对象中。\n\n在我们的代码中，`{[val.name]: val.age}` 就是一个计算属性名，它会将 `val.name` 的值作为属性名添加到对象中，同时将 `val.age` 的值作为属性值添加到对象中。\n\n### 16.2对象的键值类型\n\n在 JavaScript 中，对象的键值可以是字符串类型或符号类型。\n\n通常，我们使用字符串作为对象的键值，例如：\n\n```\nconst obj = {\n  name: 'John',\n  age: 30,\n  'last name': 'Doe'\n};\n```\n\n在上面的代码中，对象 `obj` 中的键值分别是 `name`、`age` 和 `last name`，它们都是字符串类型。\n\n然而，在ES6引入符号类型（Symbol）之后，我们也可以使用符号作为对象的键值，例如：\n\n```\nconst mySymbol = Symbol('mySymbol');\nconst obj = {\n  [mySymbol]: 'Hello World'\n};\n```\n\n在上面的代码中，我们创建了一个符号 `mySymbol`，然后将其作为对象 `obj` 的键值，键名用方括号括起来。符号类型的键值在一些特定场景中很有用，例如在定义私有属性或者避免键名冲突时。需要注意的是，符号类型的键值是唯一的，它们不会与其他键名冲突。\n\n### 16.3变量名作为键名\n\n可以，JavaScript 中对象的键名可以使用变量来动态生成。\n\n例如，可以使用变量作为对象的键名，如下所示：\n\n```\nconst key = 'name';\nconst obj = {\n  [key]: 'John'\n};\n\nconsole.log(obj.name); // 输出 \"John\"\n```\n\n在上面的代码中，我们使用变量 `key` 来定义对象 `obj` 中的键名，这个键名是动态生成的。使用方括号语法，将变量 `key` 包裹在其中，就可以将其解析为一个字符串，作为对象的键名。\n\n需要注意的是，由于 JavaScript 对象的键名只能是字符串类型或符号类型，因此变量 `key` 中存储的值必须是字符串类型或符号类型，否则会导致语法错误。\n\n## 17. Object.defineProperty\n\nObject.defineProperty是一个内建对象函数，它用于给对象定义属性。它允许你定义一个对象的新属性或修改对象的已有属性，并且可以控制一些属性的行为，例如可写、可枚举和可配置等。\n\nObject.defineProperty的语法如下：\n\n```\nObject.defineProperty(obj, prop, descriptor)\n```\n\n其中：\n\n- obj：要定义属性的对象。\n- prop：需要定义或修改的属性的名称。\n- descriptor：一个对象，用来描述这个属性的特性。\n\ndescriptor参数可以包含以下属性：\n\n- value：属性的值，默认为undefined。\n- writable：布尔值，表示属性是否可写。默认false。\n- enumerable：布尔值，表示属性是否可枚举。默认false。\n- configurable：布尔值，表示可配置性。默认false。\n- get：取值函数，当访问该属性时，会调用此函数。默认为undefined。\n- set：赋值函数，当属性值改变时，会调用此函数。默认为undefined。\n\n举例如下：\n\n```\nlet obj = {};\n\n// 添加普通属性\nobj.a = 123;\n\n// 定义属性方式一\nObject.defineProperty(obj, 'b', {\n  value: 456,\n  writable: true,\n  enumerable: true,\n  configurable: true\n});\n\n// 定义属性方式二\nlet c = 789;\nObject.defineProperty(obj, 'c', {\n  get() {\n    return c;\n  },\n  set(newValue) {\n    console.log(`New value of c is: ${newValue}`)\n    c = newValue;\n  },\n  enumerable: true,\n  configurable: true\n});\n```\n\n以上代码将obj对象添加了三个属性，其中b和c使用了Object.defineProperty进行定义，b是一个普通的数据属性，而c具有getter和setter方法，在读取和修改c属性时会触发这两个方法，并输出日志。\n\n需要注意的是，使用Object.defineProperty定义的属性有些限制：\n\n1. __proto__属性不能被定义，必须使用Object.getPrototypeOf()方法访问。\n2. 可以使用Object.getOwnPropertyDescriptors()方法获取到一个属性的完整描述符，并复制到新对象中。\n3. 可以在同一对象上定义多个同名属性。会覆盖之前定义的。\n4. 原型上的属性在遍历时不会出现。只能定义可枚举或不可枚举的属性。\n5. 不能将数据属性定义为不可配置后再将其转换为访问器属性或反之。\n6. 不能将一个访问器属性定义为可写或可配置的，或者同时修改一个访问器描述符的值和getter或setter的描述符的值。\n\n综上，要使用Object.defineProperty需谨慎，需要清楚地了解其限制和使用场景。在实际开发中，我们通常使用ES6引入的class语法糖和语法规范中的getter和setter来更方便地操作对象的属性。\n\n举个例子：\n\n```\nclass Person {\n  // 使用语法糖定义私有变量_name\n  #_name;\n\n  constructor(name) {\n    this.#_name = name;\n  }\n\n  // 定义公共的getter和setter访问私有变量_name\n  get name() {\n    return this.#_name;\n  }\n\n  set name(newName) {\n    this.#_name = newName;\n  }\n}\n\nconst person = new Person('Tom');\nconsole.log(person.name); // \"Tom\"\n\nperson.name = 'Jerry'\nconsole.log(person.name); // \"Jerry\"\n```\n\n以上代码演示了如何使用class语法糖来简单地定义一个Person类，并使用getter和setter访问私有变量。UIColor、UIFont等常见第三方库也大量采用了这种语法糖的应用，代码更加清新易读。\n\n通过语法糖和规范进行属性定义的好处是，不用过多考虑对象属性的具体实现和私有特性，从而提高代码的可读性和可维护性。\n\n## 19.Vue什么是响应式数据绑定\n\n在Vue中，响应式的数据绑定是一种机制，它允许数据与视图之间建立实时的关联，当数据发生变化时，视图会自动更新以反映数据的最新状态。这种机制允许开发者以一种更加声明式和简单的方式进行数据处理和组件化开发。\n\nVue中的响应式数据绑定是通过Vue实例中的数据对象，以及Vue组件中的props和data对象来实现的。结合Vue的模板系统和组件化开发机制，开发者可以以一种容易理解、易于维护的方式进行应用程序开发。\n\nVue是如何实现响应式数据绑定的呢？Vue在使用数据对象时，会将数据对象转换为getter/setter形式，当数据发生变化时，setter函数会被触发，并通知Vue框架数据发生了变化。Vue会自动检测数据对象的变化，并将数据的变化反映在相关的视图上。这种机制允许我们在Vue中声明式地描述我们的应用状态，而不需要手动更新DOM，从而实现更少的模版代码和更少的样板代码。\n\n例如，在Vue模板中，可以通过v-model指令绑定到表单元素上，实现双向数据绑定：\n\n```\n<template>\n  <div>\n    <input v-model=\"message\" placeholder=\"Enter your message\">\n    <p>{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!'\n    }\n  }\n}\n</script>\n```\n\n在这个例子中，v-model指令允许我们将input元素与message变量绑定起来。当input元素的值发生变化时，Vue会自动将变化的内容赋值给message变量，当message变量发生变化时，Vue会自动更新视图以反映数据的最新状态。这就是Vue响应式的数据绑定机制。\n\n## 20. Vue生命周期流程\n\n在 Vue.js 中，每个组件实例都会经历一系列的生命周期过程。这些生命周期过程由一系列的钩子函数组成，这些钩子函数可以在不同的生命周期步骤中执行代码逻辑，以响应特定的事件或执行必要的操作。\n\n以下是 Vue.js 组件生命周期的流程：\n\n1. 创建阶段\n\n- `beforeCreate`：在实例初始化之后，数据观测（data observer）和事件配置之前被调用，此时 `vue` 实例的挂载阶段还没有开始。\n- `created`：实例已经完全创建，属性和方法都已经完成配置。需要注意的是此阶段不能更新属性和 DOM，此时 `$el` 还不存在。\n\n1. 挂载阶段\n\n- `beforeMount`：在挂载开始之前被调用。此时 `vue` 实例的 `$el` 和 `data` 都已经初始化，但并未创建真正的 `DOM` 节点。\n- `mounted`：在实例挂载到 `DOM` 后被调用。此时 `vue` 实例已经构建完成，可以操作 `DOM`，初始化发生在该钩子内部。\n\n1. 更新阶段\n\n- `beforeUpdate`：在响应式数据发生改变时，虚拟 `DOM` 重新渲染和打补丁之前被调用。此时可以进行必要的更新准备工作。\n- `updated`：当虚拟 `DOM` 重新渲染和打补丁之后调用。假如要对 `DOM` 进行更改会触发该钩子，注意不要在此修改数据，会导致无限循环。\n\n1. 销毁阶段\n\n- `beforeDestroy`：实例销毁之前调用。此时实例仍然完全可用，可以进行必要的清理工作，如清除定时器、解绑事件等等。\n- `destroyed`：实例销毁之后调用。调用该钩子之后，vue 实例以及所有的事件监听器会被移除，所有与实例相关的指令、过滤器等也会被销毁。\n\n1. 激活与停用阶段\n\n- `activated`: 被 keep-alive 缓存的组件激活时调用\n- `deactivated`: 被 keep-alive 缓存的组件停用时调用\n\n上述的生命周期钩子用于对应不同的组件状态，并且也为开发者提供了丰富的扩展能力，使用这些钩子函数，开发者可以在不同的状态阶段下进行相应的操作或处理业务逻辑。\n\n<img src=\"./images/生命周期.png\">\n\n---\n\n在整个 Vue.js 组件生命周期的过程中，可以看到一些重要的时机：\n\n- 在 `beforeCreate` 钩子函数中，实例已经完成了 `data` 对象的初始化，但还没有完成 `$el` 和事件的初始化。\n- 在 `created` 钩子函数中，除了可以访问 `$data` 和 `$el` 对象之外，其他的一切都需要等到挂载阶段才能访问到。\n- 在 `beforeMount` 钩子函数中，Vue.js 将开始创建组件的真实 `DOM`。此时，组件的 `$el` 属性已经存在，但是还没有挂载到实际的页面上。\n- 在 `mounted` 钩子函数中，Vue.js 完成了组件的挂载过程，并将组件的 `DOM` 添加到页面中。\n- 在 `beforeUpdate` 钩子函数中，响应式数据发生了变化，但是尚未对组件进行重新渲染。\n- 在 `updated` 钩子函数中，组件完成了重新渲染，并更新了 `DOM`。\n- 在 `beforeDestroy` 钩子函数中，组件即将被销毁，但仍然可以访问 `$data` 和 `$el` 等属性。\n- 在 `destroyed` 钩子函数中，组件已经被销毁，所有的事件监听器和指令等都已经被移除。\n\n-------\n\n下面是一个简单的 Vue.js 组件项目，展示了 Vue.js 生命周期的完整流程及各个时机绑定的钩子：\n\n```\n<template>\n  <div ref=\"root\">\n    <p>{{ message }}</p>\n    <button @click=\"updateMessage\">Update Message</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello, Vue.js!',\n    };\n  },\n  beforeCreate() {\n    console.log('beforeCreate');\n  },\n  created() {\n    console.log('created');\n  },\n  beforeMount() {\n    console.log('beforeMount');\n  },\n  mounted() {\n    console.log('mounted');\n  },\n  beforeUpdate() {\n    console.log('beforeUpdate');\n  },\n  updated() {\n    console.log('updated');\n  },\n  beforeDestroy() {\n    console.log('beforeDestroy');\n  },\n  destroyed() {\n    console.log('destroyed');\n  },\n  methods: {\n    updateMessage() {\n      this.message = 'Updated message!';\n    },\n  },\n};\n</script>\n```\n\n在这个示例中，我们定义了一个简单的组件，其中包含一个 `message` 数据属性和一个按钮，点击按钮之后可以更新 `message` 的值。在组件中，我们绑定了 Vue.js 生命周期中的所有钩子函数，并通过控制台输出相应的消息来表示当前执行的生命周期钩子。\n\n在组件的生命周期中，当组件被创建时，Vue.js 会依次触发 `beforeCreate` 和 `created` 钩子函数，在 `created` 钩子函数中可以访问组件 `data` 数据和 `el` 元素，但此时组件尚未挂载到页面中。接下来，当 Vue.js 开始挂载组件时，会依次触发 `beforeMount` 和 `mounted` 钩子函数，在 `mounted` 钩子函数中组件已经被挂载到页面中，此时可以对 `this.$el` 进行相关操作。\n\n在组件挂载后，如果组件中的 `data` 有变化，那么 Vue.js 会依次触发 `beforeUpdate` 和 `updated` 钩子函数，分别表示数据更新前后的状态。在所有的钩子函数执行完成后，Vue.js 会在组件销毁时依次触发 `beforeDestroy` 和 `destroyed` 钩子函数，分别表示销毁前和销毁后的状态，这个时候应该清除所有的事件监听器和定时器，否则可能会造成内存泄漏的问题。\n\n通过这个示例，可以更好地理解 Vue.js 的生命周期过程，并注意在不同的生命周期阶段下执行不同的操作，从而使组件功能更加完善和稳定。\n\n## 21.箭头函数的带大括号与不带大括号的区别\n\n`(x) => x + 1` 与 `(x) => {x + 1}` 的区别是：\n\n- `(x) => x + 1` 是一个箭头函数，它接受一个参数 `x`，返回 `x+1` 的结果。\n- `(x) => {x + 1}` 也是一个箭头函数，但是它使用了花括号 `{}`，其中包含了一个语句 `x + 1`。由于花括号中包含语句而非表达式，因此需要使用 `return` 语句将结果返回。\n\n具体来说，`(x) => {x + 1}` 不会直接返回 `x + 1` 的结果，而是返回 `undefined`，因为花括号中并没有 `return` 语句将结果返回。因此需要将其改写为 `(x) => {return x + 1;}` 或 `function(x){return x + 1;}` 才能实现与 `(x) => x + 1` 相同的功能。\n\n综上，`(x) => x + 1` 是一个返回表达式的箭头函数，而 `(x) => {x + 1}` 则是一个返回 `undefined` 的箭头函数，需要使用 `return` 语句明确返回结果。\n\n## 22.依赖关系\n\n依赖关系指的是一个模块（类、函数、对象等）依赖于其他模块，即它使用了其他模块中的功能或数据。这种依赖关系可以表现为代码中的函数调用、对象引用、类继承等形式。\n\n在软件开发中，模块化是一种常见的编程思想，它将一个大型的应用程序拆分成多个小的模块，每个模块都有自己的特定功能和职责。这种模块化的设计可以提高代码的可读性、可维护性和可扩展性。\n\n然而，模块之间的依赖关系也可能会导致一些问题。例如，如果一个模块依赖于其他模块中的某个函数或对象，而这个函数或对象被删除或修改了，那么依赖于它的模块也需要进行相应的修改。如果依赖关系过于复杂，这种修改可能会涉及到多个模块，从而增加了代码的维护难度。\n\n因此，在软件开发中，需要注意模块之间的依赖关系，避免出现过于复杂的依赖关系。一些常见的减少依赖关系的方法包括：\n\n- 使用接口或抽象类定义模块之间的通信接口，从而降低了模块之间的耦合度。\n\n- 使用依赖注入（Dependency Injection）等技术，将依赖关系的控制权交给容器，从而减少了模块之间的直接依赖关系。\n\n- 使用事件驱动编程（Event-Driven Programming）等技术，通过事件的发布和订阅来解耦模块之间的依赖关系。\n\n- 以下是一个简单的例子，展示了模块之间的依赖关系：\n\n  ```\n  // 定义一个模块A\n  const moduleA = {\n    data: 'data from module A',\n    getData() {\n      console.log(this.data);\n    }\n  };\n  \n  // 定义一个模块B，依赖于模块A\n  const moduleB = {\n    data: 'data from module B',\n    getData() {\n      console.log(this.data);\n      moduleA.getData(); // 调用模块A的方法\n    }\n  };\n  \n  // 在模块B中调用模块A的方法\n  moduleB.getData(); // 输出：data from module B 和 data from module A\n  ```\n\n  在这个例子中，模块B依赖于模块A，即在模块B中使用了模块A中的方法。通过调用模块B的getData方法，可以看到它先输出了自己的数据，然后再调用了模块A的getData方法，输出了模块A的数据。这种依赖关系可以通过控制模块之间的通信接口、使用依赖注入等方式进行优化和管理。\n\n## 23.回调函数\n\n  回调函数是一种特殊的函数，它作为参数传递给另一个函数，并在该函数执行完毕后被调用。回调函数通常用于异步编程中，例如在处理网络请求、读取文件、执行数据库操作等情况下，可以使用回调函数等待操作完成后再执行回调函数。\n\n  回调函数的使用方法与普通函数类似，只需要将函数名作为参数传递给另一个函数即可。例如，以下代码演示了在JavaScript中使用回调函数的基本方法：\n\n  ```\n  // 定义一个异步函数，接受一个回调函数参数\n  function asyncFunction(callback) {\n    // 模拟异步操作\n    setTimeout(function() {\n      console.log('Async operation completed.');\n      callback(); // 执行回调函数\n    }, 1000);\n  }\n  \n  // 定义一个回调函数\n  function callbackFunction() {\n    console.log('Callback function executed.');\n  }\n  \n  // 调用异步函数并传入回调函数\n  asyncFunction(callbackFunction);\n  ```\n\n  在这个例子中，我们定义了一个异步函数`asyncFunction`，它接受一个回调函数`callback`作为参数。在异步函数中，我们使用`setTimeout`方法模拟了一个异步操作，并在操作完成后执行了回调函数。同时，我们也定义了一个回调函数`callbackFunction`，它会在异步操作完成后被调用。最后，我们通过调用异步函数并传入回调函数的方式，实现了在异步操作完成后执行回调函数的效果。\n\n  回调函数能回调的原因是因为在JavaScript中，函数也是一种数据类型，可以被作为参数传递给其他函数。当我们将一个函数作为参数传递给另一个函数时，实际上是将这个函数的引用传递给了另一个函数。在另一个函数中，我们可以通过这个函数的引用来调用它并执行它。因此，在使用回调函数时，我们可以将一个函数作为参数传递给另一个函数\n\n，在异步操作完成后再执行这个函数。这种方式可以避免在异步操作中阻塞代码执行，提高了代码的效率和可读性。\n\n总之，回调函数是一种常见的编程技术，在异步编程中广泛应用。使用回调函数可以避免代码阻塞，提高代码的效率和可读性。同时，回调函数也是一种函数类型，可以被作为参数传递给其他函数，并在其他函数中执行。\n\n### 22.1更简单的例子\n\n以下是一个简单的例子，演示了在JavaScript中使用回调函数的基本方法：\n\n```\n// 接受一个数字参数和一个回调函数参数\nfunction square(num, callback) {\n  const result = num * num;\n  callback(result);\n}\n\n// 定义一个回调函数\nfunction printResult(result) {\n  console.log(\"The result is: \" + result);\n}\n\n// 调用square函数并传入回调函数\nsquare(5, printResult); // 输出：The result is: 25\n```\n\n在这个例子中，我们定义了一个`square`函数，它接受一个数字参数和一个回调函数参数。在函数中，我们计算了数字的平方，并将结果传递给回调函数。同时，我们也定义了一个回调函数`printResult`，它会在`square`函数执行完毕后被调用。最后，我们通过调用`square`函数并传入回调函数的方式，实现了在计算完成后输出结果的效果。\n\n----------\n\n以下是一个使用回调函数的简单例子：\n\nfunction add(a, b, callback) {\n  var result = a + b;\n  callback(result);\n}\n\nfunction display(result) {\n  console.log(\"The result is \" + result);\n}\n\nadd(2, 3, display);\n在这个例子中，我们定义了一个add函数，它接受两个参数a和b，并在它们上执行加法操作。add函数还接受第三个参数callback，它是一个回调函数。\n\n在add函数内部，我们首先计算出结果，然后将其作为参数传递给回调函数callback。在这个例子中，我们将display函数作为回调函数传递给add函数。\n\ndisplay函数将结果作为参数打印到控制台上。\n\n最后，我们调用add函数并传递两个数字和回调函数作为参数。当add函数完成计算时，它将调用回调函数display，并将结果作为参数传递给它。display函数将结果打印到控制台上。\n\n### 22.2函数可以被传递\n\n回调函数能够回调的原因在于JavaScript中的函数是一等公民，也就是说，函数可以像其他数据类型一样被传递、返回、存储等。在JavaScript中，函数不仅可以被定义和调用，还可以作为参数传递给另一个函数或作为另一个函数的返回值。\n\n在异步编程中，我们通常需要在某个操作完成后执行某些代码，但是由于JavaScript是单线程执行的，如果在操作完成前执行这些代码，会导致程序阻塞。为了解决这个问题，我们可以将这些代码封装成一个函数，然后将这个函数作为回调函数传递给异步操作。当异步操作完成后，系统会自动调用这个回调函数，以执行我们需要执行的代码。\n\n回调函数的形式参数通常为函数类型，当异步操作完成后，将会调用这个函数，并将异步操作的结果作为参数传递给这个函数。这样，我们就可以在异步操作完成后使用异步操作的结果进行后续操作。因此，回调函数的能够回调的原因在于函数是一等公民，可以作为参数传递，以及JavaScript的事件循环机制。\n\n## 23.set 与对象的区别\n\n在JavaScript中，`set`和对象（`object`）是两种不同的数据类型，它们具有不同的特点和用途。\n\n`Set`是ES6中新增的一种集合类型，它类似于数组，但是具有以下特点：\n\n- `Set`中的元素是唯一的，不会重复；\n- `Set`中的元素是无序的，不能通过下标来访问；\n- `Set`中的元素可以是任何数据类型，包括基本类型和对象。\n\n在`Set`中，添加重复元素会被自动忽略，因此`Set`通常被用于去重或者判断元素是否存在等场景。\n\n对象是JavaScript中的一种复合数据类型，它由一组属性（`key-value`对）组成，每个属性都有一个唯一的键和对应的值，可以是基本类型或者其他对象。对象可以通过键来访问和修改属性的值，因此对象通常被用于存储和管理复杂的数据结构。\n\n总之，`Set`和对象是两种不同的数据类型，它们具有不同的特点和用途。`Set`通常被用于去重或者判断元素是否存在等场景，而对象通常被用于存储和管理复杂的数据结构。\n\n## 24.类与构造函数的区别\n\n### 24.1不同的对象创建方式\n\n类（Class）和构造函数（Constructor）是两种不同的对象创建方式，它们具有不同的特点和用途。\n\n构造函数是一种用于创建对象的函数，它使用`new`关键字来创建对象，并且可以接受参数来初始化对象的属性。构造函数通常通过`this`关键字来引用当前对象的属性和方法，同时也可以通过原型链来实现方法的继承。例如：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n};\n\nconst person = new Person(\"Alice\", 20);\nperson.sayHello(); // 输出：Hello, my name is Alice, and I'm 20 years old.\n```\n\n在这个例子中，我们定义了一个构造函数`Person`，用于创建`Person`对象。构造函数接受两个参数`name`和`age`，用于初始化对象的属性。然后，我们通过给`Person.prototype`添加方法的方式来定义`sayHello`方法，并将它继承给`Person`对象。最后，我们创建了一个`Person`对象，并调用`sayHello`方法来输出相应的信息。\n\n类是ES6中新增的一种对象创建方式，它使用`class`关键字来定义类，并且使用`new`关键字来创建对象。类中包含了构造函数和实例方法，用于初始化对象的属性和定义对象的行为。类也可以通过继承来实现方法的复用和扩展。例如：\n\n```\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  sayHello() {\n    console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n  }\n}\n\nconst person = new Person(\"Alice\", 20);\nperson.sayHello(); // 输出：Hello, my name is Alice, and I'm 20 years old.\n```\n\n在这个例子中，我们使用`class`关键在这个例子中，我们使用`class`关键字定义了一个名为`Person`的类。类中包含了一个构造函数`constructor`和一个实例方法`sayHello`。构造函数用于初始化对象的属性，实例方法用于定义对象的行为。在类的内部，可以通过`this`关键字引用当前对象。\n\n我们创建了一个`Person`类的实例，并将`\"Alice\"`和`20`作为参数传递给构造函数。然后，我们通过调用实例方法`sayHello`来输出相应的信息。\n\n需要注意的是，虽然类的定义和构造函数的定义在语法上有所不同，但它们都可以用来创建对象并定义对象的行为。类的定义更加清晰和简洁，具有更好的可读性和可维护性，同时还提供了继承和其他高级特性的支持。而构造函数则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。\n\n总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。\n\n### 24.2 不同的继承方式\n\n此外，类和构造函数的继承方式也有所不同。在构造函数中，可以通过修改原型链来实现继承。例如，可以通过将子类的原型对象指向父类的一个实例来实现继承。例如：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n};\n\nfunction Student(name, age, grade) {\n  Person.call(this, name, age);\n  this.grade = grade;\n}\n\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n\nconst student = new Student(\"Bob\", 18, 90);\nstudent.sayHello(); // 输出：Hello, my name is Bob, and I'm 18 years old.\n```\n\n在这个例子中，我们定义了一个`Person`构造函数和一个`Student`构造函数。然后，我们通过在`Student`构造函数中调用`Person`构造函数并继承其属性，来实现对`Person`构造函数的继承。接着，我们通过将`Student`的原型对象指向一个`Person`实例来继承`Person`的方法。最后，我们创建了一个`Student`对象，并调用`sayHello`方法来输出相应的信息。\n\n在类中，继承使用`extends`关键字来实现。例如：\n\n```\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  sayHello() {\n    console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n  }\n}\n\nclass Student extends Person {\n  constructor(name, age, grade) {\n    super(name, age);\n    this.grade = grade;\n  }\n}\n\nconst student = new Student(\"Bob\", 18, 90);\nstudent.sayHello(); // 输出：Hello, my name is Bob, and I'm 18 years old.\n```\n\n在这个例子中，我们定义了一个`Person`类和一个`Student`类，并使用`extends`关键字将`Student`类继承自`Person`类，从而实现对`Person`类的继承。在`Student`类的构造函数中，我们通过调用`super`关键字来调用父类的构造函数并继承其属性。然后，我们定义了一个`grade`属性，用于表示学生的分数。最后，我们创建了一个`Student`对象，并调用`sayHello`方法来输出相应的信息。\n\n需要注意的是，类的继承方式更加简洁和直观，同时也提供了更好的语言特性支持，例如`super`关键字和`constructor`方法。而构造函数的继承方式则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。\n\n总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。类提供了更加清晰和简洁的语法来定义对象和实现继承，而构造函数则更加灵活和自由。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。\n\n### 24.3高级特性\n\n此外，类还提供了一些其他的高级特性，例如静态方法、getter和setter等。\n\n静态方法是指类的方法，不需要实例化对象就可以调用。在类中，可以使用`static`关键字来定义静态方法。例如：\n\n```\nclass MathUtil {\n  static add(x, y) {\n    return x + y;\n  }\n}\n\nconsole.log(MathUtil.add(1, 2)); // 输出：3\n```\n\n在这个例子中，我们定义了一个`MathUtil`类，并使用`static`关键字定义了一个静态方法`add`。静态方法可以直接通过类来调用，而不需要先实例化对象。\n\nGetter和Setter是指用于读取和设置对象属性的方法。在类中，可以使用`get`和`set`关键字来定义Getter和Setter方法。例如：\n\n```\nclass Person {\n  constructor(name, age) {\n    this._name = name;\n    this._age = age;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  set name(value) {\n    this._name = value;\n  }\n  \n  get age() {\n    return this._age;\n  }\n  \n  set age(value) {\n    if (value > 0 && value < 100) {\n      this._age = value;\n    } else {\n      throw new Error(\"Invalid age value.\");\n    }\n  }\n}\n\nconst person = new Person(\"Alice\", 20);\nconsole.log(person.name); // 输出：Alice\nperson.name = \"Bob\";\nconsole.log(person.name); // 输出：Bob\nconsole.log(person.age); // 输出：20\nperson.age = 200; // 抛出异常：Invalid age value.\n```\n\n在这个例子中，我们定义了一个`Person`类，并使用`get`和`set`关键字定义了`name`和`age`属性的Getter和Setter方法。Getter方法用于读取属性的值，Setter方法用于设置属性的值。在Setter方法中，我们可以对属性的值进行验证和处理。\n\n需要注意的是，Getter和Setter方法可以使用不同的属性名来定义，例如在上面的例子中，我们使用了`_name`和`_age`属性来存储实际的属性值，并使用`name`和`age`来定义Getter和Setter方法。这样可以保证Getter和Setter方法的调用方式与普通属性的调用方式相同，同时也可以避免Getter和Setter方法的递归调用。\n\n总之，类提供了一系列高级特性，例如静态方法、Getter和Setter等，可以更加方便地实现对象的行为和属性的管理。在实际开发中，需要根据具体的需求和场景选择合适的特性来使用。\n\n### 24.4语法特性\n\n除了上述特性之外，类还有一些其他的语法和用法需要注意。\n\n首先是类的表达式语法。类可以像函数一样，使用表达式来定义。例如：\n\n```\nconst MyClass = class {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  sayHello() {\n    console.log(`Hello, ${this.name}!`);\n  }\n};\n\nconst obj = new MyClass(\"Alice\");\nobj.sayHello(); // 输出：Hello, Alice!\n```\n\n在这个例子中，我们使用类表达式的方式定义了一个名为`MyClass`的类，并创建了一个`MyClass`的实例。类表达式与类声明的语法类似，只是将类名省略了而已。\n\n其次是类的默认构造函数。如果类没有定义构造函数，那么会默认生成一个空的构造函数。例如：\n\n```\nclass MyClass {\n  sayHello() {\n    console.log(\"Hello!\");\n  }\n}\n\nconst obj = new MyClass();\nobj.sayHello(); // 输出：Hello!\n```\n\n在这个例子中，我们定义了一个名为`MyClass`的类，并在其中定义了一个`sayHello`方法。由于没有定义构造函数，因此会默认生成一个空的构造函数。我们创建了一个`MyClass`的实例，并调用`sayHello`方法来输出相应的信息。\n\n最后是类的继承链。在类的继承中，如果一个子类继承自多个父类，那么它的继承链会按照从左到右的顺序进行。例如：\n\n```\nclass A {\n  sayHello() {\n    console.log(\"Hello from A!\");\n  }\n}\n\nclass B {\n  sayHello() {\n    console.log(\"Hello from B!\");\n  }\n}\n\nclass C extends A,B {\n  \n}\n\nconst obj = new C();\nobj.sayHello(); // 输出：Hello from A!\n```\n\n在这个例子中，我们定义了三个类`A`、`B`和`C`。类`C`继承自类`A`和类`B`，并且没有定义自己的`sayHello`方法。由于继承链的顺序是从左到右，因此`C`类的`sayHello`方法会继承自`A`类而不是`B`类。我们创建了一个`C`类的实例，并调用`sayHello`方法来输出相应的信息。\n\n需要注意的是，如果类的继承链中存在同名的方法，那么会按照从左到右的顺序取第一个方法。这个特性在多重继承和方法的定制中非常有用。\n\n总之，类是ES6中新增的一种语言特性，提供了更加清晰和简洁的语法来定义对象和实现继承。类的特性和用法也非常丰富，可以根据具体的需求和场景选择合适的特性来使用。在实际开发中，需要熟练掌握类的语法和用法，以便更加高效地进行编程。\n\n## 25.链式写法\n\n链式写法是一种将多个操作按照一定的顺序连在一起的编程风格。在链式写法中，每个操作都返回自身的对象，从而可以继续进行下一个操作。这种风格的代码通常非常简洁和直观，可以提高代码的可读性和可维护性。\n\n链式写法通常使用方法链的方式实现。在方法链中，每个方法都返回自身的对象，从而可以继续调用下一个方法。例如：\n\n```\n// 传统的写法\nconst arr = [1, 2, 3];\nconst filtered = arr.filter(function(item) {\n  return item > 1;\n});\nconst mapped = filtered.map(function(item) {\n  return item * 2;\n});\n\n// 链式写法\nconst arr = [1, 2, 3];\nconst mapped = arr.filter(function(item) {\n  return item > 1;\n}).map(function(item) {\n  return item * 2;\n});\n```\n\n在这个例子中，我们分别使用传统的写法和链式写法来实现了一个数组的过滤和映射操作。在传统的写法中，我们需要使用多个中间变量来存储中间结果。而在链式写法中，我们可以直接将多个操作连接在一起，从而避免了中间变量的使用，使得代码更加简洁和直观。\n\n-------\n\n链式写法通常是从左往右进行读取和理解的。在链式写法中，每个方法都是基于前一个方法的结果进行操作的，因此需要按照从左往右的顺序进行读取和理解。例如，在下面的代码中：\n\n```\nconst result = arr.filter(function(item) {\n  return item > 1;\n}).map(function(item) {\n  return item * 2;\n});\n```\n\n我们可以先看到`arr`对象的`filter`方法，然后再看到`map`方法。这样就能够理解这段代码的含义，即先将数组`arr`中大于1的元素过滤出来，然后将剩余的元素都乘以2。\n\n需要注意的是，有些方法也可以从右往左进行读取和理解。例如，在下面的代码中：\n\n```\nconst result = arr.reduceRight(function(prev, curr) {\n  return prev + curr;\n});\n```\n\n我们可以先看到`arr`对象的`reduceRight`方法，然后再看到回调函数。这样就能够理解这段代码的含义，即从右往左地对数组`arr`中的元素进行累计求和。\n\n总之，链式写法需要按照从左往右的顺序进行读取和理解，以便理解代码的含义和作用。在实际开发中，需要注意代码的可读性和可维护性，以便其他开发者能够更加容易地理解和维护代码\n\n## 26.形参命名为什么经常用foo\n\n形参命名为`foo`、`bar`、`baz`等是一种编程中常用的命名方式，通常被称为哑变量或占位符。这种命名方式的目的是为了强调变量的重要性或类型，同时也可以避免歧义和冲突。**类似张三和李四，foo第一个无名变量，bar第二个无名变量，以此类推**\n\n具体来说，这种命名方式通常用于以下几个方面：\n\n1. 强调变量的重要性：在一些情况下，变量的名称并不重要，重要的是变量的作用和含义。例如，在某些算法和数据结构中，变量的名称可能并不重要，重要的是它们的作用和含义。使用哑变量或占位符可以强调变量的作用和含义，而不会分散注意力。\n2. 强调变量的类型：在一些情况下，变量的类型比名称更加重要。例如，在某些函数中，参数的类型可能比名称更加重要。使用哑变量或占位符可以强调变量的类型，而不会分散注意力。\n3. 避免歧义和冲突：在一些情况下，变量的命名可能会引起歧义和冲突。例如，在一些示例代码和教学材料中，变量的名称可能已经被占用或者已经有了特定的含义。使用哑变量或占位符可以避免歧义和冲突，使得示例代码和教学材料更加通用和易懂。\n\n需要注意的是，虽然哑变量或占位符可以提高代码的可读性和可维护性，但是也需要注意使用的场景和范围。在实际开发中，应该根据具体的需求和场景选择合适的命名方式，以便其他开发者能够更加容易地理解和维护代码。\n\n此外，还有一些其他的命名方式和规范，例如驼峰命名法、下划线命名法等。这些命名方式和规范都有自己的特点和适用场景，需要根据具体的需求和场景选择合适的命名方式和规范。\n\n驼峰命名法是一种常用的命名方式，它将多个单词连接起来，每个单词的首字母大写，除第一个单词外其他单词的首字母都小写。例如，`firstName`、`lastName`、`emailAddress`等。驼峰命名法通常用于变量、函数和对象的命名。\n\n下划线命名法是另一种常用的命名方式，它将多个单词连接起来，每个单词之间用下划线分隔。例如，`first_name`、`last_name`、`email_address`等。下划线命名法通常用于数据库表名、URL路径、CSS类名等。\n\n需要注意的是，在使用命名方式和规范时，应该尽量保持一致性和规范性，以便提高代码的可读性和可维护性。同时，也需要注意命名的长度和含义，以避免过长或者过短的命名导致代码的可读性下降。\n\n------\n\n在编程中，选择合适的变量名是非常重要的，可以提高代码的可读性和可维护性。在不同的场景下，选择不同的变量名可以更好地表达变量的含义和作用。\n\n下面是一些常见的场景和对应的变量名：\n\n1. 数组和列表：对于数组和列表中的元素，可以使用单数的名词来表示。例如，`item`、`element`、`value`等。\n2. 布尔值：对于布尔值，可以使用形容词或动词的过去分词来表示。例如，`isDone`、`isEnabled`、`hasError`等。\n3. 函数和方法：对于函数和方法，可以使用动词或动词短语来表示。例如，`getLength`、`calculateSum`、`renderList`等。\n4. 对象和类：对于对象和类，可以使用名词来表示。例如，`person`、`customer`、`product`等。\n5. 常量：对于常量，可以使用全大写的字母和下划线来表示。例如，`MAX_VALUE`、`DEFAULT_TIMEOUT`等。\n6. 迭代器和计数器：对于迭代器和计数器，可以使用单词或单词缩写来表示。例如，`i`、`j`、`k`、`index`、`count`等。\n\n需要注意的是，在选择变量名时，应该遵循命名规范和良好的编程习惯，以便提高代码的可读性和可维护性。同时，在实际开发中，应该根据具体的需求和场景选择合适的变量名，以便其他开发者能够更加容易地理解和维护代码。\n\n-----\n\n`foo`、`bar`、`baz`是一组常用的哑变量或占位符，通常用于编程中临时测试、示例代码、伪代码等场景。这些变量名通常被视为没有具体含义的变量名，只是作为占位符来使用。\n\n在实际开发中，这三个变量名通常用于测试代码和示例代码中，以便提供一些简单的例子来说明代码的用法和效果。例如，在下面的代码中：\n\n```\nfunction add(foo, bar) {\n  return foo + bar;\n}\n\nconst result = add(2, 3);\nconsole.log(result); // 输出 5\n```\n\n我们使用了`foo`和`bar`作为函数`add`的参数，这两个变量名并没有具体的含义，只是作为占位符来使用。这样可以更加简单地说明函数`add`的用法和效果，而不会分散注意力。\n\n需要注意的是，尽管这些变量名通常被视为没有具体含义的变量名，但是在实际开发中，我们应该尽量使用有意义的变量名来提高代码的可读性和可维护性。只有在一些简单的测试代码和示例代码中，才可以使用这些占位符变量名.\n\n## 27.双标签改单标签\n\n要将双标签形式中的尾标签删除，同时将尾标签中的 `/` 删除，这样就变成了单标签形式。\n\n例如，将双标签形式的 `<input type=\"text\"></input>` 改成单标签形式，就需要将它修改成 `<input type=\"text\">`。\n\n另外，需要注意的是，并非所有的双标签都可以简单地改成单标签。如果一个双标签有子元素或者属性值为空，那么它就无法转换成单标签。例如 `<div><span></span></div>`、`<input type=\"text\" value=\"\">` 等都无法改成单标签形式。只有像上面示范的那个例子一样，没有子元素并且没有属性值为空的双标签才能写成单标签形式。\n\n好的，下面再给一些例子来详细介绍如何将双标签改成单标签。\n\n1. `<img>` 标签\n\n`<img>` 标签是 HTML 中最常见的单标签之一，它表示文档中的图像。在双标签形式中，它通常被写成 `<img></img>` 或者 `<img />` 的形式。\n\n将其改成单标签的形式，只需要删除尾标签即可，这样就得到了 `<img>` 标签的单标签形式。\n\n1. `<input>` 标签\n\n`<input>` 标签用来表示文档中的表单控件，例如文本框、单选框、复选框等。在双标签形式中，它通常被写成 `<input></input>` 或者 `<input />` 的形式。\n\n对于 `<input>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<input type=\"text\" name=\"username\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<input type=\"text\">输入框</input>` 和 `<input type=\"text\" value=\"\" />` 都不能改成单标签的形式。\n\n1. `<br>` 标签\n\n`<br>` 标签用来表示文档中的换行符。在双标签形式中，它通常被写成 `<br></br>` 或者 `<br />` 的形式。\n\n和 `<img>` 标签一样，将 `<br>` 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 `<br>` 标签的单标签形式。\n\n1. `<link>` 标签\n\n`<link>` 标签用来加载外部资源，例如样式表、脚本文件等。在双标签形式中，它通常被写成 `<link></link>` 或者 `<link />` 的形式。\n\n和 `<input>` 标签一样，对于 `<link>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<link rel=\"stylesheet\" href=\"style.css\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<link>` 标签中的属性 rel 和 href 就不能为空。\n\n1. `<meta>` 标签\n\n`<meta>` 标签用来表示文档的元数据，例如编码方式、关键字、描述等。在双标签形式中，它通常被写成 `<meta></meta>` 或者 `<meta />` 的形式。\n\n对于 `<meta>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<meta charset=\"utf-8\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<meta>` 中的 charset 属性就不能为空。\n\n1. `<hr>` 标签\n\n`<hr>` 标签用来表示文档中的水平线。在双标签形式中，它通常被写成 `<hr></hr>` 或者 `<hr />` 的形式。\n\n和 `<img>` 标签一样，将 `<hr>` 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 `<hr>` 标签的单标签形式。\n\n1. `<source>` 标签\n\n`<source>` 标签用来定义多媒体资源（如视频、音频）的可选来源。在双标签形式中，它通常被写成 `<source></source>` 或者 `<source />` 的形式。\n\n和 `<input>` 标签一样，对于 `<source>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<source src=\"video.mp4\" type=\"video/mp4\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<source>` 标签中的 src 和 type 属性就不能为空。\n\n总之，将双标签改成单标签的关键就是删除尾标签。但需要注意的是，并非所有的双标签都可以简单地改成单标签，只有没有子元素并且没有属性值为空的双标签才能改成单标签。所以在修改标签形式的时候，一定要注意检查标签中的子元素和属性值。\n\n## 28.多层嵌套数组，对象\n\n```\nconst {\n  a: {\n    b: {c}\n  }\n} = obj;\nconsole.log(c); // 1\n```\n\n1. 解构多层数组和对象\n\n```\nconst data = [\n  {\n    id: 1,\n    name: 'Alice',\n    cats: [\n      {id: 1, name: 'Mimi'},\n      {id: 2, name: 'Kiki'}\n    ]\n  },\n  {\n    id: 2,\n    name: 'Bob',\n    cats: [{id: 3, name: 'Lala'}]\n  }\n];\n\nconst [{cats: [cat1, cat2]}, {cats: [cat3]}] = data;\nconsole.log(cat1, cat2, cat3); // { id: 1, name: 'Mimi' } { id: 2, name: 'Kiki' } { id: 3, name: 'Lala' }\n```\n\n以上示例中，使用 `...` 操作符将多层的数据结构展开并解构到变量中，简化了代码并使得操作更加清晰易懂。在实际开发中，可以根据具体情况选择使用解构赋值的方式来取出多层嵌套结构中的值。\n\n### 28.2更多示例\n\n多层嵌套数组和多层嵌套对象都是在编程中常见的数据结构，本质上它们都是存储一组相关数据的容器。\n\n1. 多层嵌套数组\n\n多层嵌套数组指的是将多个数组嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套数组的例子：\n\n```\nconst arr = [\n  [1, 2, 3],\n  [4, 5, 6, [7, 8]],\n  [9]\n];\n```\n\n在这个例子中，常量 arr 是一个三层嵌套的数组，其中第二层的第四个元素又是一个二层嵌套的数组。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。\n\n要访问嵌套数组中的元素，可以通过多次使用数组索引来获取。例如，获取第三个元素的第一个元素的值，可以使用下面的代码：\n\n```\nconst x = arr[2][0];\n```\n\n1. 多层嵌套对象\n\n多层嵌套对象指的是将多个对象嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套对象的例子：\n\n```\nconst obj = {\n  name: 'Alice',\n  age: 20,\n  address: {\n    country: 'USA',\n    city: 'New York',\n    street: {\n      name: 'Broadway',\n      number: 1234\n    }\n  }\n};\n```\n\n在这个例子中，常量 obj 是一个三层嵌套的对象，其中第二层和第三层都是嵌套的对象。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。\n\n要访问嵌套对象中的属性，可以使用点号（.）操作符或方括号（[]）操作符来获取。例如，获取地址的街道名称，可以使用下面的代码：\n\n```\nconst streetName = obj.address.street.name;\n```\n\n需要注意的是，在使用点号操作符时，属性名必须是一个合法的标识符。如果属性名中包含特殊字符或关键字，就必须使用方括号操作符，并将属性名用引号括起来。例如：\n\n```\nconst propertyName = 'street.name';\nconst value = obj['address'][propertyName];\n```\n\n1. 嵌套数组和嵌套对象的异同点\n\n虽然嵌套数组和嵌套对象都是用于存储多个相关数据的容器，但它们之间还是有一些区别和异同点的。\n\n相同点：\n\n- 均可进行多级嵌套，可以表示较为复杂的数据结构。\n- 均可访问其内部嵌套的元素或属性。\n\n不同点：\n\n- 嵌套数组是一种基于索引值来访问和操作的数据结构，而嵌套对象是一种基于属性名来访问和操作的数据结构。\n- 嵌套数组的元素是有序的，而嵌套对象的属性是无序的。\n- 在实际开发中，嵌套数组常用于存储一组相同类型的数据，而嵌套对象则常用于存储一个实体对象的各个属性。\n- 嵌套数组可以使用循环来遍历、查找、过滤和修改数据，而嵌套对象则可以使用对象方法和操作符来操作属性，如 Object.keys()、Object.values()、Object.assign() 等。\n\n1. 多层嵌套数组与多层嵌套对象的注意事项\n\n在使用多层嵌套数组或多层嵌套对象时，需要注意以下事项：\n\n- 不要过度嵌套，一般不要超过三层。\n- 尽量保持数据结构清晰，以便于阅读和维护代码。\n- 多层嵌套数组和多层嵌套对象的访问操作比较繁琐和易错，需要仔细处理。建议使用变量和常量来保存中间结果，以便于复用。\n- 在修改多层嵌套数组或多层嵌套对象时，请避免对原数据进行直接修改，可以使用深拷贝（deep clone）来获得一份新的数据，然后对新的数据进行修改。否则可能会引起意外的副作用。\n- 使用多层嵌套数组或多层嵌套对象时，还需要考虑数据之间的关系和依赖，以便于数据之间的传递和交互。例如，可以使用回调函数、事件监听器、Promise、Async/Await 等机制进行数据传递和交互。\n- 示例代码\n\n下面通过一些示例代码来演示使用多层嵌套数组和多层嵌套对象的相关操作。\n\n5.1. 多层嵌套数组的示例代码：\n\n```\nconst arr = [\n  [1, 2, 3],\n  [4, 5, 6, [7, 8]],\n  [9]\n];\n\n// 访问嵌套数组的元素\nconst x = arr[1][3][1]; // 8\n\n// 遍历嵌套数组的所有元素\nfor(let i = 0; i < arr.length; i++) {\n  for(let j = 0; j < arr[i].length; j++) {\n    console.log(arr[i][j]);\n  }\n}\n\n// 过滤嵌套数组的元素\nconst filteredArr = arr.filter(item => item.includes(2));\nconsole.log(filteredArr); // [[1, 2, 3]]\n\n// 修改嵌套数组的元素\narr[1][1] = 0;\nconsole.log(arr); // [[1, 2, 3], [4, 0, 6, [7, 8]], [9]]\n```\n\n5.2. 多层嵌套对象的示例代码：\n\n```\nconst obj = {\n  name: 'Alice',\n  age: 20,\n  address: {\n    country: 'USA',\n    city: 'New York',\n    street: {\n      name: 'Broadway',\n      number: 1234\n    }\n  }\n};\n\n// 访问嵌套对象的属性\nconst streetName = obj.address.street.name; // Broadway\n\n// 遍历嵌套对象的所有属性\nfor(let prop in obj) {\n  if(typeof obj[prop] === 'object') {\n    for(let subProp in obj[prop]) {\n      console.log(subProp + ': ' + obj[prop][subProp]);\n    }\n  } else {\n    console.log(prop + ': ' + obj[prop]);\n  }\n}\n\n// 修改嵌套对象的属性\nobj.address.street.number = 5678;\nconsole.log(obj);\n/* {\n  name: 'Alice',\n  age: 20,\n  address: {\n    country: 'USA',\n    city: 'New York',\n    street: {\n      name: 'Broadway',\n      number: 5678\n    }\n  }\n} */\n```\n\n### 28.3多层数组合并到一个数组\n\n可以使用 `...` 操作符并结合 `Array.reduce()` 方法来合并多个数组套数组到一个数组中。`Array.reduce()` 方法会遍历每个数组并将其合并到一个新的数组中，代码实现如下：\n\n```\nconst arr = [[1, 2], [3, 4], [5, 6]];\nconst flattened = arr.reduce((acc, val) => acc.concat(val), []);\n\nconsole.log(flattened); // [1, 2, 3, 4, 5, 6]\n```\n\n在上面的示例中，`arr` 是一个由三个数组组成的数组。使用 `Array.reduce()` 方法将它们合并到一个新的数组 `flattened` 中。在每次迭代中，回调函数接收两个参数，即累加器（`acc`）和当前值（`val`）。起始值为一个空数组（`[]`）。在每次迭代中，将当前值（一个数组）连接到累加器中。最后返回一个扁平化后的数组。\n\n如果你使用了 ES6，还可以用简化的箭头函数语法和展开运算符来简化代码：\n\n```\nconst arr = [[1, 2], [3, 4], [5, 6]];\nconst flattened = arr.reduce((acc, val) => [...acc, ...val], []);\n\nconsole.log(flattened); // [1, 2, 3, 4, 5, 6]\n```\n\n以上两种方法均可实现将多个数组套数组合并到一个数组中。\n\n**如果需要将多层嵌套的数组全部展开到一个新数组中**，除了使用多层的 `Array.reduce()` 递归调用外，还可以使用 ES6 中的展开运算符和递归函数来实现。具体实现如下：\n\n```\nfunction flatten(arr) {\n  return arr.reduce((acc, val) => Array.isArray(val) ? [...acc, ...flatten(val)] : [...acc, val], []);\n}\n\nconst arr = [[1, [2], [3, [[4]]]], 5];\n\nconsole.log(flatten(arr)); // [1, 2, 3, 4, 5]\n```\n\n在上面的代码中，`flatten` 函数递归调用自身并使用展开运算符将每个层次的数组展开到一个新数组中。在每个迭代中，如果当前值为数组，则递归调用 `flatten` 函数，否则直接将它添加到新数组中。最终会得到扁平化后的数组 `[1, 2, 3, 4, 5]`。\n\n需要注意的是，如果嵌套的数组很多，递归调用函数可能会导致栈溢出的问题。可以使用尾调用优化或其他的解决方案来解决这个问题。\n\n### 28.4对象的嵌套合并\n\n在 JavaScript 中，对象可以包含其他对象或数组，并且可以嵌套多层。如果需要将多层嵌套的对象或数组全部展开到一个新对象或数组中，可以使用递归函数和 ES6 中的展开运算符来实现。\n\n展开对象中的嵌套对象示例如下：\n\n```\nconst obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: {\n      e: 3\n    }\n  },\n  f: [4, 5, [6, 7]]\n};\n\nfunction flattenObj(obj) {\n  return Object.entries(obj).reduce((acc, [key, val]) => {\n    return acc.concat(\n      typeof val === \"object\" && !Array.isArray(val)\n        ? flattenObj(val)\n        : { [key]: val }\n    );\n  }, []);\n}\n\nconst flattenedObj = Object.assign({}, ...flattenObj(obj));\n\nconsole.log(flattenedObj);\n// { a: 1, c: 2, e: 3, '0': 4, '1': 5, '2': [ 6, 7 ] }\n```\n\n在上面的代码中，`flattenObj` 函数递归调用自身并使用 `Object.entries()` 方法将对象转换为可迭代的键/值数组。在每个迭代中，如果当前值为对象，则递归调用 `flattenObj` 函数。否则，将当前键/值对转换为一个新对象并返回。最后使用展开运算符和 `Object.assign()` 方法将所有新对象合并成一个扁平化的新对象。\n\n展开数组中的嵌套数组示例如下：\n\n```\nconst arr = [1, [2, [3, [4]]], 5];\n\nfunction flattenArr(arr) {\n  return arr.reduce((acc, val) =>\n    Array.isArray(val) ? acc.concat(flattenArr(val)) : acc.concat(val), []);\n}\n\nconst flattenedArr = flattenArr(arr);\n\nconsole.log(flattenedArr); // [ 1, 2, 3, 4, 5 ]\n```\n\n在上面的代码中，`flattenArr` 函数递归调用自身并使用 `Array.reduce()` 方法遍历每个嵌套数组。在每个迭代中，如果当前值为数组，则递归调用 `flattenArr` 函数。否则，将当前值添加到新数组中。最后返回扁平化后的新数组。\n\n需要注意的是，在处理对象或数组时，循环引用可能会导致无限递归的问题。需要特别小心处理或者采取其他的解决方案。\n\n## 29.重排重绘\n\n重排和重绘是网页性能优化中重要的概念。**重排（reflow）**指的是当DOM结构发生改变，影响到元素的布局、尺寸、位置等属性时，浏览器需要重新计算元素的几何属性和布局，这个过程就是重排。而**重绘（repaint）**则是指当元素的样式发生改变，但不影响到布局时，浏览器只需要重新绘制元素的视觉效果，这个过程就是重绘。重排和重绘都会消耗大量的计算资源，因此会影响网页的性能。以下是一些常见的导致重排和重绘的操作：\n\n1.改变元素的位置、尺寸和布局：包括改变元素的宽高、margin、padding、border、position、display等属性。\n\n2.改变元素的内容：包括改变文本内容、图片大小、添加或删除DOM节点等操作。\n\n3.改变浏览器窗口大小：当窗口大小改变时，会影响到整个页面的布局，因此会触发重排。\n\n为了减少重排和重绘的次数，可以采取以下措施：\n\n1.使用CSS3的transform属性来改变元素的位置和尺寸，而不是通过改变元素的position、width、height等属性。\n\n2.将需要多次操作的元素，先脱离文档流，进行操作后再重新插入文档流。\n\n3.对需要改变的元素，先使用display:none将其隐藏，修改完后再显示。\n\n4.使用requestAnimationFrame来优化动画效果，避免频繁的重排和重绘。\n\n5.避免频繁地修改DOM：可以先将需要修改的数据存储在JavaScript中，最后一次性更新到DOM中。\n\n6.使用CSS Sprites来减少图片的请求次数，将多张小图片合成一张大图，通过background-position来显示不同的图片。\n\n7.避免使用table布局：table布局很容易导致重排，可以使用div+CSS布局代替。\n\n8.使用缓存技术：对于静态资源，可以使用浏览器缓存或CDN缓存来减少请求次数。\n\n9.使用CSS动画代替JavaScript动画：CSS动画可以避免频繁的JavaScript操作，减少重排和重绘的次数。\n\n总之，减少重排和重绘是优化网页性能的重要手段之一，需要在开发过程中注意避免频繁进行DOM操作和样式修改，以及采用一些优化技术来减少不必要的重排和重绘。\n\n## 30.循环中，判断条件，重复某值用if赋值比较好还是取余？\n\n这两种方法都可以实现让`index`在循环中到达7后重新从0开始。但是在实际开发中，推荐使用`index % 7`的方法，因为它比`if(index===7) index=0`的方法更简洁、更易读、更易扩展。\n\n使用取模运算符`%`可以将`index`的值限制在0~6的范围内，当`index`的值达到7时，`index % 7`的结果为0，从而实现了从头开始的效果。而使用`if(index===7) index=0`的方法则需要显式地判断`index`的值是否为7，代码量较大，不够简洁。\n\n此外，如果循环的次数需要变更为其他值，如10或者14，使用取模运算符也可以轻松实现，只需要将7改为相应的值即可。而使用`if`语句则需要手动修改判断条件和重新赋值的代码，不够易扩展。\n\n因此，使用取模运算符`%`可以使代码更简洁、易读和易扩展，是更好的选择。\n\n## 31.return num++与return ++num的区别\n\n### 31.1前后置++的区别\n\n不一样，而且`return`不会影响后续的+1。\n\n`return num++` 先返回num的值，然后再将num加1，相当于先返回原来的num值，再执行`num=num+1`。\n\n而 `return ++num` 先将num加1，再返回新的num的值，相当于先执行`num=num+1`，然后再返回新的num值。\n\n例如：\n\n```\nlet num = 1;\nconsole.log(return num++); // 输出1\nconsole.log(num); // 输出2\n\nnum = 1;\nconsole.log(return ++num); // 输出2\nconsole.log(num); // 输出2\n```\n\n因此，`return num++` 和 `return ++num` 的返回值是不同的，需要根据具体情况选择使用哪个。\n\n### 31.2 return 为什么不会影响\n\n`return` 依旧影响，但是后置++，返回的是没有+1的值；前置+1可以看成在`return`语言前已经+1了，所以返回了+1的值。\n\n是的，`return ++num` 先将 `num` 加 1，然后再返回新的 `num` 的值。相当于先执行 `num = num + 1`，然后再执行 `return num`。\n\n因此，可以理解为 `num = num + 1` 在 `return` 语句前面执行了。在执行 `return ++num` 语句时，`num` 的值已经被加 1 了，然后将加 1 后的 `num` 值作为返回值返回。\n\n例如：\n\n```\nfunction test() {\n  let num = 1;\n  return ++num;\n}\nconsole.log(test()); // 输出2\n```\n\n在这个例子中，`test` 函数返回 `2`，因为 `return ++num` 语句先将 `num` 加 1，然后再返回新的 `num` 值，即 `2`。\n\n因此，可以理解为 `num = num + 1` 在 `return` 语句前面执行了。\n\n## 33.函数中return的理解\n\n### 33.1如果没有返回值就返回undefined\n\n```\nfunction doSomething() {\n  // 这里不需要返回值\n}\nfunction doSomethingElse() {\n  return; // 返回 undefined\n}\nconsole.log(doSomething()); // 输出 undefined\nconsole.log(doSomethingElse()); // 输出 undefined\n```\n\n在这个例子中，`doSomething` 函数和 `doSomethingElse` 函数都没有明确使用 `return` 语句返回值，因此它们的返回值都是 `undefined`。在 JavaScript 中，如果函数没有明确使用 `return` 语句返回值，那么函数默认返回 `undefined`。\n\n## 34.' ' 与 “ ” 都是字符串，这两个有什么区别\n\n在 JavaScript 中，`''` 与 `\"\"` 都表示空字符串，它们没有本质区别。即使在字符串拼接、字符串截取、字符串比较等操作中，也没有区别。\n\n例如：\n\n```\nlet str1 = '';\nlet str2 = \"\";\nconsole.log(str1 === str2); // 输出 true\nconsole.log(str1 + str2); // 输出空字符串 ''\nconsole.log(str1.substring(0, 1)); // 输出空字符串 ''\nconsole.log(str1.length === str2.length); // 输出 true\n```\n\n在这个例子中，`str1` 和 `str2` 都表示空字符串，它们之间没有区别。我们可以使用 `===` 运算符比较它们的值，也可以进行字符串拼接、字符串截取、字符串比较等操作。\n\n需要注意的是，在编写 JavaScript 代码时，应该保持一致性，即要么使用单引号 `''`，要么使用双引号 `\"\"`，不要混用。这样可以使代码风格更加统一，易于阅读和维护。\n\n### 34.1为什么有两个呢？\n\n使用两种不同的引号来表示字符串，可以让程序员在字符串中使用另一种引号，而不必进行转义。例如：\n\n```\nlet str1 = \"It's a beautiful day.\";\nlet str2 = 'She said, \"Hello.\"';\n\n```\n\n在这个例子中，`str1` 使用了双引号，因此可以在字符串中使用单引号；`str2` 使用了单引号，因此可以在字符串中使用双引号。如果使用相同的引号来表示字符串，那么在字符串中使用相同的引号就需要进行转义，这会使代码变得难以阅读和维护。\n\n在实际编码中，我们可以根据具体情况选择使用单引号 `''` 或双引号 `\"\"` 来表示字符串，以便让代码更加易于编写和阅读。\n\n## 35.函数数据类型\n\n### 35.1 函数数据\n\n在 JavaScript 中，`function` 是一种数据类型，它可以表示一个函数。JavaScript 中的函数是一等公民，也就是说函数可以像其他类型的值一样被赋值、传递、返回和存储。\n\n例如，我们可以将一个函数赋值给一个变量，然后通过变量来调用这个函数：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nlet sum = add;\nconsole.log(sum(1, 2)); // 输出 3\n```\n\n在这个例子中，我们将 `add` 函数赋值给了 `sum` 变量，然后通过 `sum` 变量来调用这个函数。\n\n我们也可以将一个函数作为参数传递给另一个函数，然后在函数内部调用这个函数：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction calculate(operation, a, b) {\n  return operation(a, b);\n}\n\nconsole.log(calculate(add, 1, 2)); // 输出 3\nconsole.log(calculate(multiply, 3, 4)); // 输出 12\n```\n\n在这个例子中，我们定义了三个函数：`add`、`multiply` 和 `calculate`。`calculate` 函数接受一个函数作为参数 `operation`，然后在函数内部调用这个函数，并传递 `a` 和 `b` 作为参数。我们可以通过调用 `calculate` 函数并传递不同的函数来实现不同的计算。\n\n需要注意的是，在 JavaScript 中，函数本身也是一个对象，它可以拥有属性和方法。我们可以给函数添加属性，也可以给函数添加方法。例如：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nadd.name = 'addition';\nadd.description = 'This function adds two numbers.';\n\nconsole.log(add.name); // 输出 'addition'\nconsole.log(add.description); // 输出 'This function adds two numbers.'\n```\n\n在这个例子中，我们给 `add` 函数添加了两个属性：`name` 和 `description`。然后我们可以通过函数名来访问函数的属性，例如 `add.name` 和 `add.description`。需要注意的是，给函数添加属性或方法并不会影响函数的执行逻辑，它们只是函数对象的属性和方法，与函数的行为无关。\n\n另外，JavaScript 中的函数可以根据定义方式分为函数声明和函数表达式两种类型。函数声明是指使用 `function` 关键字来定义函数的方式，它们会被解析器提前到作用域的顶部，因此可以在函数声明之前调用。例如：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(1, 2)); // 输出 3\n```\n\n函数表达式是指将函数赋值给变量或属性的方式定义函数，它们不会被解析器提前到作用域的顶部，因此只能在定义后调用。例如：\n\n```\nlet add = function(a, b) {\n  return a + b;\n};\n\nconsole.log(add(1, 2)); // 输出 3\n```\n\n需要注意的是，在实际编程中，我们应该根据具体情况选择使用函数声明或函数表达式来定义函数，以便让代码更加清晰、易于阅读和维护。同时，我们也可以使用箭头函数来定义函数，它们是一种更加简洁、易于编写的函数定义方式，可以使代码更加简洁、易于理解。\n\n### 35.2 为什么没有单独把函数数据类型提出来\n\nJavaScript 中的数据类型包括原始类型和引用类型。原始类型包括数字（`number`）、字符串（`string`）、布尔值（`boolean`）、`null`、`undefined` 和 `Symbol`。引用类型包括对象（`object`）、数组（`array`）、函数（`function`）和日期（`date`）等。\n\n虽然 JavaScript 中的函数是一种数据类型，但是它与其他数据类型有些不同。函数可以执行代码并返回值，因此它们不仅仅是数据类型，还可以用于实现程序的功能。因此，在 JavaScript 中，函数是一等公民，它们可以像其他类型的值一样被赋值、传递、返回和存储。\n\n**由于函数是一等公民，因此在介绍 JavaScript 的数据类型时通常不会将函数列为独立的数据类型。**通常将函数视为一种可以执行代码并返回值的数据类型，它们可以与其他数据类型一起使用，为程序实现各种功能。\n\n需要注意的是，虽然函数不是原始类型，但是在 JavaScript 中，函数的值也可以作为变量、对象属性或数组元素存储和传递。因此，我们可以将函数视为一种可以存储和传递的数据类型，它们与其他数据类型一起构成了 JavaScript 中的数据类型系统。\n\n## 36.Object.prototype.toString.call()是是什么，怎么用\n\n`Object.prototype.toString.call()` 是一个用于获取变量的类型信息的方法。它可以返回一个表示变量类型的字符串，例如 `[object Object]` 表示一个对象类型，`[object Array]` 表示一个数组类型，`[object String]` 表示一个字符串类型，等等。\n\n它的常见用途是用于判断一个变量的类型，尤其是在处理不同类型的数据时。例如，我们可以使用 `Object.prototype.toString.call()` 来判断一个变量是否为数组类型：\n\n```\nlet arr = [1, 2, 3];\nconsole.log(Object.prototype.toString.call(arr)); // 输出 '[object Array]'\n```\n\n在这个例子中，我们使用 `Object.prototype.toString.call()` 方法来获取 `arr` 变量的类型信息，它返回了一个字符串 `'[object Array]'`，表示 `arr` 是一个数组类型。\n\n需要注意的是，直接使用 `typeof` 运算符来判断一个变量的类型并不总是可靠的，因为它只能判断出原始类型和函数类型，无法判断其他类型（例如对象类型和数组类型）。因此，在实际编程中，我们通常会结合 `Object.prototype.toString.call()` 方法来判断一个变量的类型，以便使代码更加健壮、可靠。\n\n下面是一个使用 `Object.prototype.toString.call()` 方法来判断变量类型的示例：\n\n```\nfunction getType(variable) {\n  return Object.prototype.toString.call(variable);\n}\n\nconsole.log(getType(123)); // 输出 '[object Number]'\nconsole.log(getType('abc')); // 输出 '[object String]'\nconsole.log(getType(true)); // 输出 '[object Boolean]'\nconsole.log(getType(null)); // 输出 '[object Null]'\nconsole.log(getType(undefined)); // 输出 '[object Undefined]'\nconsole.log(getType({})); // 输出 '[object Object]'\nconsole.log(getType([])); // 输出 '[object Array]'\nconsole.log(getType(function() {})); // 输出 '[object Function]'\n```\n\n在这个示例中，我们定义了一个名为 `getType` 的函数，它接受一个参数 `variable`，并返回 `Object.prototype.toString.call(variable)` 的结果，即变量的类型信息。通过调用 `getType` 函数，我们可以获取不同类型变量的类型信息，并进行相应的处理。例如，我们可以编写一个函数来打印不同类型的变量：\n\n```\nfunction printType(variable) {\n  let type = getType(variable);\n\n  switch (type) {\n    case '[object Number]':\n      console.log('This is a number.');\n      break;\n    case '[object String]':\n      console.log('This is a string.');\n      break;\n    case '[object Boolean]':\n      console.log('This is a boolean.');\n      break;\n    case '[object Null]':\n      console.log('This is a null.');\n      break;\n    case '[object Undefined]':\n      console.log('This is an undefined.');\n      break;\n    case '[object Object]':\n      console.log('This is an object.');\n      break;\n    case '[object Array]':\n      console.log('This is an array.');\n      break;\n    case '[object Function]':\n      console.log('This is a function.');\n      break;\n    default:\n      console.log('This is an unknown type.');\n  }\n}\n\nprintType(123); // 输出 'This is a number.'\nprintType('abc'); // 输出 'This is a string.'\nprintType(true); // 输出 'This is a boolean.'\nprintType(null); // 输出 'This is a null.'\nprintType(undefined); // 输出 'This is an undefined.'\nprintType({}); // 输出 'This is an object.'\nprintType([]); // 输出 'This is an array.'\nprintType(function() {}); // 输出 'This is a function.'\nprintType(new Date()); // 输出 'This is an unknown type.'\n```\n\n在这个示例中，我们定义了一个名为 `printType` 的函数，它接受一个参数 `variable`，并根据变量的类型信息打印相应的信息。通过调用 `getType` 函数获取变量的类型信息，然后使用 `switch` 语句根据类型信息进行不同的处理。\n\n需要注意的是，在使用 `Object.prototype.toString.call()` 方法时，我们需要使用 `call()` 方法来明确指定调用对象，即 `Object.prototype`。这是因为 `toString()` 方法可以被所有 JavaScript 对象继承，但是不同对象的 `toString()` 方法可能会返回不同的值，因此我们需要使用 `call()` 方法来确保获取的是 `Object.prototype` 对象的 `toString()` 方法返回的值。\n\n下面是一个错误的示例，它没有使用 `call()` 方法，导致获取的类型信息不正确：\n\n```\nlet arr = [1, 2, 3];\nconsole.log(Object.prototype.toString(arr)); // 输出 '[object Object]'\n```\n\n在这个示例中，我们没有使用 `call()` 方法，而是直接调用 `Object.prototype.toString(arr)` 方法来获取 `arr` 的类型信息。由于 `toString()` 方法可以被所有对象继承，因此这里调用的是 `arr` 对象的 `toString()` 方法，它返回了 `'[object Object]'`，而不是 `'[object Array]'`。\n\n因此，在使用 `Object.prototype.toString.call()` 方法时，我们需要明确指定调用对象，并传递要获取类型信息的变量作为参数：\n\n```\nlet arr = [1, 2, 3];\nconsole.log(Object.prototype.toString.call(arr)); // 输出 '[object Array]'\n```\n\n在这个示例中，我们使用 `call()` 方法来明确指定调用对象为 `Object.prototype`，并传递 `arr` 变量作为参数，确保获取到的是 `arr` 变量的类型信息。\n\n## 37.浏览器控制台\n\nconst obj = {name:'zs',age:{year:18}} undefined 为什么浏览器上控制台会返回一个undefined ？\n\n 在控制台中输入代码时，控制台会返回最后一个表达式的结果。在你的代码中，执行了一条赋值语句 `const obj = {name:'zs',age:{year:18}}`，这条语句并不会返回任何值，所以控制台返回了 `undefined`。\n\n如果你想在控制台中查看这个对象，可以在代码后面添加 `console.log(obj)` 或者直接输入 `obj`，这样控制台就会输出这个对象了。例如：\n\n```\nconst obj = {name:'zs',age:{year:18}};\nconsole.log(obj); // 输出 {name: \"zs\", age: {year: 18}}\n```\n\n或者直接在控制台中输入 `obj`，按回车键，控制台也会输出这个对象。\n\n因此，控制台返回 `undefined` 并不代表代码出现了错误，只是最后一个表达式并没有返回任何值。\n\n## 38.boostrap间距的设置\n\nBootstrap提供了一些CSS类来改变元素的间距、行高、文字大小和边距等样式，这些类可以通过在HTML标签中添加class属性来使用。下面是一些常用的类和其作用：\n\n1. 间距（Spacing）：用于控制元素之间的间距。\n\n   - `.m-*`：设置元素的外边距（Margin），*可以为以下值：0-5，auto。\n   - `.p-*`：设置元素的内边距（Padding），*可以为以下值：0-5。\n   - `.mx-*`：设置元素的左右外边距（Margin）。\n   - `.my-*`：设置元素的上下外边距（Margin）。\n   - `.px-*`：设置元素的左右内边距（Padding）。\n   - `.py-*`：设置元素的上下内边距（Padding）。\n\n2. 行高（Line Height）：用于控制文本行与行之间的距离。\n\n   - `.lh-*`：设置元素的行高（Line Height），*可以为以下值：1-5。\n\n3. 文字大小（Text Size）：用于控制文本的大小。\n\n   - `.text-*`：设置元素的文本大小，*可以为以下值：sm（小号）、lg（大号）、*（默认大小）。\n\n4. 边距（Margin）：用于控制元素与其他元素之间的距离。\n\n   - `.mt-*`：设置元素的上外边距（Margin Top），*可以为以下值：0-5。\n\n   - `.mb-*`：设置元素的下外边距（Margin Bottom），*可以为以下值：0-5。\n\n   - `.ml-*`：设置元素的左外边距（Margin Left），*可以为以下值：0-5。\n\n   - `.mr-*`：设置元素的右外边距（Margin Right），*可以为以下值：0-5。\n\n   - `.m-*`：设置元素的外边距（Margin），*可以为以下值：0-5，auto。 - `.mt-*`、`.mb-*`、`.ml-*`、`.mr-*`：也可以使用 `.m-*` 替代，例如 `.m-3` 相当于 `.mt-3 mb-3 ml-3 mr-3`。\n\n     下面是一个示例代码，展示如何使用这些类来改变元素的样式：\n\n     ```\n     <div class=\"container\">\n       <div class=\"row\">\n         <div class=\"col-md-6\">\n           <h1 class=\"text-primary text-center mt-5\">标题</h1>\n           <p class=\"lead text-muted mx-3 my-4\">这是一段引导性文字。</p>\n           <ul class=\"list-group list-group-flush px-4\">\n             <li class=\"list-group-item\">列表项1</li>\n             <li class=\"list-group-item\">列表项2</li>\n             <li class=\"list-group-item\">列表项3</li>\n           </ul>\n         </div>\n       </div>\n     </div>\n     ```\n\n     在这个代码中，我们使用了 `.mt-5`、`.mx-3`、`.my-4`、`.px-4`、`.list-group-flush` 等类来改变元素的样式。`.mt-5` 用于设置标题的上外边距为5个间距单元，`.mx-3` 和 `.my-4` 用于设置引导性文字的左右外边距和上下外边距，`.px-4` 用于设置列表的左右内边距，`.list-group-flush` 用于去除列表的边框和圆角。这些类的使用可以让我们更加方便地控制元素的样式，从而使网页设计更加美观。\n\n## 39.函数的传递\n\nJavaScript 函数是一等公民，可以作为变量、参数或返回值在其他函数中传递，因此函数的传递成为了 JavaScript 中的常见操作。\n\n在 JavaScript 中，函数传递主要有以下几种方式：\n\n1. 作为函数参数传递\n2. 作为函数返回值传递\n3. 作为对象属性传递\n\n接下来，让我们分别来详解这些方式。\n\n### 作为函数参数传递\n\n在 JavaScript 中，可以将一个函数作为另一个函数的参数，从而实现进一步的功能。这种方式可以让代码更加抽象、模块化和可复用。\n\n比如下面的代码：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction square(c) {\n  return c * c;\n}\n\nfunction compose(fn1, fn2) {\n  return function(x) {\n    return fn2(fn1(x));\n  }\n}\n\nvar addAndSquare = compose(add, square);\n\nconsole.log(addAndSquare(2, 3)); // 25\n```\n\n在上面的代码中，我们定义了三个函数，其中 `add` 和 `square` 分别是两个单独的函数，而 `compose` 函数用于将两个函数连接起来，并返回一个新的函数 `addAndSquare`。在调用 `addAndSquare` 函数时，它会先执行 `add` 函数，然后将结果再传递给 `square` 函数。最终得到的结果是 25。\n\n可以看到，将函数作为参数传递，可以方便地实现代码模块化和抽象，提高代码的可读性和可维护性。\n\n### 作为函数返回值传递\n\n除了作为参数传递外，在 JavaScript 中，函数还可以作为返回值进行传递。这种方式通常可以用于实现柯里化（currying）和函数式编程的一些高级特性。\n\n比如下面的代码：\n\n```\nfunction add(a) {\n  return function(b) {\n    return a + b;\n  }\n}\n\nvar add5 = add(5);\n\nconsole.log(add5(3)); // 8\nconsole.log(add5(6)); // 11\n```\n\n在上面的代码中，我们定义了一个 `add` 函数，它的作用是将一个数加上另一个数。注意到 `add` 函数返回了一个匿名函数，这个匿名函数在调用时可以继续接收参数，并返回结果。\n\n通过调用 `add(5)` 这个函数，我们得到了一个新的函数 `add5`，它的作用是将一个数加上 5。这样，无论我们传入什么参数，`add5` 都会将其加上 5，并返回结果。\n\n可以看到，这种函数返回函数的方式，使我们能够更加灵活地组合和复用函数，提高了代码的可扩展性和可复用性。\n\n### 作为对象属性传递\n\n另外，函数也可以作为对象属性进行传递，这种方式在事件绑定和回调函数中比较常见，可以方便地将某个对象的方法传递到其他函数中去。\n\n比如下面的代码：\n\n```\nvar obj = {\n  name: 'Jack',\n  sayHello: function() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n};\n\nsetTimeout(obj.sayHello.bind(obj), 1000); // 1秒后输出 \"Hello, my name is Jack\"\n```\n\n在上面的代码中，我们定义了一个对象 `obj`，它包含了一个姓名属性和一个 `sayHello` 方法。在调用 `setTimeout` 函数时，我们将 `obj.sayHello` 方法作为参数传入，并在需要时通过 `bind` 方法绑定执行上下文（也就是 `this` 关键字）。\n\n在 1 秒后，`sayHello` 方法将被调用，并输出 \"Hello, my name is Jack\"。\n\n可以看到，将函数作为对象属性传递，可以方便地在不同的上下文中传递并执行函数，提高代码的复用性和灵活性。\n\n总结\n\n以上是 JavaScript 中函数传递的几种方式，它们为前端开发提供了更多的编程思路和技能，可以帮助我们编写更加优雅和高效的代码。\n\n","source":"_posts/first.md","raw":"---\ntitle: 技术总结V1.0\ndate: 2023-04-13 19:32:17\ntags:\n---\n# 技术总结v1.0\n\n## 1. 面向对象与面向过程的区别\n\n​ **面向过程**：是将事件分成步骤，按部就班一步一步完成的。\n\n​ **面向对象** ：将事件分成一个又一个对象，每个对象有自己的属性及方法。是各个对象之间的方法交互。\n\n## 2. flex布局与grid布局的区别\n\n​ grid布局讲容器分成行与块，远比flex布局强。\n\n参考链接\n\n\n## 3.Sass与Less的区别？用哪个好？\n\n​ Sass 的主版本现在已经改用 Dart 实现了，Ruby 的版本一年前就不再维护了。Sass 和 Less 的使用并没有明显的「复杂」和「简单」的区别，常用部分大同小异。Less 运行在浏览器端只是方便初学者上手，生产环境是绝对不会这么做的，都是随着前端项目一起构建，构建完之后的都是静态资源，不涉及服务端什么事。两者都有线上的 REPL，所以简单的演示代码不用担心用不了 Sass。Sass 以 $ 打头比较不容易和 CSS 标准语法冲突，Less 的语法跟 CSS 标准太像了，有时候会难以区分（Stylus 更糟糕）。Sass 和 Less 的变量机制有很大的不同，Sass 是类似 JS 的块级作用域一样，可以在作用域内重新赋值而不影响外部，Less 是以全局的最后一次赋值为准，这也是为什么大部分 UI 组件库都选择 Less。Compass 这个东西……已经没什么人在用的了，只存在于教材上的东西，忘了它吧。SASS 和 SCSS 只是两种语法风格而已，**推荐使用 SCSS** ，但 SASS 也没有不再支持，放到现在来看，跟版本没关系。Sass 的模块机制现在大改了，建议跟进下。不论国内外市场如何，Less 和 Sass 最常用的部分并没有明显的区别，不用太在意该用哪个，Just pick one。我个人比较偏好 Sass，生态更好（踩过 Stylus 的坑，深刻的教训），至于公司用哪个，跟着用就行，不出大问题不用考虑换。\n\n## 4.sass使用过程中的问题\n\n### Easy Sass插件没有生成.css文件问题\n\n- 检查是否安装好\n\n```\nsass -v //检查是否安装好sass\ncompass -v\n```\n\n- **路径保存问题**，settings.json中保存路径应该为`css/`这样才能在上一级文件夹（当前在sass文件夹内）的`css`文件夹生成对应`.css`文件。<b>ps</b>:需要自己新建`css`文件夹，不然会报错。\n- settings.json配置\n\n```\n\"easysass.compileAfterSave\": true,\n\"easysass.formats\": [ \n        //nested：嵌套缩进的 css 代码。\n        //expanded：没有缩进的、扩展的css代码。\n        //compact：简洁格式的 css 代码。\n        //compressed：压缩后的 css 代码\n\n        {\n            \"format\": \"expanded\",\n            \"extension\": \".css\" //设置编译输出的文件名\n    ],\n      //这会回到根目录的css文件夹内创建同名.css文件\n    \"easysass.targetDir\": \"css/\" //提供 css 输出路径的设置.\n  \n```\n\n- 需要自己提前在**根目录创建好css文件夹**否则会报错。\n\n## 5.写css的命名规范--BEM\n\n- 命名规范\n\n```\n\n```\n\n参考连接[css命名规范--知乎](<https://zhuanlan.zhihu.com/p/122214519>)\n\n## 6.tree生成目录的使用\n\n- 在在Tree for Winodws页面，下载二进制文件Binaries zip\n- 解压压缩包，找到压缩包内的 bin 目录，将 bin 目录下的 tree.exe 复制到git文件夹Git\\usr\\bin 目录下，将 tree.exe 粘贴到该目录下，安装完成，即可使用。\n- git bash\n\n```\ntree -L 1 >tree.txt\n```\n\n### tree命令行参数\n\n-a 显示所有文件和目录。<br>\n-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。<br>\n-C 在文件和目录清单加上色彩，便于区分各种类型。<br>\n-d 显示目录名称而非内容。<br>\n-D 列出文件或目录的更改时间。<br>\n-f 在每个文件或目录之前，显示完整的相对路径名称。<br>\n-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上\"*\",\"/\",\"=\",\"@\",\"|“号。<br>\n-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。<br>\n-i 不以阶梯状列出文件或目录名称。<br>\n-I 不显示符合范本样式的文件或目录名称。<br>\n-n 不在文件和目录清单加上色彩。<br>\n-N 直接列出文件和目录名称，包括控制字符。<br>\n-p 列出权限标示。<br>\n-P 只显示符合范本样式的文件或目录名称。<br>\n-q 用”?\"号取代控制字符，列出文件和目录名称。<br>\n-s 列出文件或目录大小。<br>\n-t 用文件和目录的更改时间排序。<br>\n-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。<br>\n-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n\n## 7.this的指向\n\n- **方法中**，`this`指向方法所在的对象。\n- 单独使用`this`指向`window`。\n- 函数中`this`为函数的所有者。如果在浏览器中就是`window`。\n<br>函数默认指向最高的`window`。\n<br><b>构造函数是obj对象</b>，所以`this`会指向该构造函数（obj）。\n- **事件中**的`this`指向接收事件的HTML元素。因为**HTML元素是对象**。???\n  \n## 8.for in 与for of的区别\n\n- `for in`其中的参数保存的是**键名**，而`for of`其中的参数保存的是**键值**。\n\n## 9.逻辑中断\n\n- 某些场景用来替代if-else操作，默认值\n- `&`中断，左边false中断\n\n```\nlet a = false && 5 //false\nlet a = true && 5 // 5\n```\n\n- `||`中断，左边true中断\n\n```\nlet a = true || 5 // true\nlet a = false || 5 // 5\n```\n\n## 10.原型与原型链与原型对象\n\n<https://juejin.cn/post/6984678359275929637#comment>这篇文章写的十分透彻\n\n### 10.1构造函数创建实例对象过程？\n\n  1、创建新对象\n  <br>2、将构造函数作用域赋值给新对象（this指向新对象）\n  <br>3、执行构造函数中的代码，给实例对象添加实例属性和实例方法。\n\n  ```\n  // 构造函数\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\n// 生成实例\nconst p = new Person('zhangsan', 18);\n  ```\n\n### 10.2原型对象\n\n  `函数`在创建时会生成一个`prototype`属性，该属性`指向一个对象`，这个对象就是`原型对象`\n![](/images/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp)\n\n### 10.3原型链\n\n- 通过`构造函数`创建出的`实例对象`有个`_proto_`属性，该属性指向`实例对象的构造函数的原型对象`\n![](/images/%E5%AE%9E%E4%BE%8B%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp)\n其实就是`实例的_proto_`指向`原型对象`,同时`构造函数的prototype`也指向`原型对象`。\n- **原型链**就是访问对象属性时，查找对象有没有查找的对象，没有就找`_proto_的原型对象（构造函数的prototype）`，还是没有就找`原型对象的_proto_查找`，因此形成原型链。\n- 原型链的尽头是`null`\n\n### 10.4在构造函数原型对象修改属性\n\n- 要让所有实例共享构造函数属性，添加或删改内在的属性或方法，应该在`构造函数的prototype（原型对象）`去更改。\n- 在实例对象修改`_proto_`会影响**所有共享构造函数**的实例对象。\n\n### 10.5GPT的说法\n\n在 JavaScript 中，每个对象都有一个原型对象（prototype），它定义了该对象的属性和方法。当访问一个对象的属性或方法时，如果该对象本身没有定义该属性或方法，则会沿着原型链向上查找，直到找到该属性或方法为止。\n\n原型链是由一系列原型对象组成的链式结构，它描述了对象之间的继承关系。每个对象都有一个原型对象，如果对象 A 的原型对象是对象 B，那么对象 A 就可以继承对象 B 中定义的属性和方法。\n\n原型对象可以通过函数的 `prototype` 属性进行访问和修改。例如，可以定义一个构造函数 `Person`，并在其原型对象上添加一个方法 `sayHello()`：\n\n```\nfunction Person(name) {\n  this.name = name\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}`)\n}\n\nlet person = new Person('John')\nperson.sayHello() // 输出：Hello, my name is John\n```\n\n在这个例子中，`Person` 函数定义了一个 `name` 属性，并在其原型对象上添加了一个 `sayHello()` 方法。当创建一个 `Person` 对象时，可以通过 `new` 运算符调用 `Person` 函数，并返回一个新的对象。这个新对象的原型对象指向 `Person.prototype`，因此可以访问 `sayHello()` 方法。\n\n需要注意的是，原型对象是在对象创建时动态生成的，因此可以在运行时动态地修改原型对象。同时，原型对象是基于引用的，即多个对象可以共享同一个原型对象。这种机制不仅可以提高代码的复用性，还能够实现面向对象编程中的继承和多态等特性。\n\n### 10.6为什么有原型链？\n\nJavaScript 之所以有原型链，是因为其是一种基于**原型继承**的面向对象编程语言。在 JavaScript 中，`每个对象都有一个指向其原型的内部链接`，这个链接被称为原型链。\n\n当我们访问一个对象的属性或方法时，如果当前对象没有这个属性或方法，JavaScript 引擎就会去该对象的原型对象中查找是否有这个属性或方法。如果原型对象中也没有这个属性或方法，那么就会继续在原型对象的原型对象中查找，直到找到 Object.prototype 对象为止，如果还没有找到，则返回 undefined。\n\n这样的设计可以让对象之间实现继承，从而使得代码更加简洁、灵活和可重用。通过在原型对象中定义方法和属性，我们可以让所有基于该原型的对象都共享这些方法和属性，从而避免在每个对象中都定义一遍，提高了代码的复用性和效率。\n\n因此，原型链是 JavaScript 面向对象编程的一个重要特性，也是理解 JavaScript 中对象和继承机制的关键。\n\n### 10.7浏览器的[[prototype]]是什么\n\n在JavaScript中，每个对象都有一个原型对象（即_proto_属性），它决定了对象的属性和方法。同时，每个构造函数也有一个原型对象（即prototype属性），它是通过new操作符创建的实例的原型对象。\n\n在浏览器中，对象的_proto_属性通常被称为对象的“隐式原型”（implicit prototype），它指向该对象的原型对象。而该对象的原型对象通常被称为对象的“显示原型”（explicit prototype），它是一个对象，它包含了该对象的属性和方法。\n\n具体来说，浏览器中的对象的[[prototype]]属性（即_proto_属性）指向该对象的原型对象，它是一个内部属性，通常无法直接访问。而该对象的原型对象通常是通过构造函数的prototype属性设置的，从而让该对象可以访问到构造函数中定义的属性和方法。\n\n例如，以下代码演示了在浏览器中创建对象时的[[prototype]]属性和prototype属性的关系：\n\n```\n// 定义一个构造函数\nfunction Person(name) {\n  this.name = name;\n}\n\n// 在构造函数的原型对象中定义一个方法\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}`);\n}\n\n// 创建一个Person对象\nconst person = new Person('Tom');\n\n// 输出person对象的[[prototype]]属性\nconsole.log(person.__proto__); // 输出：Person {sayHello: ƒ, constructor: ƒ}\n\n// 输出person对象的构造函数\nconsole.log(person.constructor); // 输出：ƒ Person(name) {this.name = name;}\n\n// 调用person对象的方法\nperson.sayHello(); // 输出：Hello, my name is Tom\n```\n\n在这个例子中，我们定义了一个构造函数Person，然后在它的原型对象中定义了一个方法sayHello。接着，我们使用new操作符创建了一个Person对象，并输出了它的[[prototype]]属性和constructor属性。可以看到，person对象的[[prototype]]属性指向了Person构造\n\n## 11.自增的数据类型转换\n\n```js\nvar a1 = \"2\";\nvar a2 =\"w\";\nvar b1 = false;\nvar bin = 1.1;\nvar o ={\n valueOf:function(){\n  return -1;\n }\n};\na1++;\na2++;\nb1++;\nbin--;\no--;\nconsole.log(a1);  //3\nconsole.log(a2);  //NaN\nconsole.log(b1);  //0.10000000000000009\nconsole.log(bin);  //1.1\nconsole.log(o);   //-2\n\n```\n\n## 12.闭包的理解\n\n闭包是指在函数内部定义的函数可以访问函数外部的变量，即使在函数外部这些变量已经不可访问。闭包通常由一个函数和在该函数内部定义的另一个函数组成，在内部函数中可以访问外部函数的变量和参数，即使在外部函数执行完毕后，这些变量和参数仍然可以被内部函数访问。\n\n闭包的概念可能比较抽象，以下是一个例子来帮助理解：\n\n```\nfunction outer() {\n  let count = 0\n  function inner() {\n    count++\n    console.log(count)\n  }\n  return inner\n}\n\nlet fn = outer()\nfn() // 1\nfn() // 2\nfn() // 3\n```\n\n在这个例子中，函数 `outer` 内部定义了一个变量 `count` 和一个函数 `inner`，`inner` 函数可以访问 `outer` 函数中的变量 `count`。`outer` 函数最终返回 `inner` 函数，并将其赋值给变量 `fn`。\n\n当执行 `fn()` 的时候，实际上是在执行 `inner()` 函数，因此每次执行 `fn()` 都会输出 `count` 变量的值，并将其自增。由于 `count` 变量是在 `outer` 函数中定义的，因此在 `inner` 函数中也可以访问和修改 `count` 变量的值，即使 `outer` 函数已经执行完毕。\n\n这个例子就展示了一个闭包的具体实现：内部函数 `inner` 可以访问外部函数 `outer` 中的变量 `count`，即使 `outer` 函数执行完毕后这个变量仍然可以被访问和修改。闭包可以用于实现一些高级的 JavaScript 技术，例如柯里化、函数式编程、模块化等。\n\n## 13.函数式编程\n\n函数式编程是一种编程范式，它是一种程序设计的风格，强调函数的使用来构建软件应用程序。它是一种声明式编程，而不是命令式编程。在函数式编程中，程序由许多小的、可组合的函数组成，每个函数都有一个明确定义的输入和输出，不会修改函数外的状态。函数式编程的目标是编写简单、可读、可维护和可扩展的代码。\n\n函数式编程的一些特征包括：\n\n- 纯函数：函数的输出仅取决于输入，而不依赖于任何外部状态或副作用。\n- 不可变性：数据不可被修改，一旦创建就不能再改变，因此任何对数据的修改都会创建一个新的数据对象。\n- 高阶函数：函数可以作为参数传递给其他函数，也可以返回其他函数。\n- 延迟执行：表达式的求值被延迟到需要使用它的时候。\n- 函数组合：将函数组合起来构建更复杂的函数。\n\n函数式编程有许多优点，例如代码简洁、可读性高、易于测试、可维护性强、并发性好等。它在处理大规模数据、并发编程和分布式系统方面具有巨大的优势。在 JavaScript 中，函数式编程的特征可以通过使用高阶函数和内置的 `Array` 方法如 `map()`、`filter()`、`reduce()` 等来实现。\n\n## 14.开源项目怎么学习\n\n学习开源项目需要一定的技能和经验，以下是一些建议：\n\n1. 了解项目：在探索一个新的开源项目之前，应该先了解项目的背景、目的和技术栈等信息。这可以通过项目的文档、代码库、社区和邮件列表等渠道来获取。\n2. 安装和运行代码：安装和运行代码是了解项目的一个重要部分。这可以通过阅读项目的文档和代码库来完成。如果遇到问题，可以查看项目的社区和邮件列表，也可以尝试在开发者社区中提问。\n3. 阅读代码：阅读代码是了解项目的另一个重要部分。可以通过阅读项目的代码库来了解代码的结构、功能和实现细节。此外，还可以使用调试工具来了解代码的执行过程。\n4. 参与社区：参与社区是学习开源项目的另一个重要部分。可以通过参加社区讨论、提供反馈和贡献代码等方式来参与项目。这可以帮助学习项目，并建立联系和信任。\n5. 贡献代码：贡献代码是学习开源项目的最终目标之一。可以通过提供修复错误、新增功能、重构代码等方式来贡献代码。这可以帮助学习项目的实现和贡献开源社区。\n\n总之，学习开源项目需要花费一定的时间和精力。一旦掌握了这些技巧和经验，就可以更轻松地了解和贡献开源项目。\n\n### 源代码的阅读\n\n阅读源代码可以帮助深入了解项目的实现细节和结构，以下是一些阅读源代码的建议：\n\n1. 了解项目结构：在阅读代码之前，应该先了解项目的目录结构和文件组织方式。这可以帮助理解代码中各个模块和组件之间的关系和依赖关系。\n2. 阅读文档：阅读项目的文档可以帮助了解项目的功能、设计和代码结构。这可以帮助理解代码的目的和实现细节，减少阅读代码的时间和难度。\n3. 阅读代码注释：阅读代码注释可以帮助理解代码的实现细节和目的。注释应该提供有关代码结构、函数用途、变量定义等方面的信息。\n4. 使用调试工具：使用调试工具可以帮助了解代码的执行过程和调用关系。可以使用调试器、日志和断点来追踪代码的执行路径和状态变化。\n5. 运行示例代码：运行示例代码可以帮助理解代码的实现和功能。可以尝试运行和调试示例代码，并尝试修改代码和观察结果。\n6. 尝试重构代码：尝试重构代码可以帮助理解代码的结构和逻辑。可以尝试删除冗余代码、合并函数或变量、提取公共代码块等操作，以改善代码的可读性和维护性。\n\n总之，在阅读源代码时，应该有一个系统性的方法来了解项目的结构和实现细节。可以阅读文档和代码注释，使用调试工具和运行示例代码，并尝试重构代码以提高代码的可读性和维护性。\n\n## 15. 魔术字符串\n\n魔术字符串是指在代码中多次出现的、与代码实现相关的、没有被封装成常量或变量的字符串。这些字符串通常被直接硬编码在代码中，而没有使用变量或常量的形式来表示。\n\n魔术字符串有以下几个问题：\n\n1. 可读性差：魔术字符串通常没有描述性的名称，使用它们的代码难以理解和阅读。\n2. 维护性差：魔术字符串存在于代码的多个地方，如果需要修改它们，就需要在多个地方进行修改，增加了代码的维护成本。\n3. 可重用性差：魔术字符串通常不能被重用，如果需要在代码的不同地方使用相同的字符串，就需要重复硬编码这些字符串，增加了代码的冗余。\n\n为了解决这些问题，可以将魔术字符串封装成常量或变量。这样可以提高代码的可读性、维护性和可重用性。\n\n例如，下面的代码中使用了魔术字符串：\n\n```\nfunction getUserRole(user) {\n  if (user.role === 'admin') {\n    return 'admin';\n  } else if (user.role === 'manager') {\n    return 'manager';\n  } else {\n    return 'guest';\n  }\n}\n```\n\n可以将魔术字符串封装成常量形式，例如：\n\n```\nconst ROLE_ADMIN = 'admin';\nconst ROLE_MANAGER = 'manager';\nconst ROLE_GUEST = 'guest';\n\nfunction getUserRole(user) {\n  if (user.role === ROLE_ADMIN) {\n    return ROLE_ADMIN;\n  } else if (user.role === ROLE_MANAGER) {\n    return ROLE_MANAGER;\n  } else {\n    return ROLE_GUEST;\n  }\n}\n```\n\n这样可以提高代码的可读性、维护性和可重用性，减少代码中的冗余和错误。\n\n## 16. 对象的计算属性\n\n### 16.1 计算属性\n\n在 JavaScript 中，对象的属性名可以是字符串或 Symbol 类型。在这个例子中，`val.name` 是一个字符串类型，而我们需要将它作为属性名添加到对象中。因为对象属性名需要满足标识符的命名规则，所以我们需要将 `val.name` 包含在方括号中，将它作为属性名添加到对象中。这种方式被称为计算属性名，它可以让我们在对象字面量中使用表达式作为属性名。\n\n例如，如果我们想要使用一个变量作为属性名，就可以使用计算属性名：\n\n```\nconst propName = 'name';\nconst person = {\n  [propName]: 'Alice'\n};\nconsole.log(person); // { name: 'Alice' }\n```\n\n在这个例子中，`[propName]` 就是一个计算属性名，它会将 `propName` 的值作为属性名添加到对象中。\n\n在我们的代码中，`{[val.name]: val.age}` 就是一个计算属性名，它会将 `val.name` 的值作为属性名添加到对象中，同时将 `val.age` 的值作为属性值添加到对象中。\n\n### 16.2对象的键值类型\n\n在 JavaScript 中，对象的键值可以是字符串类型或符号类型。\n\n通常，我们使用字符串作为对象的键值，例如：\n\n```\nconst obj = {\n  name: 'John',\n  age: 30,\n  'last name': 'Doe'\n};\n```\n\n在上面的代码中，对象 `obj` 中的键值分别是 `name`、`age` 和 `last name`，它们都是字符串类型。\n\n然而，在ES6引入符号类型（Symbol）之后，我们也可以使用符号作为对象的键值，例如：\n\n```\nconst mySymbol = Symbol('mySymbol');\nconst obj = {\n  [mySymbol]: 'Hello World'\n};\n```\n\n在上面的代码中，我们创建了一个符号 `mySymbol`，然后将其作为对象 `obj` 的键值，键名用方括号括起来。符号类型的键值在一些特定场景中很有用，例如在定义私有属性或者避免键名冲突时。需要注意的是，符号类型的键值是唯一的，它们不会与其他键名冲突。\n\n### 16.3变量名作为键名\n\n可以，JavaScript 中对象的键名可以使用变量来动态生成。\n\n例如，可以使用变量作为对象的键名，如下所示：\n\n```\nconst key = 'name';\nconst obj = {\n  [key]: 'John'\n};\n\nconsole.log(obj.name); // 输出 \"John\"\n```\n\n在上面的代码中，我们使用变量 `key` 来定义对象 `obj` 中的键名，这个键名是动态生成的。使用方括号语法，将变量 `key` 包裹在其中，就可以将其解析为一个字符串，作为对象的键名。\n\n需要注意的是，由于 JavaScript 对象的键名只能是字符串类型或符号类型，因此变量 `key` 中存储的值必须是字符串类型或符号类型，否则会导致语法错误。\n\n## 17. Object.defineProperty\n\nObject.defineProperty是一个内建对象函数，它用于给对象定义属性。它允许你定义一个对象的新属性或修改对象的已有属性，并且可以控制一些属性的行为，例如可写、可枚举和可配置等。\n\nObject.defineProperty的语法如下：\n\n```\nObject.defineProperty(obj, prop, descriptor)\n```\n\n其中：\n\n- obj：要定义属性的对象。\n- prop：需要定义或修改的属性的名称。\n- descriptor：一个对象，用来描述这个属性的特性。\n\ndescriptor参数可以包含以下属性：\n\n- value：属性的值，默认为undefined。\n- writable：布尔值，表示属性是否可写。默认false。\n- enumerable：布尔值，表示属性是否可枚举。默认false。\n- configurable：布尔值，表示可配置性。默认false。\n- get：取值函数，当访问该属性时，会调用此函数。默认为undefined。\n- set：赋值函数，当属性值改变时，会调用此函数。默认为undefined。\n\n举例如下：\n\n```\nlet obj = {};\n\n// 添加普通属性\nobj.a = 123;\n\n// 定义属性方式一\nObject.defineProperty(obj, 'b', {\n  value: 456,\n  writable: true,\n  enumerable: true,\n  configurable: true\n});\n\n// 定义属性方式二\nlet c = 789;\nObject.defineProperty(obj, 'c', {\n  get() {\n    return c;\n  },\n  set(newValue) {\n    console.log(`New value of c is: ${newValue}`)\n    c = newValue;\n  },\n  enumerable: true,\n  configurable: true\n});\n```\n\n以上代码将obj对象添加了三个属性，其中b和c使用了Object.defineProperty进行定义，b是一个普通的数据属性，而c具有getter和setter方法，在读取和修改c属性时会触发这两个方法，并输出日志。\n\n需要注意的是，使用Object.defineProperty定义的属性有些限制：\n\n1. __proto__属性不能被定义，必须使用Object.getPrototypeOf()方法访问。\n2. 可以使用Object.getOwnPropertyDescriptors()方法获取到一个属性的完整描述符，并复制到新对象中。\n3. 可以在同一对象上定义多个同名属性。会覆盖之前定义的。\n4. 原型上的属性在遍历时不会出现。只能定义可枚举或不可枚举的属性。\n5. 不能将数据属性定义为不可配置后再将其转换为访问器属性或反之。\n6. 不能将一个访问器属性定义为可写或可配置的，或者同时修改一个访问器描述符的值和getter或setter的描述符的值。\n\n综上，要使用Object.defineProperty需谨慎，需要清楚地了解其限制和使用场景。在实际开发中，我们通常使用ES6引入的class语法糖和语法规范中的getter和setter来更方便地操作对象的属性。\n\n举个例子：\n\n```\nclass Person {\n  // 使用语法糖定义私有变量_name\n  #_name;\n\n  constructor(name) {\n    this.#_name = name;\n  }\n\n  // 定义公共的getter和setter访问私有变量_name\n  get name() {\n    return this.#_name;\n  }\n\n  set name(newName) {\n    this.#_name = newName;\n  }\n}\n\nconst person = new Person('Tom');\nconsole.log(person.name); // \"Tom\"\n\nperson.name = 'Jerry'\nconsole.log(person.name); // \"Jerry\"\n```\n\n以上代码演示了如何使用class语法糖来简单地定义一个Person类，并使用getter和setter访问私有变量。UIColor、UIFont等常见第三方库也大量采用了这种语法糖的应用，代码更加清新易读。\n\n通过语法糖和规范进行属性定义的好处是，不用过多考虑对象属性的具体实现和私有特性，从而提高代码的可读性和可维护性。\n\n## 19.Vue什么是响应式数据绑定\n\n在Vue中，响应式的数据绑定是一种机制，它允许数据与视图之间建立实时的关联，当数据发生变化时，视图会自动更新以反映数据的最新状态。这种机制允许开发者以一种更加声明式和简单的方式进行数据处理和组件化开发。\n\nVue中的响应式数据绑定是通过Vue实例中的数据对象，以及Vue组件中的props和data对象来实现的。结合Vue的模板系统和组件化开发机制，开发者可以以一种容易理解、易于维护的方式进行应用程序开发。\n\nVue是如何实现响应式数据绑定的呢？Vue在使用数据对象时，会将数据对象转换为getter/setter形式，当数据发生变化时，setter函数会被触发，并通知Vue框架数据发生了变化。Vue会自动检测数据对象的变化，并将数据的变化反映在相关的视图上。这种机制允许我们在Vue中声明式地描述我们的应用状态，而不需要手动更新DOM，从而实现更少的模版代码和更少的样板代码。\n\n例如，在Vue模板中，可以通过v-model指令绑定到表单元素上，实现双向数据绑定：\n\n```\n<template>\n  <div>\n    <input v-model=\"message\" placeholder=\"Enter your message\">\n    <p>{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello Vue!'\n    }\n  }\n}\n</script>\n```\n\n在这个例子中，v-model指令允许我们将input元素与message变量绑定起来。当input元素的值发生变化时，Vue会自动将变化的内容赋值给message变量，当message变量发生变化时，Vue会自动更新视图以反映数据的最新状态。这就是Vue响应式的数据绑定机制。\n\n## 20. Vue生命周期流程\n\n在 Vue.js 中，每个组件实例都会经历一系列的生命周期过程。这些生命周期过程由一系列的钩子函数组成，这些钩子函数可以在不同的生命周期步骤中执行代码逻辑，以响应特定的事件或执行必要的操作。\n\n以下是 Vue.js 组件生命周期的流程：\n\n1. 创建阶段\n\n- `beforeCreate`：在实例初始化之后，数据观测（data observer）和事件配置之前被调用，此时 `vue` 实例的挂载阶段还没有开始。\n- `created`：实例已经完全创建，属性和方法都已经完成配置。需要注意的是此阶段不能更新属性和 DOM，此时 `$el` 还不存在。\n\n1. 挂载阶段\n\n- `beforeMount`：在挂载开始之前被调用。此时 `vue` 实例的 `$el` 和 `data` 都已经初始化，但并未创建真正的 `DOM` 节点。\n- `mounted`：在实例挂载到 `DOM` 后被调用。此时 `vue` 实例已经构建完成，可以操作 `DOM`，初始化发生在该钩子内部。\n\n1. 更新阶段\n\n- `beforeUpdate`：在响应式数据发生改变时，虚拟 `DOM` 重新渲染和打补丁之前被调用。此时可以进行必要的更新准备工作。\n- `updated`：当虚拟 `DOM` 重新渲染和打补丁之后调用。假如要对 `DOM` 进行更改会触发该钩子，注意不要在此修改数据，会导致无限循环。\n\n1. 销毁阶段\n\n- `beforeDestroy`：实例销毁之前调用。此时实例仍然完全可用，可以进行必要的清理工作，如清除定时器、解绑事件等等。\n- `destroyed`：实例销毁之后调用。调用该钩子之后，vue 实例以及所有的事件监听器会被移除，所有与实例相关的指令、过滤器等也会被销毁。\n\n1. 激活与停用阶段\n\n- `activated`: 被 keep-alive 缓存的组件激活时调用\n- `deactivated`: 被 keep-alive 缓存的组件停用时调用\n\n上述的生命周期钩子用于对应不同的组件状态，并且也为开发者提供了丰富的扩展能力，使用这些钩子函数，开发者可以在不同的状态阶段下进行相应的操作或处理业务逻辑。\n\n<img src=\"./images/生命周期.png\">\n\n---\n\n在整个 Vue.js 组件生命周期的过程中，可以看到一些重要的时机：\n\n- 在 `beforeCreate` 钩子函数中，实例已经完成了 `data` 对象的初始化，但还没有完成 `$el` 和事件的初始化。\n- 在 `created` 钩子函数中，除了可以访问 `$data` 和 `$el` 对象之外，其他的一切都需要等到挂载阶段才能访问到。\n- 在 `beforeMount` 钩子函数中，Vue.js 将开始创建组件的真实 `DOM`。此时，组件的 `$el` 属性已经存在，但是还没有挂载到实际的页面上。\n- 在 `mounted` 钩子函数中，Vue.js 完成了组件的挂载过程，并将组件的 `DOM` 添加到页面中。\n- 在 `beforeUpdate` 钩子函数中，响应式数据发生了变化，但是尚未对组件进行重新渲染。\n- 在 `updated` 钩子函数中，组件完成了重新渲染，并更新了 `DOM`。\n- 在 `beforeDestroy` 钩子函数中，组件即将被销毁，但仍然可以访问 `$data` 和 `$el` 等属性。\n- 在 `destroyed` 钩子函数中，组件已经被销毁，所有的事件监听器和指令等都已经被移除。\n\n-------\n\n下面是一个简单的 Vue.js 组件项目，展示了 Vue.js 生命周期的完整流程及各个时机绑定的钩子：\n\n```\n<template>\n  <div ref=\"root\">\n    <p>{{ message }}</p>\n    <button @click=\"updateMessage\">Update Message</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello, Vue.js!',\n    };\n  },\n  beforeCreate() {\n    console.log('beforeCreate');\n  },\n  created() {\n    console.log('created');\n  },\n  beforeMount() {\n    console.log('beforeMount');\n  },\n  mounted() {\n    console.log('mounted');\n  },\n  beforeUpdate() {\n    console.log('beforeUpdate');\n  },\n  updated() {\n    console.log('updated');\n  },\n  beforeDestroy() {\n    console.log('beforeDestroy');\n  },\n  destroyed() {\n    console.log('destroyed');\n  },\n  methods: {\n    updateMessage() {\n      this.message = 'Updated message!';\n    },\n  },\n};\n</script>\n```\n\n在这个示例中，我们定义了一个简单的组件，其中包含一个 `message` 数据属性和一个按钮，点击按钮之后可以更新 `message` 的值。在组件中，我们绑定了 Vue.js 生命周期中的所有钩子函数，并通过控制台输出相应的消息来表示当前执行的生命周期钩子。\n\n在组件的生命周期中，当组件被创建时，Vue.js 会依次触发 `beforeCreate` 和 `created` 钩子函数，在 `created` 钩子函数中可以访问组件 `data` 数据和 `el` 元素，但此时组件尚未挂载到页面中。接下来，当 Vue.js 开始挂载组件时，会依次触发 `beforeMount` 和 `mounted` 钩子函数，在 `mounted` 钩子函数中组件已经被挂载到页面中，此时可以对 `this.$el` 进行相关操作。\n\n在组件挂载后，如果组件中的 `data` 有变化，那么 Vue.js 会依次触发 `beforeUpdate` 和 `updated` 钩子函数，分别表示数据更新前后的状态。在所有的钩子函数执行完成后，Vue.js 会在组件销毁时依次触发 `beforeDestroy` 和 `destroyed` 钩子函数，分别表示销毁前和销毁后的状态，这个时候应该清除所有的事件监听器和定时器，否则可能会造成内存泄漏的问题。\n\n通过这个示例，可以更好地理解 Vue.js 的生命周期过程，并注意在不同的生命周期阶段下执行不同的操作，从而使组件功能更加完善和稳定。\n\n## 21.箭头函数的带大括号与不带大括号的区别\n\n`(x) => x + 1` 与 `(x) => {x + 1}` 的区别是：\n\n- `(x) => x + 1` 是一个箭头函数，它接受一个参数 `x`，返回 `x+1` 的结果。\n- `(x) => {x + 1}` 也是一个箭头函数，但是它使用了花括号 `{}`，其中包含了一个语句 `x + 1`。由于花括号中包含语句而非表达式，因此需要使用 `return` 语句将结果返回。\n\n具体来说，`(x) => {x + 1}` 不会直接返回 `x + 1` 的结果，而是返回 `undefined`，因为花括号中并没有 `return` 语句将结果返回。因此需要将其改写为 `(x) => {return x + 1;}` 或 `function(x){return x + 1;}` 才能实现与 `(x) => x + 1` 相同的功能。\n\n综上，`(x) => x + 1` 是一个返回表达式的箭头函数，而 `(x) => {x + 1}` 则是一个返回 `undefined` 的箭头函数，需要使用 `return` 语句明确返回结果。\n\n## 22.依赖关系\n\n依赖关系指的是一个模块（类、函数、对象等）依赖于其他模块，即它使用了其他模块中的功能或数据。这种依赖关系可以表现为代码中的函数调用、对象引用、类继承等形式。\n\n在软件开发中，模块化是一种常见的编程思想，它将一个大型的应用程序拆分成多个小的模块，每个模块都有自己的特定功能和职责。这种模块化的设计可以提高代码的可读性、可维护性和可扩展性。\n\n然而，模块之间的依赖关系也可能会导致一些问题。例如，如果一个模块依赖于其他模块中的某个函数或对象，而这个函数或对象被删除或修改了，那么依赖于它的模块也需要进行相应的修改。如果依赖关系过于复杂，这种修改可能会涉及到多个模块，从而增加了代码的维护难度。\n\n因此，在软件开发中，需要注意模块之间的依赖关系，避免出现过于复杂的依赖关系。一些常见的减少依赖关系的方法包括：\n\n- 使用接口或抽象类定义模块之间的通信接口，从而降低了模块之间的耦合度。\n\n- 使用依赖注入（Dependency Injection）等技术，将依赖关系的控制权交给容器，从而减少了模块之间的直接依赖关系。\n\n- 使用事件驱动编程（Event-Driven Programming）等技术，通过事件的发布和订阅来解耦模块之间的依赖关系。\n\n- 以下是一个简单的例子，展示了模块之间的依赖关系：\n\n  ```\n  // 定义一个模块A\n  const moduleA = {\n    data: 'data from module A',\n    getData() {\n      console.log(this.data);\n    }\n  };\n  \n  // 定义一个模块B，依赖于模块A\n  const moduleB = {\n    data: 'data from module B',\n    getData() {\n      console.log(this.data);\n      moduleA.getData(); // 调用模块A的方法\n    }\n  };\n  \n  // 在模块B中调用模块A的方法\n  moduleB.getData(); // 输出：data from module B 和 data from module A\n  ```\n\n  在这个例子中，模块B依赖于模块A，即在模块B中使用了模块A中的方法。通过调用模块B的getData方法，可以看到它先输出了自己的数据，然后再调用了模块A的getData方法，输出了模块A的数据。这种依赖关系可以通过控制模块之间的通信接口、使用依赖注入等方式进行优化和管理。\n\n## 23.回调函数\n\n  回调函数是一种特殊的函数，它作为参数传递给另一个函数，并在该函数执行完毕后被调用。回调函数通常用于异步编程中，例如在处理网络请求、读取文件、执行数据库操作等情况下，可以使用回调函数等待操作完成后再执行回调函数。\n\n  回调函数的使用方法与普通函数类似，只需要将函数名作为参数传递给另一个函数即可。例如，以下代码演示了在JavaScript中使用回调函数的基本方法：\n\n  ```\n  // 定义一个异步函数，接受一个回调函数参数\n  function asyncFunction(callback) {\n    // 模拟异步操作\n    setTimeout(function() {\n      console.log('Async operation completed.');\n      callback(); // 执行回调函数\n    }, 1000);\n  }\n  \n  // 定义一个回调函数\n  function callbackFunction() {\n    console.log('Callback function executed.');\n  }\n  \n  // 调用异步函数并传入回调函数\n  asyncFunction(callbackFunction);\n  ```\n\n  在这个例子中，我们定义了一个异步函数`asyncFunction`，它接受一个回调函数`callback`作为参数。在异步函数中，我们使用`setTimeout`方法模拟了一个异步操作，并在操作完成后执行了回调函数。同时，我们也定义了一个回调函数`callbackFunction`，它会在异步操作完成后被调用。最后，我们通过调用异步函数并传入回调函数的方式，实现了在异步操作完成后执行回调函数的效果。\n\n  回调函数能回调的原因是因为在JavaScript中，函数也是一种数据类型，可以被作为参数传递给其他函数。当我们将一个函数作为参数传递给另一个函数时，实际上是将这个函数的引用传递给了另一个函数。在另一个函数中，我们可以通过这个函数的引用来调用它并执行它。因此，在使用回调函数时，我们可以将一个函数作为参数传递给另一个函数\n\n，在异步操作完成后再执行这个函数。这种方式可以避免在异步操作中阻塞代码执行，提高了代码的效率和可读性。\n\n总之，回调函数是一种常见的编程技术，在异步编程中广泛应用。使用回调函数可以避免代码阻塞，提高代码的效率和可读性。同时，回调函数也是一种函数类型，可以被作为参数传递给其他函数，并在其他函数中执行。\n\n### 22.1更简单的例子\n\n以下是一个简单的例子，演示了在JavaScript中使用回调函数的基本方法：\n\n```\n// 接受一个数字参数和一个回调函数参数\nfunction square(num, callback) {\n  const result = num * num;\n  callback(result);\n}\n\n// 定义一个回调函数\nfunction printResult(result) {\n  console.log(\"The result is: \" + result);\n}\n\n// 调用square函数并传入回调函数\nsquare(5, printResult); // 输出：The result is: 25\n```\n\n在这个例子中，我们定义了一个`square`函数，它接受一个数字参数和一个回调函数参数。在函数中，我们计算了数字的平方，并将结果传递给回调函数。同时，我们也定义了一个回调函数`printResult`，它会在`square`函数执行完毕后被调用。最后，我们通过调用`square`函数并传入回调函数的方式，实现了在计算完成后输出结果的效果。\n\n----------\n\n以下是一个使用回调函数的简单例子：\n\nfunction add(a, b, callback) {\n  var result = a + b;\n  callback(result);\n}\n\nfunction display(result) {\n  console.log(\"The result is \" + result);\n}\n\nadd(2, 3, display);\n在这个例子中，我们定义了一个add函数，它接受两个参数a和b，并在它们上执行加法操作。add函数还接受第三个参数callback，它是一个回调函数。\n\n在add函数内部，我们首先计算出结果，然后将其作为参数传递给回调函数callback。在这个例子中，我们将display函数作为回调函数传递给add函数。\n\ndisplay函数将结果作为参数打印到控制台上。\n\n最后，我们调用add函数并传递两个数字和回调函数作为参数。当add函数完成计算时，它将调用回调函数display，并将结果作为参数传递给它。display函数将结果打印到控制台上。\n\n### 22.2函数可以被传递\n\n回调函数能够回调的原因在于JavaScript中的函数是一等公民，也就是说，函数可以像其他数据类型一样被传递、返回、存储等。在JavaScript中，函数不仅可以被定义和调用，还可以作为参数传递给另一个函数或作为另一个函数的返回值。\n\n在异步编程中，我们通常需要在某个操作完成后执行某些代码，但是由于JavaScript是单线程执行的，如果在操作完成前执行这些代码，会导致程序阻塞。为了解决这个问题，我们可以将这些代码封装成一个函数，然后将这个函数作为回调函数传递给异步操作。当异步操作完成后，系统会自动调用这个回调函数，以执行我们需要执行的代码。\n\n回调函数的形式参数通常为函数类型，当异步操作完成后，将会调用这个函数，并将异步操作的结果作为参数传递给这个函数。这样，我们就可以在异步操作完成后使用异步操作的结果进行后续操作。因此，回调函数的能够回调的原因在于函数是一等公民，可以作为参数传递，以及JavaScript的事件循环机制。\n\n## 23.set 与对象的区别\n\n在JavaScript中，`set`和对象（`object`）是两种不同的数据类型，它们具有不同的特点和用途。\n\n`Set`是ES6中新增的一种集合类型，它类似于数组，但是具有以下特点：\n\n- `Set`中的元素是唯一的，不会重复；\n- `Set`中的元素是无序的，不能通过下标来访问；\n- `Set`中的元素可以是任何数据类型，包括基本类型和对象。\n\n在`Set`中，添加重复元素会被自动忽略，因此`Set`通常被用于去重或者判断元素是否存在等场景。\n\n对象是JavaScript中的一种复合数据类型，它由一组属性（`key-value`对）组成，每个属性都有一个唯一的键和对应的值，可以是基本类型或者其他对象。对象可以通过键来访问和修改属性的值，因此对象通常被用于存储和管理复杂的数据结构。\n\n总之，`Set`和对象是两种不同的数据类型，它们具有不同的特点和用途。`Set`通常被用于去重或者判断元素是否存在等场景，而对象通常被用于存储和管理复杂的数据结构。\n\n## 24.类与构造函数的区别\n\n### 24.1不同的对象创建方式\n\n类（Class）和构造函数（Constructor）是两种不同的对象创建方式，它们具有不同的特点和用途。\n\n构造函数是一种用于创建对象的函数，它使用`new`关键字来创建对象，并且可以接受参数来初始化对象的属性。构造函数通常通过`this`关键字来引用当前对象的属性和方法，同时也可以通过原型链来实现方法的继承。例如：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n};\n\nconst person = new Person(\"Alice\", 20);\nperson.sayHello(); // 输出：Hello, my name is Alice, and I'm 20 years old.\n```\n\n在这个例子中，我们定义了一个构造函数`Person`，用于创建`Person`对象。构造函数接受两个参数`name`和`age`，用于初始化对象的属性。然后，我们通过给`Person.prototype`添加方法的方式来定义`sayHello`方法，并将它继承给`Person`对象。最后，我们创建了一个`Person`对象，并调用`sayHello`方法来输出相应的信息。\n\n类是ES6中新增的一种对象创建方式，它使用`class`关键字来定义类，并且使用`new`关键字来创建对象。类中包含了构造函数和实例方法，用于初始化对象的属性和定义对象的行为。类也可以通过继承来实现方法的复用和扩展。例如：\n\n```\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  sayHello() {\n    console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n  }\n}\n\nconst person = new Person(\"Alice\", 20);\nperson.sayHello(); // 输出：Hello, my name is Alice, and I'm 20 years old.\n```\n\n在这个例子中，我们使用`class`关键在这个例子中，我们使用`class`关键字定义了一个名为`Person`的类。类中包含了一个构造函数`constructor`和一个实例方法`sayHello`。构造函数用于初始化对象的属性，实例方法用于定义对象的行为。在类的内部，可以通过`this`关键字引用当前对象。\n\n我们创建了一个`Person`类的实例，并将`\"Alice\"`和`20`作为参数传递给构造函数。然后，我们通过调用实例方法`sayHello`来输出相应的信息。\n\n需要注意的是，虽然类的定义和构造函数的定义在语法上有所不同，但它们都可以用来创建对象并定义对象的行为。类的定义更加清晰和简洁，具有更好的可读性和可维护性，同时还提供了继承和其他高级特性的支持。而构造函数则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。\n\n总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。\n\n### 24.2 不同的继承方式\n\n此外，类和构造函数的继承方式也有所不同。在构造函数中，可以通过修改原型链来实现继承。例如，可以通过将子类的原型对象指向父类的一个实例来实现继承。例如：\n\n```\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n};\n\nfunction Student(name, age, grade) {\n  Person.call(this, name, age);\n  this.grade = grade;\n}\n\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n\nconst student = new Student(\"Bob\", 18, 90);\nstudent.sayHello(); // 输出：Hello, my name is Bob, and I'm 18 years old.\n```\n\n在这个例子中，我们定义了一个`Person`构造函数和一个`Student`构造函数。然后，我们通过在`Student`构造函数中调用`Person`构造函数并继承其属性，来实现对`Person`构造函数的继承。接着，我们通过将`Student`的原型对象指向一个`Person`实例来继承`Person`的方法。最后，我们创建了一个`Student`对象，并调用`sayHello`方法来输出相应的信息。\n\n在类中，继承使用`extends`关键字来实现。例如：\n\n```\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  \n  sayHello() {\n    console.log(`Hello, my name is ${this.name}, and I'm ${this.age} years old.`);\n  }\n}\n\nclass Student extends Person {\n  constructor(name, age, grade) {\n    super(name, age);\n    this.grade = grade;\n  }\n}\n\nconst student = new Student(\"Bob\", 18, 90);\nstudent.sayHello(); // 输出：Hello, my name is Bob, and I'm 18 years old.\n```\n\n在这个例子中，我们定义了一个`Person`类和一个`Student`类，并使用`extends`关键字将`Student`类继承自`Person`类，从而实现对`Person`类的继承。在`Student`类的构造函数中，我们通过调用`super`关键字来调用父类的构造函数并继承其属性。然后，我们定义了一个`grade`属性，用于表示学生的分数。最后，我们创建了一个`Student`对象，并调用`sayHello`方法来输出相应的信息。\n\n需要注意的是，类的继承方式更加简洁和直观，同时也提供了更好的语言特性支持，例如`super`关键字和`constructor`方法。而构造函数的继承方式则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。\n\n总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。类提供了更加清晰和简洁的语法来定义对象和实现继承，而构造函数则更加灵活和自由。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。\n\n### 24.3高级特性\n\n此外，类还提供了一些其他的高级特性，例如静态方法、getter和setter等。\n\n静态方法是指类的方法，不需要实例化对象就可以调用。在类中，可以使用`static`关键字来定义静态方法。例如：\n\n```\nclass MathUtil {\n  static add(x, y) {\n    return x + y;\n  }\n}\n\nconsole.log(MathUtil.add(1, 2)); // 输出：3\n```\n\n在这个例子中，我们定义了一个`MathUtil`类，并使用`static`关键字定义了一个静态方法`add`。静态方法可以直接通过类来调用，而不需要先实例化对象。\n\nGetter和Setter是指用于读取和设置对象属性的方法。在类中，可以使用`get`和`set`关键字来定义Getter和Setter方法。例如：\n\n```\nclass Person {\n  constructor(name, age) {\n    this._name = name;\n    this._age = age;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  set name(value) {\n    this._name = value;\n  }\n  \n  get age() {\n    return this._age;\n  }\n  \n  set age(value) {\n    if (value > 0 && value < 100) {\n      this._age = value;\n    } else {\n      throw new Error(\"Invalid age value.\");\n    }\n  }\n}\n\nconst person = new Person(\"Alice\", 20);\nconsole.log(person.name); // 输出：Alice\nperson.name = \"Bob\";\nconsole.log(person.name); // 输出：Bob\nconsole.log(person.age); // 输出：20\nperson.age = 200; // 抛出异常：Invalid age value.\n```\n\n在这个例子中，我们定义了一个`Person`类，并使用`get`和`set`关键字定义了`name`和`age`属性的Getter和Setter方法。Getter方法用于读取属性的值，Setter方法用于设置属性的值。在Setter方法中，我们可以对属性的值进行验证和处理。\n\n需要注意的是，Getter和Setter方法可以使用不同的属性名来定义，例如在上面的例子中，我们使用了`_name`和`_age`属性来存储实际的属性值，并使用`name`和`age`来定义Getter和Setter方法。这样可以保证Getter和Setter方法的调用方式与普通属性的调用方式相同，同时也可以避免Getter和Setter方法的递归调用。\n\n总之，类提供了一系列高级特性，例如静态方法、Getter和Setter等，可以更加方便地实现对象的行为和属性的管理。在实际开发中，需要根据具体的需求和场景选择合适的特性来使用。\n\n### 24.4语法特性\n\n除了上述特性之外，类还有一些其他的语法和用法需要注意。\n\n首先是类的表达式语法。类可以像函数一样，使用表达式来定义。例如：\n\n```\nconst MyClass = class {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  sayHello() {\n    console.log(`Hello, ${this.name}!`);\n  }\n};\n\nconst obj = new MyClass(\"Alice\");\nobj.sayHello(); // 输出：Hello, Alice!\n```\n\n在这个例子中，我们使用类表达式的方式定义了一个名为`MyClass`的类，并创建了一个`MyClass`的实例。类表达式与类声明的语法类似，只是将类名省略了而已。\n\n其次是类的默认构造函数。如果类没有定义构造函数，那么会默认生成一个空的构造函数。例如：\n\n```\nclass MyClass {\n  sayHello() {\n    console.log(\"Hello!\");\n  }\n}\n\nconst obj = new MyClass();\nobj.sayHello(); // 输出：Hello!\n```\n\n在这个例子中，我们定义了一个名为`MyClass`的类，并在其中定义了一个`sayHello`方法。由于没有定义构造函数，因此会默认生成一个空的构造函数。我们创建了一个`MyClass`的实例，并调用`sayHello`方法来输出相应的信息。\n\n最后是类的继承链。在类的继承中，如果一个子类继承自多个父类，那么它的继承链会按照从左到右的顺序进行。例如：\n\n```\nclass A {\n  sayHello() {\n    console.log(\"Hello from A!\");\n  }\n}\n\nclass B {\n  sayHello() {\n    console.log(\"Hello from B!\");\n  }\n}\n\nclass C extends A,B {\n  \n}\n\nconst obj = new C();\nobj.sayHello(); // 输出：Hello from A!\n```\n\n在这个例子中，我们定义了三个类`A`、`B`和`C`。类`C`继承自类`A`和类`B`，并且没有定义自己的`sayHello`方法。由于继承链的顺序是从左到右，因此`C`类的`sayHello`方法会继承自`A`类而不是`B`类。我们创建了一个`C`类的实例，并调用`sayHello`方法来输出相应的信息。\n\n需要注意的是，如果类的继承链中存在同名的方法，那么会按照从左到右的顺序取第一个方法。这个特性在多重继承和方法的定制中非常有用。\n\n总之，类是ES6中新增的一种语言特性，提供了更加清晰和简洁的语法来定义对象和实现继承。类的特性和用法也非常丰富，可以根据具体的需求和场景选择合适的特性来使用。在实际开发中，需要熟练掌握类的语法和用法，以便更加高效地进行编程。\n\n## 25.链式写法\n\n链式写法是一种将多个操作按照一定的顺序连在一起的编程风格。在链式写法中，每个操作都返回自身的对象，从而可以继续进行下一个操作。这种风格的代码通常非常简洁和直观，可以提高代码的可读性和可维护性。\n\n链式写法通常使用方法链的方式实现。在方法链中，每个方法都返回自身的对象，从而可以继续调用下一个方法。例如：\n\n```\n// 传统的写法\nconst arr = [1, 2, 3];\nconst filtered = arr.filter(function(item) {\n  return item > 1;\n});\nconst mapped = filtered.map(function(item) {\n  return item * 2;\n});\n\n// 链式写法\nconst arr = [1, 2, 3];\nconst mapped = arr.filter(function(item) {\n  return item > 1;\n}).map(function(item) {\n  return item * 2;\n});\n```\n\n在这个例子中，我们分别使用传统的写法和链式写法来实现了一个数组的过滤和映射操作。在传统的写法中，我们需要使用多个中间变量来存储中间结果。而在链式写法中，我们可以直接将多个操作连接在一起，从而避免了中间变量的使用，使得代码更加简洁和直观。\n\n-------\n\n链式写法通常是从左往右进行读取和理解的。在链式写法中，每个方法都是基于前一个方法的结果进行操作的，因此需要按照从左往右的顺序进行读取和理解。例如，在下面的代码中：\n\n```\nconst result = arr.filter(function(item) {\n  return item > 1;\n}).map(function(item) {\n  return item * 2;\n});\n```\n\n我们可以先看到`arr`对象的`filter`方法，然后再看到`map`方法。这样就能够理解这段代码的含义，即先将数组`arr`中大于1的元素过滤出来，然后将剩余的元素都乘以2。\n\n需要注意的是，有些方法也可以从右往左进行读取和理解。例如，在下面的代码中：\n\n```\nconst result = arr.reduceRight(function(prev, curr) {\n  return prev + curr;\n});\n```\n\n我们可以先看到`arr`对象的`reduceRight`方法，然后再看到回调函数。这样就能够理解这段代码的含义，即从右往左地对数组`arr`中的元素进行累计求和。\n\n总之，链式写法需要按照从左往右的顺序进行读取和理解，以便理解代码的含义和作用。在实际开发中，需要注意代码的可读性和可维护性，以便其他开发者能够更加容易地理解和维护代码\n\n## 26.形参命名为什么经常用foo\n\n形参命名为`foo`、`bar`、`baz`等是一种编程中常用的命名方式，通常被称为哑变量或占位符。这种命名方式的目的是为了强调变量的重要性或类型，同时也可以避免歧义和冲突。**类似张三和李四，foo第一个无名变量，bar第二个无名变量，以此类推**\n\n具体来说，这种命名方式通常用于以下几个方面：\n\n1. 强调变量的重要性：在一些情况下，变量的名称并不重要，重要的是变量的作用和含义。例如，在某些算法和数据结构中，变量的名称可能并不重要，重要的是它们的作用和含义。使用哑变量或占位符可以强调变量的作用和含义，而不会分散注意力。\n2. 强调变量的类型：在一些情况下，变量的类型比名称更加重要。例如，在某些函数中，参数的类型可能比名称更加重要。使用哑变量或占位符可以强调变量的类型，而不会分散注意力。\n3. 避免歧义和冲突：在一些情况下，变量的命名可能会引起歧义和冲突。例如，在一些示例代码和教学材料中，变量的名称可能已经被占用或者已经有了特定的含义。使用哑变量或占位符可以避免歧义和冲突，使得示例代码和教学材料更加通用和易懂。\n\n需要注意的是，虽然哑变量或占位符可以提高代码的可读性和可维护性，但是也需要注意使用的场景和范围。在实际开发中，应该根据具体的需求和场景选择合适的命名方式，以便其他开发者能够更加容易地理解和维护代码。\n\n此外，还有一些其他的命名方式和规范，例如驼峰命名法、下划线命名法等。这些命名方式和规范都有自己的特点和适用场景，需要根据具体的需求和场景选择合适的命名方式和规范。\n\n驼峰命名法是一种常用的命名方式，它将多个单词连接起来，每个单词的首字母大写，除第一个单词外其他单词的首字母都小写。例如，`firstName`、`lastName`、`emailAddress`等。驼峰命名法通常用于变量、函数和对象的命名。\n\n下划线命名法是另一种常用的命名方式，它将多个单词连接起来，每个单词之间用下划线分隔。例如，`first_name`、`last_name`、`email_address`等。下划线命名法通常用于数据库表名、URL路径、CSS类名等。\n\n需要注意的是，在使用命名方式和规范时，应该尽量保持一致性和规范性，以便提高代码的可读性和可维护性。同时，也需要注意命名的长度和含义，以避免过长或者过短的命名导致代码的可读性下降。\n\n------\n\n在编程中，选择合适的变量名是非常重要的，可以提高代码的可读性和可维护性。在不同的场景下，选择不同的变量名可以更好地表达变量的含义和作用。\n\n下面是一些常见的场景和对应的变量名：\n\n1. 数组和列表：对于数组和列表中的元素，可以使用单数的名词来表示。例如，`item`、`element`、`value`等。\n2. 布尔值：对于布尔值，可以使用形容词或动词的过去分词来表示。例如，`isDone`、`isEnabled`、`hasError`等。\n3. 函数和方法：对于函数和方法，可以使用动词或动词短语来表示。例如，`getLength`、`calculateSum`、`renderList`等。\n4. 对象和类：对于对象和类，可以使用名词来表示。例如，`person`、`customer`、`product`等。\n5. 常量：对于常量，可以使用全大写的字母和下划线来表示。例如，`MAX_VALUE`、`DEFAULT_TIMEOUT`等。\n6. 迭代器和计数器：对于迭代器和计数器，可以使用单词或单词缩写来表示。例如，`i`、`j`、`k`、`index`、`count`等。\n\n需要注意的是，在选择变量名时，应该遵循命名规范和良好的编程习惯，以便提高代码的可读性和可维护性。同时，在实际开发中，应该根据具体的需求和场景选择合适的变量名，以便其他开发者能够更加容易地理解和维护代码。\n\n-----\n\n`foo`、`bar`、`baz`是一组常用的哑变量或占位符，通常用于编程中临时测试、示例代码、伪代码等场景。这些变量名通常被视为没有具体含义的变量名，只是作为占位符来使用。\n\n在实际开发中，这三个变量名通常用于测试代码和示例代码中，以便提供一些简单的例子来说明代码的用法和效果。例如，在下面的代码中：\n\n```\nfunction add(foo, bar) {\n  return foo + bar;\n}\n\nconst result = add(2, 3);\nconsole.log(result); // 输出 5\n```\n\n我们使用了`foo`和`bar`作为函数`add`的参数，这两个变量名并没有具体的含义，只是作为占位符来使用。这样可以更加简单地说明函数`add`的用法和效果，而不会分散注意力。\n\n需要注意的是，尽管这些变量名通常被视为没有具体含义的变量名，但是在实际开发中，我们应该尽量使用有意义的变量名来提高代码的可读性和可维护性。只有在一些简单的测试代码和示例代码中，才可以使用这些占位符变量名.\n\n## 27.双标签改单标签\n\n要将双标签形式中的尾标签删除，同时将尾标签中的 `/` 删除，这样就变成了单标签形式。\n\n例如，将双标签形式的 `<input type=\"text\"></input>` 改成单标签形式，就需要将它修改成 `<input type=\"text\">`。\n\n另外，需要注意的是，并非所有的双标签都可以简单地改成单标签。如果一个双标签有子元素或者属性值为空，那么它就无法转换成单标签。例如 `<div><span></span></div>`、`<input type=\"text\" value=\"\">` 等都无法改成单标签形式。只有像上面示范的那个例子一样，没有子元素并且没有属性值为空的双标签才能写成单标签形式。\n\n好的，下面再给一些例子来详细介绍如何将双标签改成单标签。\n\n1. `<img>` 标签\n\n`<img>` 标签是 HTML 中最常见的单标签之一，它表示文档中的图像。在双标签形式中，它通常被写成 `<img></img>` 或者 `<img />` 的形式。\n\n将其改成单标签的形式，只需要删除尾标签即可，这样就得到了 `<img>` 标签的单标签形式。\n\n1. `<input>` 标签\n\n`<input>` 标签用来表示文档中的表单控件，例如文本框、单选框、复选框等。在双标签形式中，它通常被写成 `<input></input>` 或者 `<input />` 的形式。\n\n对于 `<input>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<input type=\"text\" name=\"username\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<input type=\"text\">输入框</input>` 和 `<input type=\"text\" value=\"\" />` 都不能改成单标签的形式。\n\n1. `<br>` 标签\n\n`<br>` 标签用来表示文档中的换行符。在双标签形式中，它通常被写成 `<br></br>` 或者 `<br />` 的形式。\n\n和 `<img>` 标签一样，将 `<br>` 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 `<br>` 标签的单标签形式。\n\n1. `<link>` 标签\n\n`<link>` 标签用来加载外部资源，例如样式表、脚本文件等。在双标签形式中，它通常被写成 `<link></link>` 或者 `<link />` 的形式。\n\n和 `<input>` 标签一样，对于 `<link>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<link rel=\"stylesheet\" href=\"style.css\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<link>` 标签中的属性 rel 和 href 就不能为空。\n\n1. `<meta>` 标签\n\n`<meta>` 标签用来表示文档的元数据，例如编码方式、关键字、描述等。在双标签形式中，它通常被写成 `<meta></meta>` 或者 `<meta />` 的形式。\n\n对于 `<meta>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<meta charset=\"utf-8\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<meta>` 中的 charset 属性就不能为空。\n\n1. `<hr>` 标签\n\n`<hr>` 标签用来表示文档中的水平线。在双标签形式中，它通常被写成 `<hr></hr>` 或者 `<hr />` 的形式。\n\n和 `<img>` 标签一样，将 `<hr>` 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 `<hr>` 标签的单标签形式。\n\n1. `<source>` 标签\n\n`<source>` 标签用来定义多媒体资源（如视频、音频）的可选来源。在双标签形式中，它通常被写成 `<source></source>` 或者 `<source />` 的形式。\n\n和 `<input>` 标签一样，对于 `<source>` 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 `<source src=\"video.mp4\" type=\"video/mp4\" />` 就是合法的单标签形式。\n\n但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 `<source>` 标签中的 src 和 type 属性就不能为空。\n\n总之，将双标签改成单标签的关键就是删除尾标签。但需要注意的是，并非所有的双标签都可以简单地改成单标签，只有没有子元素并且没有属性值为空的双标签才能改成单标签。所以在修改标签形式的时候，一定要注意检查标签中的子元素和属性值。\n\n## 28.多层嵌套数组，对象\n\n```\nconst {\n  a: {\n    b: {c}\n  }\n} = obj;\nconsole.log(c); // 1\n```\n\n1. 解构多层数组和对象\n\n```\nconst data = [\n  {\n    id: 1,\n    name: 'Alice',\n    cats: [\n      {id: 1, name: 'Mimi'},\n      {id: 2, name: 'Kiki'}\n    ]\n  },\n  {\n    id: 2,\n    name: 'Bob',\n    cats: [{id: 3, name: 'Lala'}]\n  }\n];\n\nconst [{cats: [cat1, cat2]}, {cats: [cat3]}] = data;\nconsole.log(cat1, cat2, cat3); // { id: 1, name: 'Mimi' } { id: 2, name: 'Kiki' } { id: 3, name: 'Lala' }\n```\n\n以上示例中，使用 `...` 操作符将多层的数据结构展开并解构到变量中，简化了代码并使得操作更加清晰易懂。在实际开发中，可以根据具体情况选择使用解构赋值的方式来取出多层嵌套结构中的值。\n\n### 28.2更多示例\n\n多层嵌套数组和多层嵌套对象都是在编程中常见的数据结构，本质上它们都是存储一组相关数据的容器。\n\n1. 多层嵌套数组\n\n多层嵌套数组指的是将多个数组嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套数组的例子：\n\n```\nconst arr = [\n  [1, 2, 3],\n  [4, 5, 6, [7, 8]],\n  [9]\n];\n```\n\n在这个例子中，常量 arr 是一个三层嵌套的数组，其中第二层的第四个元素又是一个二层嵌套的数组。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。\n\n要访问嵌套数组中的元素，可以通过多次使用数组索引来获取。例如，获取第三个元素的第一个元素的值，可以使用下面的代码：\n\n```\nconst x = arr[2][0];\n```\n\n1. 多层嵌套对象\n\n多层嵌套对象指的是将多个对象嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套对象的例子：\n\n```\nconst obj = {\n  name: 'Alice',\n  age: 20,\n  address: {\n    country: 'USA',\n    city: 'New York',\n    street: {\n      name: 'Broadway',\n      number: 1234\n    }\n  }\n};\n```\n\n在这个例子中，常量 obj 是一个三层嵌套的对象，其中第二层和第三层都是嵌套的对象。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。\n\n要访问嵌套对象中的属性，可以使用点号（.）操作符或方括号（[]）操作符来获取。例如，获取地址的街道名称，可以使用下面的代码：\n\n```\nconst streetName = obj.address.street.name;\n```\n\n需要注意的是，在使用点号操作符时，属性名必须是一个合法的标识符。如果属性名中包含特殊字符或关键字，就必须使用方括号操作符，并将属性名用引号括起来。例如：\n\n```\nconst propertyName = 'street.name';\nconst value = obj['address'][propertyName];\n```\n\n1. 嵌套数组和嵌套对象的异同点\n\n虽然嵌套数组和嵌套对象都是用于存储多个相关数据的容器，但它们之间还是有一些区别和异同点的。\n\n相同点：\n\n- 均可进行多级嵌套，可以表示较为复杂的数据结构。\n- 均可访问其内部嵌套的元素或属性。\n\n不同点：\n\n- 嵌套数组是一种基于索引值来访问和操作的数据结构，而嵌套对象是一种基于属性名来访问和操作的数据结构。\n- 嵌套数组的元素是有序的，而嵌套对象的属性是无序的。\n- 在实际开发中，嵌套数组常用于存储一组相同类型的数据，而嵌套对象则常用于存储一个实体对象的各个属性。\n- 嵌套数组可以使用循环来遍历、查找、过滤和修改数据，而嵌套对象则可以使用对象方法和操作符来操作属性，如 Object.keys()、Object.values()、Object.assign() 等。\n\n1. 多层嵌套数组与多层嵌套对象的注意事项\n\n在使用多层嵌套数组或多层嵌套对象时，需要注意以下事项：\n\n- 不要过度嵌套，一般不要超过三层。\n- 尽量保持数据结构清晰，以便于阅读和维护代码。\n- 多层嵌套数组和多层嵌套对象的访问操作比较繁琐和易错，需要仔细处理。建议使用变量和常量来保存中间结果，以便于复用。\n- 在修改多层嵌套数组或多层嵌套对象时，请避免对原数据进行直接修改，可以使用深拷贝（deep clone）来获得一份新的数据，然后对新的数据进行修改。否则可能会引起意外的副作用。\n- 使用多层嵌套数组或多层嵌套对象时，还需要考虑数据之间的关系和依赖，以便于数据之间的传递和交互。例如，可以使用回调函数、事件监听器、Promise、Async/Await 等机制进行数据传递和交互。\n- 示例代码\n\n下面通过一些示例代码来演示使用多层嵌套数组和多层嵌套对象的相关操作。\n\n5.1. 多层嵌套数组的示例代码：\n\n```\nconst arr = [\n  [1, 2, 3],\n  [4, 5, 6, [7, 8]],\n  [9]\n];\n\n// 访问嵌套数组的元素\nconst x = arr[1][3][1]; // 8\n\n// 遍历嵌套数组的所有元素\nfor(let i = 0; i < arr.length; i++) {\n  for(let j = 0; j < arr[i].length; j++) {\n    console.log(arr[i][j]);\n  }\n}\n\n// 过滤嵌套数组的元素\nconst filteredArr = arr.filter(item => item.includes(2));\nconsole.log(filteredArr); // [[1, 2, 3]]\n\n// 修改嵌套数组的元素\narr[1][1] = 0;\nconsole.log(arr); // [[1, 2, 3], [4, 0, 6, [7, 8]], [9]]\n```\n\n5.2. 多层嵌套对象的示例代码：\n\n```\nconst obj = {\n  name: 'Alice',\n  age: 20,\n  address: {\n    country: 'USA',\n    city: 'New York',\n    street: {\n      name: 'Broadway',\n      number: 1234\n    }\n  }\n};\n\n// 访问嵌套对象的属性\nconst streetName = obj.address.street.name; // Broadway\n\n// 遍历嵌套对象的所有属性\nfor(let prop in obj) {\n  if(typeof obj[prop] === 'object') {\n    for(let subProp in obj[prop]) {\n      console.log(subProp + ': ' + obj[prop][subProp]);\n    }\n  } else {\n    console.log(prop + ': ' + obj[prop]);\n  }\n}\n\n// 修改嵌套对象的属性\nobj.address.street.number = 5678;\nconsole.log(obj);\n/* {\n  name: 'Alice',\n  age: 20,\n  address: {\n    country: 'USA',\n    city: 'New York',\n    street: {\n      name: 'Broadway',\n      number: 5678\n    }\n  }\n} */\n```\n\n### 28.3多层数组合并到一个数组\n\n可以使用 `...` 操作符并结合 `Array.reduce()` 方法来合并多个数组套数组到一个数组中。`Array.reduce()` 方法会遍历每个数组并将其合并到一个新的数组中，代码实现如下：\n\n```\nconst arr = [[1, 2], [3, 4], [5, 6]];\nconst flattened = arr.reduce((acc, val) => acc.concat(val), []);\n\nconsole.log(flattened); // [1, 2, 3, 4, 5, 6]\n```\n\n在上面的示例中，`arr` 是一个由三个数组组成的数组。使用 `Array.reduce()` 方法将它们合并到一个新的数组 `flattened` 中。在每次迭代中，回调函数接收两个参数，即累加器（`acc`）和当前值（`val`）。起始值为一个空数组（`[]`）。在每次迭代中，将当前值（一个数组）连接到累加器中。最后返回一个扁平化后的数组。\n\n如果你使用了 ES6，还可以用简化的箭头函数语法和展开运算符来简化代码：\n\n```\nconst arr = [[1, 2], [3, 4], [5, 6]];\nconst flattened = arr.reduce((acc, val) => [...acc, ...val], []);\n\nconsole.log(flattened); // [1, 2, 3, 4, 5, 6]\n```\n\n以上两种方法均可实现将多个数组套数组合并到一个数组中。\n\n**如果需要将多层嵌套的数组全部展开到一个新数组中**，除了使用多层的 `Array.reduce()` 递归调用外，还可以使用 ES6 中的展开运算符和递归函数来实现。具体实现如下：\n\n```\nfunction flatten(arr) {\n  return arr.reduce((acc, val) => Array.isArray(val) ? [...acc, ...flatten(val)] : [...acc, val], []);\n}\n\nconst arr = [[1, [2], [3, [[4]]]], 5];\n\nconsole.log(flatten(arr)); // [1, 2, 3, 4, 5]\n```\n\n在上面的代码中，`flatten` 函数递归调用自身并使用展开运算符将每个层次的数组展开到一个新数组中。在每个迭代中，如果当前值为数组，则递归调用 `flatten` 函数，否则直接将它添加到新数组中。最终会得到扁平化后的数组 `[1, 2, 3, 4, 5]`。\n\n需要注意的是，如果嵌套的数组很多，递归调用函数可能会导致栈溢出的问题。可以使用尾调用优化或其他的解决方案来解决这个问题。\n\n### 28.4对象的嵌套合并\n\n在 JavaScript 中，对象可以包含其他对象或数组，并且可以嵌套多层。如果需要将多层嵌套的对象或数组全部展开到一个新对象或数组中，可以使用递归函数和 ES6 中的展开运算符来实现。\n\n展开对象中的嵌套对象示例如下：\n\n```\nconst obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: {\n      e: 3\n    }\n  },\n  f: [4, 5, [6, 7]]\n};\n\nfunction flattenObj(obj) {\n  return Object.entries(obj).reduce((acc, [key, val]) => {\n    return acc.concat(\n      typeof val === \"object\" && !Array.isArray(val)\n        ? flattenObj(val)\n        : { [key]: val }\n    );\n  }, []);\n}\n\nconst flattenedObj = Object.assign({}, ...flattenObj(obj));\n\nconsole.log(flattenedObj);\n// { a: 1, c: 2, e: 3, '0': 4, '1': 5, '2': [ 6, 7 ] }\n```\n\n在上面的代码中，`flattenObj` 函数递归调用自身并使用 `Object.entries()` 方法将对象转换为可迭代的键/值数组。在每个迭代中，如果当前值为对象，则递归调用 `flattenObj` 函数。否则，将当前键/值对转换为一个新对象并返回。最后使用展开运算符和 `Object.assign()` 方法将所有新对象合并成一个扁平化的新对象。\n\n展开数组中的嵌套数组示例如下：\n\n```\nconst arr = [1, [2, [3, [4]]], 5];\n\nfunction flattenArr(arr) {\n  return arr.reduce((acc, val) =>\n    Array.isArray(val) ? acc.concat(flattenArr(val)) : acc.concat(val), []);\n}\n\nconst flattenedArr = flattenArr(arr);\n\nconsole.log(flattenedArr); // [ 1, 2, 3, 4, 5 ]\n```\n\n在上面的代码中，`flattenArr` 函数递归调用自身并使用 `Array.reduce()` 方法遍历每个嵌套数组。在每个迭代中，如果当前值为数组，则递归调用 `flattenArr` 函数。否则，将当前值添加到新数组中。最后返回扁平化后的新数组。\n\n需要注意的是，在处理对象或数组时，循环引用可能会导致无限递归的问题。需要特别小心处理或者采取其他的解决方案。\n\n## 29.重排重绘\n\n重排和重绘是网页性能优化中重要的概念。**重排（reflow）**指的是当DOM结构发生改变，影响到元素的布局、尺寸、位置等属性时，浏览器需要重新计算元素的几何属性和布局，这个过程就是重排。而**重绘（repaint）**则是指当元素的样式发生改变，但不影响到布局时，浏览器只需要重新绘制元素的视觉效果，这个过程就是重绘。重排和重绘都会消耗大量的计算资源，因此会影响网页的性能。以下是一些常见的导致重排和重绘的操作：\n\n1.改变元素的位置、尺寸和布局：包括改变元素的宽高、margin、padding、border、position、display等属性。\n\n2.改变元素的内容：包括改变文本内容、图片大小、添加或删除DOM节点等操作。\n\n3.改变浏览器窗口大小：当窗口大小改变时，会影响到整个页面的布局，因此会触发重排。\n\n为了减少重排和重绘的次数，可以采取以下措施：\n\n1.使用CSS3的transform属性来改变元素的位置和尺寸，而不是通过改变元素的position、width、height等属性。\n\n2.将需要多次操作的元素，先脱离文档流，进行操作后再重新插入文档流。\n\n3.对需要改变的元素，先使用display:none将其隐藏，修改完后再显示。\n\n4.使用requestAnimationFrame来优化动画效果，避免频繁的重排和重绘。\n\n5.避免频繁地修改DOM：可以先将需要修改的数据存储在JavaScript中，最后一次性更新到DOM中。\n\n6.使用CSS Sprites来减少图片的请求次数，将多张小图片合成一张大图，通过background-position来显示不同的图片。\n\n7.避免使用table布局：table布局很容易导致重排，可以使用div+CSS布局代替。\n\n8.使用缓存技术：对于静态资源，可以使用浏览器缓存或CDN缓存来减少请求次数。\n\n9.使用CSS动画代替JavaScript动画：CSS动画可以避免频繁的JavaScript操作，减少重排和重绘的次数。\n\n总之，减少重排和重绘是优化网页性能的重要手段之一，需要在开发过程中注意避免频繁进行DOM操作和样式修改，以及采用一些优化技术来减少不必要的重排和重绘。\n\n## 30.循环中，判断条件，重复某值用if赋值比较好还是取余？\n\n这两种方法都可以实现让`index`在循环中到达7后重新从0开始。但是在实际开发中，推荐使用`index % 7`的方法，因为它比`if(index===7) index=0`的方法更简洁、更易读、更易扩展。\n\n使用取模运算符`%`可以将`index`的值限制在0~6的范围内，当`index`的值达到7时，`index % 7`的结果为0，从而实现了从头开始的效果。而使用`if(index===7) index=0`的方法则需要显式地判断`index`的值是否为7，代码量较大，不够简洁。\n\n此外，如果循环的次数需要变更为其他值，如10或者14，使用取模运算符也可以轻松实现，只需要将7改为相应的值即可。而使用`if`语句则需要手动修改判断条件和重新赋值的代码，不够易扩展。\n\n因此，使用取模运算符`%`可以使代码更简洁、易读和易扩展，是更好的选择。\n\n## 31.return num++与return ++num的区别\n\n### 31.1前后置++的区别\n\n不一样，而且`return`不会影响后续的+1。\n\n`return num++` 先返回num的值，然后再将num加1，相当于先返回原来的num值，再执行`num=num+1`。\n\n而 `return ++num` 先将num加1，再返回新的num的值，相当于先执行`num=num+1`，然后再返回新的num值。\n\n例如：\n\n```\nlet num = 1;\nconsole.log(return num++); // 输出1\nconsole.log(num); // 输出2\n\nnum = 1;\nconsole.log(return ++num); // 输出2\nconsole.log(num); // 输出2\n```\n\n因此，`return num++` 和 `return ++num` 的返回值是不同的，需要根据具体情况选择使用哪个。\n\n### 31.2 return 为什么不会影响\n\n`return` 依旧影响，但是后置++，返回的是没有+1的值；前置+1可以看成在`return`语言前已经+1了，所以返回了+1的值。\n\n是的，`return ++num` 先将 `num` 加 1，然后再返回新的 `num` 的值。相当于先执行 `num = num + 1`，然后再执行 `return num`。\n\n因此，可以理解为 `num = num + 1` 在 `return` 语句前面执行了。在执行 `return ++num` 语句时，`num` 的值已经被加 1 了，然后将加 1 后的 `num` 值作为返回值返回。\n\n例如：\n\n```\nfunction test() {\n  let num = 1;\n  return ++num;\n}\nconsole.log(test()); // 输出2\n```\n\n在这个例子中，`test` 函数返回 `2`，因为 `return ++num` 语句先将 `num` 加 1，然后再返回新的 `num` 值，即 `2`。\n\n因此，可以理解为 `num = num + 1` 在 `return` 语句前面执行了。\n\n## 33.函数中return的理解\n\n### 33.1如果没有返回值就返回undefined\n\n```\nfunction doSomething() {\n  // 这里不需要返回值\n}\nfunction doSomethingElse() {\n  return; // 返回 undefined\n}\nconsole.log(doSomething()); // 输出 undefined\nconsole.log(doSomethingElse()); // 输出 undefined\n```\n\n在这个例子中，`doSomething` 函数和 `doSomethingElse` 函数都没有明确使用 `return` 语句返回值，因此它们的返回值都是 `undefined`。在 JavaScript 中，如果函数没有明确使用 `return` 语句返回值，那么函数默认返回 `undefined`。\n\n## 34.' ' 与 “ ” 都是字符串，这两个有什么区别\n\n在 JavaScript 中，`''` 与 `\"\"` 都表示空字符串，它们没有本质区别。即使在字符串拼接、字符串截取、字符串比较等操作中，也没有区别。\n\n例如：\n\n```\nlet str1 = '';\nlet str2 = \"\";\nconsole.log(str1 === str2); // 输出 true\nconsole.log(str1 + str2); // 输出空字符串 ''\nconsole.log(str1.substring(0, 1)); // 输出空字符串 ''\nconsole.log(str1.length === str2.length); // 输出 true\n```\n\n在这个例子中，`str1` 和 `str2` 都表示空字符串，它们之间没有区别。我们可以使用 `===` 运算符比较它们的值，也可以进行字符串拼接、字符串截取、字符串比较等操作。\n\n需要注意的是，在编写 JavaScript 代码时，应该保持一致性，即要么使用单引号 `''`，要么使用双引号 `\"\"`，不要混用。这样可以使代码风格更加统一，易于阅读和维护。\n\n### 34.1为什么有两个呢？\n\n使用两种不同的引号来表示字符串，可以让程序员在字符串中使用另一种引号，而不必进行转义。例如：\n\n```\nlet str1 = \"It's a beautiful day.\";\nlet str2 = 'She said, \"Hello.\"';\n\n```\n\n在这个例子中，`str1` 使用了双引号，因此可以在字符串中使用单引号；`str2` 使用了单引号，因此可以在字符串中使用双引号。如果使用相同的引号来表示字符串，那么在字符串中使用相同的引号就需要进行转义，这会使代码变得难以阅读和维护。\n\n在实际编码中，我们可以根据具体情况选择使用单引号 `''` 或双引号 `\"\"` 来表示字符串，以便让代码更加易于编写和阅读。\n\n## 35.函数数据类型\n\n### 35.1 函数数据\n\n在 JavaScript 中，`function` 是一种数据类型，它可以表示一个函数。JavaScript 中的函数是一等公民，也就是说函数可以像其他类型的值一样被赋值、传递、返回和存储。\n\n例如，我们可以将一个函数赋值给一个变量，然后通过变量来调用这个函数：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nlet sum = add;\nconsole.log(sum(1, 2)); // 输出 3\n```\n\n在这个例子中，我们将 `add` 函数赋值给了 `sum` 变量，然后通过 `sum` 变量来调用这个函数。\n\n我们也可以将一个函数作为参数传递给另一个函数，然后在函数内部调用这个函数：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction calculate(operation, a, b) {\n  return operation(a, b);\n}\n\nconsole.log(calculate(add, 1, 2)); // 输出 3\nconsole.log(calculate(multiply, 3, 4)); // 输出 12\n```\n\n在这个例子中，我们定义了三个函数：`add`、`multiply` 和 `calculate`。`calculate` 函数接受一个函数作为参数 `operation`，然后在函数内部调用这个函数，并传递 `a` 和 `b` 作为参数。我们可以通过调用 `calculate` 函数并传递不同的函数来实现不同的计算。\n\n需要注意的是，在 JavaScript 中，函数本身也是一个对象，它可以拥有属性和方法。我们可以给函数添加属性，也可以给函数添加方法。例如：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nadd.name = 'addition';\nadd.description = 'This function adds two numbers.';\n\nconsole.log(add.name); // 输出 'addition'\nconsole.log(add.description); // 输出 'This function adds two numbers.'\n```\n\n在这个例子中，我们给 `add` 函数添加了两个属性：`name` 和 `description`。然后我们可以通过函数名来访问函数的属性，例如 `add.name` 和 `add.description`。需要注意的是，给函数添加属性或方法并不会影响函数的执行逻辑，它们只是函数对象的属性和方法，与函数的行为无关。\n\n另外，JavaScript 中的函数可以根据定义方式分为函数声明和函数表达式两种类型。函数声明是指使用 `function` 关键字来定义函数的方式，它们会被解析器提前到作用域的顶部，因此可以在函数声明之前调用。例如：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(1, 2)); // 输出 3\n```\n\n函数表达式是指将函数赋值给变量或属性的方式定义函数，它们不会被解析器提前到作用域的顶部，因此只能在定义后调用。例如：\n\n```\nlet add = function(a, b) {\n  return a + b;\n};\n\nconsole.log(add(1, 2)); // 输出 3\n```\n\n需要注意的是，在实际编程中，我们应该根据具体情况选择使用函数声明或函数表达式来定义函数，以便让代码更加清晰、易于阅读和维护。同时，我们也可以使用箭头函数来定义函数，它们是一种更加简洁、易于编写的函数定义方式，可以使代码更加简洁、易于理解。\n\n### 35.2 为什么没有单独把函数数据类型提出来\n\nJavaScript 中的数据类型包括原始类型和引用类型。原始类型包括数字（`number`）、字符串（`string`）、布尔值（`boolean`）、`null`、`undefined` 和 `Symbol`。引用类型包括对象（`object`）、数组（`array`）、函数（`function`）和日期（`date`）等。\n\n虽然 JavaScript 中的函数是一种数据类型，但是它与其他数据类型有些不同。函数可以执行代码并返回值，因此它们不仅仅是数据类型，还可以用于实现程序的功能。因此，在 JavaScript 中，函数是一等公民，它们可以像其他类型的值一样被赋值、传递、返回和存储。\n\n**由于函数是一等公民，因此在介绍 JavaScript 的数据类型时通常不会将函数列为独立的数据类型。**通常将函数视为一种可以执行代码并返回值的数据类型，它们可以与其他数据类型一起使用，为程序实现各种功能。\n\n需要注意的是，虽然函数不是原始类型，但是在 JavaScript 中，函数的值也可以作为变量、对象属性或数组元素存储和传递。因此，我们可以将函数视为一种可以存储和传递的数据类型，它们与其他数据类型一起构成了 JavaScript 中的数据类型系统。\n\n## 36.Object.prototype.toString.call()是是什么，怎么用\n\n`Object.prototype.toString.call()` 是一个用于获取变量的类型信息的方法。它可以返回一个表示变量类型的字符串，例如 `[object Object]` 表示一个对象类型，`[object Array]` 表示一个数组类型，`[object String]` 表示一个字符串类型，等等。\n\n它的常见用途是用于判断一个变量的类型，尤其是在处理不同类型的数据时。例如，我们可以使用 `Object.prototype.toString.call()` 来判断一个变量是否为数组类型：\n\n```\nlet arr = [1, 2, 3];\nconsole.log(Object.prototype.toString.call(arr)); // 输出 '[object Array]'\n```\n\n在这个例子中，我们使用 `Object.prototype.toString.call()` 方法来获取 `arr` 变量的类型信息，它返回了一个字符串 `'[object Array]'`，表示 `arr` 是一个数组类型。\n\n需要注意的是，直接使用 `typeof` 运算符来判断一个变量的类型并不总是可靠的，因为它只能判断出原始类型和函数类型，无法判断其他类型（例如对象类型和数组类型）。因此，在实际编程中，我们通常会结合 `Object.prototype.toString.call()` 方法来判断一个变量的类型，以便使代码更加健壮、可靠。\n\n下面是一个使用 `Object.prototype.toString.call()` 方法来判断变量类型的示例：\n\n```\nfunction getType(variable) {\n  return Object.prototype.toString.call(variable);\n}\n\nconsole.log(getType(123)); // 输出 '[object Number]'\nconsole.log(getType('abc')); // 输出 '[object String]'\nconsole.log(getType(true)); // 输出 '[object Boolean]'\nconsole.log(getType(null)); // 输出 '[object Null]'\nconsole.log(getType(undefined)); // 输出 '[object Undefined]'\nconsole.log(getType({})); // 输出 '[object Object]'\nconsole.log(getType([])); // 输出 '[object Array]'\nconsole.log(getType(function() {})); // 输出 '[object Function]'\n```\n\n在这个示例中，我们定义了一个名为 `getType` 的函数，它接受一个参数 `variable`，并返回 `Object.prototype.toString.call(variable)` 的结果，即变量的类型信息。通过调用 `getType` 函数，我们可以获取不同类型变量的类型信息，并进行相应的处理。例如，我们可以编写一个函数来打印不同类型的变量：\n\n```\nfunction printType(variable) {\n  let type = getType(variable);\n\n  switch (type) {\n    case '[object Number]':\n      console.log('This is a number.');\n      break;\n    case '[object String]':\n      console.log('This is a string.');\n      break;\n    case '[object Boolean]':\n      console.log('This is a boolean.');\n      break;\n    case '[object Null]':\n      console.log('This is a null.');\n      break;\n    case '[object Undefined]':\n      console.log('This is an undefined.');\n      break;\n    case '[object Object]':\n      console.log('This is an object.');\n      break;\n    case '[object Array]':\n      console.log('This is an array.');\n      break;\n    case '[object Function]':\n      console.log('This is a function.');\n      break;\n    default:\n      console.log('This is an unknown type.');\n  }\n}\n\nprintType(123); // 输出 'This is a number.'\nprintType('abc'); // 输出 'This is a string.'\nprintType(true); // 输出 'This is a boolean.'\nprintType(null); // 输出 'This is a null.'\nprintType(undefined); // 输出 'This is an undefined.'\nprintType({}); // 输出 'This is an object.'\nprintType([]); // 输出 'This is an array.'\nprintType(function() {}); // 输出 'This is a function.'\nprintType(new Date()); // 输出 'This is an unknown type.'\n```\n\n在这个示例中，我们定义了一个名为 `printType` 的函数，它接受一个参数 `variable`，并根据变量的类型信息打印相应的信息。通过调用 `getType` 函数获取变量的类型信息，然后使用 `switch` 语句根据类型信息进行不同的处理。\n\n需要注意的是，在使用 `Object.prototype.toString.call()` 方法时，我们需要使用 `call()` 方法来明确指定调用对象，即 `Object.prototype`。这是因为 `toString()` 方法可以被所有 JavaScript 对象继承，但是不同对象的 `toString()` 方法可能会返回不同的值，因此我们需要使用 `call()` 方法来确保获取的是 `Object.prototype` 对象的 `toString()` 方法返回的值。\n\n下面是一个错误的示例，它没有使用 `call()` 方法，导致获取的类型信息不正确：\n\n```\nlet arr = [1, 2, 3];\nconsole.log(Object.prototype.toString(arr)); // 输出 '[object Object]'\n```\n\n在这个示例中，我们没有使用 `call()` 方法，而是直接调用 `Object.prototype.toString(arr)` 方法来获取 `arr` 的类型信息。由于 `toString()` 方法可以被所有对象继承，因此这里调用的是 `arr` 对象的 `toString()` 方法，它返回了 `'[object Object]'`，而不是 `'[object Array]'`。\n\n因此，在使用 `Object.prototype.toString.call()` 方法时，我们需要明确指定调用对象，并传递要获取类型信息的变量作为参数：\n\n```\nlet arr = [1, 2, 3];\nconsole.log(Object.prototype.toString.call(arr)); // 输出 '[object Array]'\n```\n\n在这个示例中，我们使用 `call()` 方法来明确指定调用对象为 `Object.prototype`，并传递 `arr` 变量作为参数，确保获取到的是 `arr` 变量的类型信息。\n\n## 37.浏览器控制台\n\nconst obj = {name:'zs',age:{year:18}} undefined 为什么浏览器上控制台会返回一个undefined ？\n\n 在控制台中输入代码时，控制台会返回最后一个表达式的结果。在你的代码中，执行了一条赋值语句 `const obj = {name:'zs',age:{year:18}}`，这条语句并不会返回任何值，所以控制台返回了 `undefined`。\n\n如果你想在控制台中查看这个对象，可以在代码后面添加 `console.log(obj)` 或者直接输入 `obj`，这样控制台就会输出这个对象了。例如：\n\n```\nconst obj = {name:'zs',age:{year:18}};\nconsole.log(obj); // 输出 {name: \"zs\", age: {year: 18}}\n```\n\n或者直接在控制台中输入 `obj`，按回车键，控制台也会输出这个对象。\n\n因此，控制台返回 `undefined` 并不代表代码出现了错误，只是最后一个表达式并没有返回任何值。\n\n## 38.boostrap间距的设置\n\nBootstrap提供了一些CSS类来改变元素的间距、行高、文字大小和边距等样式，这些类可以通过在HTML标签中添加class属性来使用。下面是一些常用的类和其作用：\n\n1. 间距（Spacing）：用于控制元素之间的间距。\n\n   - `.m-*`：设置元素的外边距（Margin），*可以为以下值：0-5，auto。\n   - `.p-*`：设置元素的内边距（Padding），*可以为以下值：0-5。\n   - `.mx-*`：设置元素的左右外边距（Margin）。\n   - `.my-*`：设置元素的上下外边距（Margin）。\n   - `.px-*`：设置元素的左右内边距（Padding）。\n   - `.py-*`：设置元素的上下内边距（Padding）。\n\n2. 行高（Line Height）：用于控制文本行与行之间的距离。\n\n   - `.lh-*`：设置元素的行高（Line Height），*可以为以下值：1-5。\n\n3. 文字大小（Text Size）：用于控制文本的大小。\n\n   - `.text-*`：设置元素的文本大小，*可以为以下值：sm（小号）、lg（大号）、*（默认大小）。\n\n4. 边距（Margin）：用于控制元素与其他元素之间的距离。\n\n   - `.mt-*`：设置元素的上外边距（Margin Top），*可以为以下值：0-5。\n\n   - `.mb-*`：设置元素的下外边距（Margin Bottom），*可以为以下值：0-5。\n\n   - `.ml-*`：设置元素的左外边距（Margin Left），*可以为以下值：0-5。\n\n   - `.mr-*`：设置元素的右外边距（Margin Right），*可以为以下值：0-5。\n\n   - `.m-*`：设置元素的外边距（Margin），*可以为以下值：0-5，auto。 - `.mt-*`、`.mb-*`、`.ml-*`、`.mr-*`：也可以使用 `.m-*` 替代，例如 `.m-3` 相当于 `.mt-3 mb-3 ml-3 mr-3`。\n\n     下面是一个示例代码，展示如何使用这些类来改变元素的样式：\n\n     ```\n     <div class=\"container\">\n       <div class=\"row\">\n         <div class=\"col-md-6\">\n           <h1 class=\"text-primary text-center mt-5\">标题</h1>\n           <p class=\"lead text-muted mx-3 my-4\">这是一段引导性文字。</p>\n           <ul class=\"list-group list-group-flush px-4\">\n             <li class=\"list-group-item\">列表项1</li>\n             <li class=\"list-group-item\">列表项2</li>\n             <li class=\"list-group-item\">列表项3</li>\n           </ul>\n         </div>\n       </div>\n     </div>\n     ```\n\n     在这个代码中，我们使用了 `.mt-5`、`.mx-3`、`.my-4`、`.px-4`、`.list-group-flush` 等类来改变元素的样式。`.mt-5` 用于设置标题的上外边距为5个间距单元，`.mx-3` 和 `.my-4` 用于设置引导性文字的左右外边距和上下外边距，`.px-4` 用于设置列表的左右内边距，`.list-group-flush` 用于去除列表的边框和圆角。这些类的使用可以让我们更加方便地控制元素的样式，从而使网页设计更加美观。\n\n## 39.函数的传递\n\nJavaScript 函数是一等公民，可以作为变量、参数或返回值在其他函数中传递，因此函数的传递成为了 JavaScript 中的常见操作。\n\n在 JavaScript 中，函数传递主要有以下几种方式：\n\n1. 作为函数参数传递\n2. 作为函数返回值传递\n3. 作为对象属性传递\n\n接下来，让我们分别来详解这些方式。\n\n### 作为函数参数传递\n\n在 JavaScript 中，可以将一个函数作为另一个函数的参数，从而实现进一步的功能。这种方式可以让代码更加抽象、模块化和可复用。\n\n比如下面的代码：\n\n```\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction square(c) {\n  return c * c;\n}\n\nfunction compose(fn1, fn2) {\n  return function(x) {\n    return fn2(fn1(x));\n  }\n}\n\nvar addAndSquare = compose(add, square);\n\nconsole.log(addAndSquare(2, 3)); // 25\n```\n\n在上面的代码中，我们定义了三个函数，其中 `add` 和 `square` 分别是两个单独的函数，而 `compose` 函数用于将两个函数连接起来，并返回一个新的函数 `addAndSquare`。在调用 `addAndSquare` 函数时，它会先执行 `add` 函数，然后将结果再传递给 `square` 函数。最终得到的结果是 25。\n\n可以看到，将函数作为参数传递，可以方便地实现代码模块化和抽象，提高代码的可读性和可维护性。\n\n### 作为函数返回值传递\n\n除了作为参数传递外，在 JavaScript 中，函数还可以作为返回值进行传递。这种方式通常可以用于实现柯里化（currying）和函数式编程的一些高级特性。\n\n比如下面的代码：\n\n```\nfunction add(a) {\n  return function(b) {\n    return a + b;\n  }\n}\n\nvar add5 = add(5);\n\nconsole.log(add5(3)); // 8\nconsole.log(add5(6)); // 11\n```\n\n在上面的代码中，我们定义了一个 `add` 函数，它的作用是将一个数加上另一个数。注意到 `add` 函数返回了一个匿名函数，这个匿名函数在调用时可以继续接收参数，并返回结果。\n\n通过调用 `add(5)` 这个函数，我们得到了一个新的函数 `add5`，它的作用是将一个数加上 5。这样，无论我们传入什么参数，`add5` 都会将其加上 5，并返回结果。\n\n可以看到，这种函数返回函数的方式，使我们能够更加灵活地组合和复用函数，提高了代码的可扩展性和可复用性。\n\n### 作为对象属性传递\n\n另外，函数也可以作为对象属性进行传递，这种方式在事件绑定和回调函数中比较常见，可以方便地将某个对象的方法传递到其他函数中去。\n\n比如下面的代码：\n\n```\nvar obj = {\n  name: 'Jack',\n  sayHello: function() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n};\n\nsetTimeout(obj.sayHello.bind(obj), 1000); // 1秒后输出 \"Hello, my name is Jack\"\n```\n\n在上面的代码中，我们定义了一个对象 `obj`，它包含了一个姓名属性和一个 `sayHello` 方法。在调用 `setTimeout` 函数时，我们将 `obj.sayHello` 方法作为参数传入，并在需要时通过 `bind` 方法绑定执行上下文（也就是 `this` 关键字）。\n\n在 1 秒后，`sayHello` 方法将被调用，并输出 \"Hello, my name is Jack\"。\n\n可以看到，将函数作为对象属性传递，可以方便地在不同的上下文中传递并执行函数，提高代码的复用性和灵活性。\n\n总结\n\n以上是 JavaScript 中函数传递的几种方式，它们为前端开发提供了更多的编程思路和技能，可以帮助我们编写更加优雅和高效的代码。\n\n","slug":"first","published":1,"updated":"2023-04-13T14:26:33.886Z","_id":"clgf1k0ck00000cuu8lcqc4g4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"技术总结v1-0\"><a href=\"#技术总结v1-0\" class=\"headerlink\" title=\"技术总结v1.0\"></a>技术总结v1.0</h1><h2 id=\"1-面向对象与面向过程的区别\"><a href=\"#1-面向对象与面向过程的区别\" class=\"headerlink\" title=\"1. 面向对象与面向过程的区别\"></a>1. 面向对象与面向过程的区别</h2><p>​ <strong>面向过程</strong>：是将事件分成步骤，按部就班一步一步完成的。</p>\n<p>​ <strong>面向对象</strong> ：将事件分成一个又一个对象，每个对象有自己的属性及方法。是各个对象之间的方法交互。</p>\n<h2 id=\"2-flex布局与grid布局的区别\"><a href=\"#2-flex布局与grid布局的区别\" class=\"headerlink\" title=\"2. flex布局与grid布局的区别\"></a>2. flex布局与grid布局的区别</h2><p>​ grid布局讲容器分成行与块，远比flex布局强。</p>\n<p>参考链接</p>\n<h2 id=\"3-Sass与Less的区别？用哪个好？\"><a href=\"#3-Sass与Less的区别？用哪个好？\" class=\"headerlink\" title=\"3.Sass与Less的区别？用哪个好？\"></a>3.Sass与Less的区别？用哪个好？</h2><p>​ Sass 的主版本现在已经改用 Dart 实现了，Ruby 的版本一年前就不再维护了。Sass 和 Less 的使用并没有明显的「复杂」和「简单」的区别，常用部分大同小异。Less 运行在浏览器端只是方便初学者上手，生产环境是绝对不会这么做的，都是随着前端项目一起构建，构建完之后的都是静态资源，不涉及服务端什么事。两者都有线上的 REPL，所以简单的演示代码不用担心用不了 Sass。Sass 以 $ 打头比较不容易和 CSS 标准语法冲突，Less 的语法跟 CSS 标准太像了，有时候会难以区分（Stylus 更糟糕）。Sass 和 Less 的变量机制有很大的不同，Sass 是类似 JS 的块级作用域一样，可以在作用域内重新赋值而不影响外部，Less 是以全局的最后一次赋值为准，这也是为什么大部分 UI 组件库都选择 Less。Compass 这个东西……已经没什么人在用的了，只存在于教材上的东西，忘了它吧。SASS 和 SCSS 只是两种语法风格而已，<strong>推荐使用 SCSS</strong> ，但 SASS 也没有不再支持，放到现在来看，跟版本没关系。Sass 的模块机制现在大改了，建议跟进下。不论国内外市场如何，Less 和 Sass 最常用的部分并没有明显的区别，不用太在意该用哪个，Just pick one。我个人比较偏好 Sass，生态更好（踩过 Stylus 的坑，深刻的教训），至于公司用哪个，跟着用就行，不出大问题不用考虑换。</p>\n<h2 id=\"4-sass使用过程中的问题\"><a href=\"#4-sass使用过程中的问题\" class=\"headerlink\" title=\"4.sass使用过程中的问题\"></a>4.sass使用过程中的问题</h2><h3 id=\"Easy-Sass插件没有生成-css文件问题\"><a href=\"#Easy-Sass插件没有生成-css文件问题\" class=\"headerlink\" title=\"Easy Sass插件没有生成.css文件问题\"></a>Easy Sass插件没有生成.css文件问题</h3><ul>\n<li>检查是否安装好</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass -v //检查是否安装好sass</span><br><span class=\"line\">compass -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>路径保存问题</strong>，settings.json中保存路径应该为<code>css/</code>这样才能在上一级文件夹（当前在sass文件夹内）的<code>css</code>文件夹生成对应<code>.css</code>文件。<b>ps</b>:需要自己新建<code>css</code>文件夹，不然会报错。</li>\n<li>settings.json配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;easysass.compileAfterSave&quot;: true,</span><br><span class=\"line\">&quot;easysass.formats&quot;: [ </span><br><span class=\"line\">        //nested：嵌套缩进的 css 代码。</span><br><span class=\"line\">        //expanded：没有缩进的、扩展的css代码。</span><br><span class=\"line\">        //compact：简洁格式的 css 代码。</span><br><span class=\"line\">        //compressed：压缩后的 css 代码</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;format&quot;: &quot;expanded&quot;,</span><br><span class=\"line\">            &quot;extension&quot;: &quot;.css&quot; //设置编译输出的文件名</span><br><span class=\"line\">    ],</span><br><span class=\"line\">      //这会回到根目录的css文件夹内创建同名.css文件</span><br><span class=\"line\">    &quot;easysass.targetDir&quot;: &quot;css/&quot; //提供 css 输出路径的设置.</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要自己提前在<strong>根目录创建好css文件夹</strong>否则会报错。</li>\n</ul>\n<h2 id=\"5-写css的命名规范–BEM\"><a href=\"#5-写css的命名规范–BEM\" class=\"headerlink\" title=\"5.写css的命名规范–BEM\"></a>5.写css的命名规范–BEM</h2><ul>\n<li>命名规范</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>参考连接<a href=\"https://zhuanlan.zhihu.com/p/122214519\">css命名规范–知乎</a></p>\n<h2 id=\"6-tree生成目录的使用\"><a href=\"#6-tree生成目录的使用\" class=\"headerlink\" title=\"6.tree生成目录的使用\"></a>6.tree生成目录的使用</h2><ul>\n<li>在在Tree for Winodws页面，下载二进制文件Binaries zip</li>\n<li>解压压缩包，找到压缩包内的 bin 目录，将 bin 目录下的 tree.exe 复制到git文件夹Git\\usr\\bin 目录下，将 tree.exe 粘贴到该目录下，安装完成，即可使用。</li>\n<li>git bash</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree -L 1 &gt;tree.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tree命令行参数\"><a href=\"#tree命令行参数\" class=\"headerlink\" title=\"tree命令行参数\"></a>tree命令行参数</h3><p>-a 显示所有文件和目录。<br><br>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。<br><br>-C 在文件和目录清单加上色彩，便于区分各种类型。<br><br>-d 显示目录名称而非内容。<br><br>-D 列出文件或目录的更改时间。<br><br>-f 在每个文件或目录之前，显示完整的相对路径名称。<br><br>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|“号。<br><br>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。<br><br>-i 不以阶梯状列出文件或目录名称。<br><br>-I 不显示符合范本样式的文件或目录名称。<br><br>-n 不在文件和目录清单加上色彩。<br><br>-N 直接列出文件和目录名称，包括控制字符。<br><br>-p 列出权限标示。<br><br>-P 只显示符合范本样式的文件或目录名称。<br><br>-q 用”?”号取代控制字符，列出文件和目录名称。<br><br>-s 列出文件或目录大小。<br><br>-t 用文件和目录的更改时间排序。<br><br>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。<br><br>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</p>\n<h2 id=\"7-this的指向\"><a href=\"#7-this的指向\" class=\"headerlink\" title=\"7.this的指向\"></a>7.this的指向</h2><ul>\n<li><strong>方法中</strong>，<code>this</code>指向方法所在的对象。</li>\n<li>单独使用<code>this</code>指向<code>window</code>。</li>\n<li>函数中<code>this</code>为函数的所有者。如果在浏览器中就是<code>window</code>。<br><br>函数默认指向最高的<code>window</code>。<br><br><b>构造函数是obj对象</b>，所以<code>this</code>会指向该构造函数（obj）。</li>\n<li><strong>事件中</strong>的<code>this</code>指向接收事件的HTML元素。因为<strong>HTML元素是对象</strong>。???</li>\n</ul>\n<h2 id=\"8-for-in-与for-of的区别\"><a href=\"#8-for-in-与for-of的区别\" class=\"headerlink\" title=\"8.for in 与for of的区别\"></a>8.for in 与for of的区别</h2><ul>\n<li><code>for in</code>其中的参数保存的是<strong>键名</strong>，而<code>for of</code>其中的参数保存的是<strong>键值</strong>。</li>\n</ul>\n<h2 id=\"9-逻辑中断\"><a href=\"#9-逻辑中断\" class=\"headerlink\" title=\"9.逻辑中断\"></a>9.逻辑中断</h2><ul>\n<li>某些场景用来替代if-else操作，默认值</li>\n<li><code>&amp;</code>中断，左边false中断</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = false &amp;&amp; 5 //false</span><br><span class=\"line\">let a = true &amp;&amp; 5 // 5</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>||</code>中断，左边true中断</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = true || 5 // true</span><br><span class=\"line\">let a = false || 5 // 5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-原型与原型链与原型对象\"><a href=\"#10-原型与原型链与原型对象\" class=\"headerlink\" title=\"10.原型与原型链与原型对象\"></a>10.原型与原型链与原型对象</h2><p><a href=\"https://juejin.cn/post/6984678359275929637#comment\">https://juejin.cn/post/6984678359275929637#comment</a>这篇文章写的十分透彻</p>\n<h3 id=\"10-1构造函数创建实例对象过程？\"><a href=\"#10-1构造函数创建实例对象过程？\" class=\"headerlink\" title=\"10.1构造函数创建实例对象过程？\"></a>10.1构造函数创建实例对象过程？</h3><p>  1、创建新对象<br>  <br>2、将构造函数作用域赋值给新对象（this指向新对象）<br>  <br>3、执行构造函数中的代码，给实例对象添加实例属性和实例方法。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // 构造函数</span><br><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成实例</span><br><span class=\"line\">const p = new Person(&#x27;zhangsan&#x27;, 18);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2原型对象\"><a href=\"#10-2原型对象\" class=\"headerlink\" title=\"10.2原型对象\"></a>10.2原型对象</h3><p>  <code>函数</code>在创建时会生成一个<code>prototype</code>属性，该属性<code>指向一个对象</code>，这个对象就是<code>原型对象</code><br><img src=\"/images/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp\"></p>\n<h3 id=\"10-3原型链\"><a href=\"#10-3原型链\" class=\"headerlink\" title=\"10.3原型链\"></a>10.3原型链</h3><ul>\n<li>通过<code>构造函数</code>创建出的<code>实例对象</code>有个<code>_proto_</code>属性，该属性指向<code>实例对象的构造函数的原型对象</code><br><img src=\"/images/%E5%AE%9E%E4%BE%8B%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp\"><br>其实就是<code>实例的_proto_</code>指向<code>原型对象</code>,同时<code>构造函数的prototype</code>也指向<code>原型对象</code>。</li>\n<li><strong>原型链</strong>就是访问对象属性时，查找对象有没有查找的对象，没有就找<code>_proto_的原型对象（构造函数的prototype）</code>，还是没有就找<code>原型对象的_proto_查找</code>，因此形成原型链。</li>\n<li>原型链的尽头是<code>null</code></li>\n</ul>\n<h3 id=\"10-4在构造函数原型对象修改属性\"><a href=\"#10-4在构造函数原型对象修改属性\" class=\"headerlink\" title=\"10.4在构造函数原型对象修改属性\"></a>10.4在构造函数原型对象修改属性</h3><ul>\n<li>要让所有实例共享构造函数属性，添加或删改内在的属性或方法，应该在<code>构造函数的prototype（原型对象）</code>去更改。</li>\n<li>在实例对象修改<code>_proto_</code>会影响<strong>所有共享构造函数</strong>的实例对象。</li>\n</ul>\n<h3 id=\"10-5GPT的说法\"><a href=\"#10-5GPT的说法\" class=\"headerlink\" title=\"10.5GPT的说法\"></a>10.5GPT的说法</h3><p>在 JavaScript 中，每个对象都有一个原型对象（prototype），它定义了该对象的属性和方法。当访问一个对象的属性或方法时，如果该对象本身没有定义该属性或方法，则会沿着原型链向上查找，直到找到该属性或方法为止。</p>\n<p>原型链是由一系列原型对象组成的链式结构，它描述了对象之间的继承关系。每个对象都有一个原型对象，如果对象 A 的原型对象是对象 B，那么对象 A 就可以继承对象 B 中定义的属性和方法。</p>\n<p>原型对象可以通过函数的 <code>prototype</code> 属性进行访问和修改。例如，可以定义一个构造函数 <code>Person</code>，并在其原型对象上添加一个方法 <code>sayHello()</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;`)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let person = new Person(&#x27;John&#x27;)</span><br><span class=\"line\">person.sayHello() // 输出：Hello, my name is John</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>Person</code> 函数定义了一个 <code>name</code> 属性，并在其原型对象上添加了一个 <code>sayHello()</code> 方法。当创建一个 <code>Person</code> 对象时，可以通过 <code>new</code> 运算符调用 <code>Person</code> 函数，并返回一个新的对象。这个新对象的原型对象指向 <code>Person.prototype</code>，因此可以访问 <code>sayHello()</code> 方法。</p>\n<p>需要注意的是，原型对象是在对象创建时动态生成的，因此可以在运行时动态地修改原型对象。同时，原型对象是基于引用的，即多个对象可以共享同一个原型对象。这种机制不仅可以提高代码的复用性，还能够实现面向对象编程中的继承和多态等特性。</p>\n<h3 id=\"10-6为什么有原型链？\"><a href=\"#10-6为什么有原型链？\" class=\"headerlink\" title=\"10.6为什么有原型链？\"></a>10.6为什么有原型链？</h3><p>JavaScript 之所以有原型链，是因为其是一种基于<strong>原型继承</strong>的面向对象编程语言。在 JavaScript 中，<code>每个对象都有一个指向其原型的内部链接</code>，这个链接被称为原型链。</p>\n<p>当我们访问一个对象的属性或方法时，如果当前对象没有这个属性或方法，JavaScript 引擎就会去该对象的原型对象中查找是否有这个属性或方法。如果原型对象中也没有这个属性或方法，那么就会继续在原型对象的原型对象中查找，直到找到 Object.prototype 对象为止，如果还没有找到，则返回 undefined。</p>\n<p>这样的设计可以让对象之间实现继承，从而使得代码更加简洁、灵活和可重用。通过在原型对象中定义方法和属性，我们可以让所有基于该原型的对象都共享这些方法和属性，从而避免在每个对象中都定义一遍，提高了代码的复用性和效率。</p>\n<p>因此，原型链是 JavaScript 面向对象编程的一个重要特性，也是理解 JavaScript 中对象和继承机制的关键。</p>\n<h3 id=\"10-7浏览器的-prototype-是什么\"><a href=\"#10-7浏览器的-prototype-是什么\" class=\"headerlink\" title=\"10.7浏览器的[[prototype]]是什么\"></a>10.7浏览器的[[prototype]]是什么</h3><p>在JavaScript中，每个对象都有一个原型对象（即_proto_属性），它决定了对象的属性和方法。同时，每个构造函数也有一个原型对象（即prototype属性），它是通过new操作符创建的实例的原型对象。</p>\n<p>在浏览器中，对象的_proto_属性通常被称为对象的“隐式原型”（implicit prototype），它指向该对象的原型对象。而该对象的原型对象通常被称为对象的“显示原型”（explicit prototype），它是一个对象，它包含了该对象的属性和方法。</p>\n<p>具体来说，浏览器中的对象的[[prototype]]属性（即_proto_属性）指向该对象的原型对象，它是一个内部属性，通常无法直接访问。而该对象的原型对象通常是通过构造函数的prototype属性设置的，从而让该对象可以访问到构造函数中定义的属性和方法。</p>\n<p>例如，以下代码演示了在浏览器中创建对象时的[[prototype]]属性和prototype属性的关系：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个构造函数</span><br><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在构造函数的原型对象中定义一个方法</span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个Person对象</span><br><span class=\"line\">const person = new Person(&#x27;Tom&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出person对象的[[prototype]]属性</span><br><span class=\"line\">console.log(person.__proto__); // 输出：Person &#123;sayHello: ƒ, constructor: ƒ&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出person对象的构造函数</span><br><span class=\"line\">console.log(person.constructor); // 输出：ƒ Person(name) &#123;this.name = name;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用person对象的方法</span><br><span class=\"line\">person.sayHello(); // 输出：Hello, my name is Tom</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个构造函数Person，然后在它的原型对象中定义了一个方法sayHello。接着，我们使用new操作符创建了一个Person对象，并输出了它的[[prototype]]属性和constructor属性。可以看到，person对象的[[prototype]]属性指向了Person构造</p>\n<h2 id=\"11-自增的数据类型转换\"><a href=\"#11-自增的数据类型转换\" class=\"headerlink\" title=\"11.自增的数据类型转换\"></a>11.自增的数据类型转换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 =<span class=\"string\">&quot;w&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bin = <span class=\"number\">1.1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o =&#123;</span><br><span class=\"line\"> <span class=\"attr\">valueOf</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a1++;</span><br><span class=\"line\">a2++;</span><br><span class=\"line\">b1++;</span><br><span class=\"line\">bin--;</span><br><span class=\"line\">o--;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1);  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a2);  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b1);  <span class=\"comment\">//0.10000000000000009</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bin);  <span class=\"comment\">//1.1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o);   <span class=\"comment\">//-2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-闭包的理解\"><a href=\"#12-闭包的理解\" class=\"headerlink\" title=\"12.闭包的理解\"></a>12.闭包的理解</h2><p>闭包是指在函数内部定义的函数可以访问函数外部的变量，即使在函数外部这些变量已经不可访问。闭包通常由一个函数和在该函数内部定义的另一个函数组成，在内部函数中可以访问外部函数的变量和参数，即使在外部函数执行完毕后，这些变量和参数仍然可以被内部函数访问。</p>\n<p>闭包的概念可能比较抽象，以下是一个例子来帮助理解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function outer() &#123;</span><br><span class=\"line\">  let count = 0</span><br><span class=\"line\">  function inner() &#123;</span><br><span class=\"line\">    count++</span><br><span class=\"line\">    console.log(count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return inner</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let fn = outer()</span><br><span class=\"line\">fn() // 1</span><br><span class=\"line\">fn() // 2</span><br><span class=\"line\">fn() // 3</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，函数 <code>outer</code> 内部定义了一个变量 <code>count</code> 和一个函数 <code>inner</code>，<code>inner</code> 函数可以访问 <code>outer</code> 函数中的变量 <code>count</code>。<code>outer</code> 函数最终返回 <code>inner</code> 函数，并将其赋值给变量 <code>fn</code>。</p>\n<p>当执行 <code>fn()</code> 的时候，实际上是在执行 <code>inner()</code> 函数，因此每次执行 <code>fn()</code> 都会输出 <code>count</code> 变量的值，并将其自增。由于 <code>count</code> 变量是在 <code>outer</code> 函数中定义的，因此在 <code>inner</code> 函数中也可以访问和修改 <code>count</code> 变量的值，即使 <code>outer</code> 函数已经执行完毕。</p>\n<p>这个例子就展示了一个闭包的具体实现：内部函数 <code>inner</code> 可以访问外部函数 <code>outer</code> 中的变量 <code>count</code>，即使 <code>outer</code> 函数执行完毕后这个变量仍然可以被访问和修改。闭包可以用于实现一些高级的 JavaScript 技术，例如柯里化、函数式编程、模块化等。</p>\n<h2 id=\"13-函数式编程\"><a href=\"#13-函数式编程\" class=\"headerlink\" title=\"13.函数式编程\"></a>13.函数式编程</h2><p>函数式编程是一种编程范式，它是一种程序设计的风格，强调函数的使用来构建软件应用程序。它是一种声明式编程，而不是命令式编程。在函数式编程中，程序由许多小的、可组合的函数组成，每个函数都有一个明确定义的输入和输出，不会修改函数外的状态。函数式编程的目标是编写简单、可读、可维护和可扩展的代码。</p>\n<p>函数式编程的一些特征包括：</p>\n<ul>\n<li>纯函数：函数的输出仅取决于输入，而不依赖于任何外部状态或副作用。</li>\n<li>不可变性：数据不可被修改，一旦创建就不能再改变，因此任何对数据的修改都会创建一个新的数据对象。</li>\n<li>高阶函数：函数可以作为参数传递给其他函数，也可以返回其他函数。</li>\n<li>延迟执行：表达式的求值被延迟到需要使用它的时候。</li>\n<li>函数组合：将函数组合起来构建更复杂的函数。</li>\n</ul>\n<p>函数式编程有许多优点，例如代码简洁、可读性高、易于测试、可维护性强、并发性好等。它在处理大规模数据、并发编程和分布式系统方面具有巨大的优势。在 JavaScript 中，函数式编程的特征可以通过使用高阶函数和内置的 <code>Array</code> 方法如 <code>map()</code>、<code>filter()</code>、<code>reduce()</code> 等来实现。</p>\n<h2 id=\"14-开源项目怎么学习\"><a href=\"#14-开源项目怎么学习\" class=\"headerlink\" title=\"14.开源项目怎么学习\"></a>14.开源项目怎么学习</h2><p>学习开源项目需要一定的技能和经验，以下是一些建议：</p>\n<ol>\n<li>了解项目：在探索一个新的开源项目之前，应该先了解项目的背景、目的和技术栈等信息。这可以通过项目的文档、代码库、社区和邮件列表等渠道来获取。</li>\n<li>安装和运行代码：安装和运行代码是了解项目的一个重要部分。这可以通过阅读项目的文档和代码库来完成。如果遇到问题，可以查看项目的社区和邮件列表，也可以尝试在开发者社区中提问。</li>\n<li>阅读代码：阅读代码是了解项目的另一个重要部分。可以通过阅读项目的代码库来了解代码的结构、功能和实现细节。此外，还可以使用调试工具来了解代码的执行过程。</li>\n<li>参与社区：参与社区是学习开源项目的另一个重要部分。可以通过参加社区讨论、提供反馈和贡献代码等方式来参与项目。这可以帮助学习项目，并建立联系和信任。</li>\n<li>贡献代码：贡献代码是学习开源项目的最终目标之一。可以通过提供修复错误、新增功能、重构代码等方式来贡献代码。这可以帮助学习项目的实现和贡献开源社区。</li>\n</ol>\n<p>总之，学习开源项目需要花费一定的时间和精力。一旦掌握了这些技巧和经验，就可以更轻松地了解和贡献开源项目。</p>\n<h3 id=\"源代码的阅读\"><a href=\"#源代码的阅读\" class=\"headerlink\" title=\"源代码的阅读\"></a>源代码的阅读</h3><p>阅读源代码可以帮助深入了解项目的实现细节和结构，以下是一些阅读源代码的建议：</p>\n<ol>\n<li>了解项目结构：在阅读代码之前，应该先了解项目的目录结构和文件组织方式。这可以帮助理解代码中各个模块和组件之间的关系和依赖关系。</li>\n<li>阅读文档：阅读项目的文档可以帮助了解项目的功能、设计和代码结构。这可以帮助理解代码的目的和实现细节，减少阅读代码的时间和难度。</li>\n<li>阅读代码注释：阅读代码注释可以帮助理解代码的实现细节和目的。注释应该提供有关代码结构、函数用途、变量定义等方面的信息。</li>\n<li>使用调试工具：使用调试工具可以帮助了解代码的执行过程和调用关系。可以使用调试器、日志和断点来追踪代码的执行路径和状态变化。</li>\n<li>运行示例代码：运行示例代码可以帮助理解代码的实现和功能。可以尝试运行和调试示例代码，并尝试修改代码和观察结果。</li>\n<li>尝试重构代码：尝试重构代码可以帮助理解代码的结构和逻辑。可以尝试删除冗余代码、合并函数或变量、提取公共代码块等操作，以改善代码的可读性和维护性。</li>\n</ol>\n<p>总之，在阅读源代码时，应该有一个系统性的方法来了解项目的结构和实现细节。可以阅读文档和代码注释，使用调试工具和运行示例代码，并尝试重构代码以提高代码的可读性和维护性。</p>\n<h2 id=\"15-魔术字符串\"><a href=\"#15-魔术字符串\" class=\"headerlink\" title=\"15. 魔术字符串\"></a>15. 魔术字符串</h2><p>魔术字符串是指在代码中多次出现的、与代码实现相关的、没有被封装成常量或变量的字符串。这些字符串通常被直接硬编码在代码中，而没有使用变量或常量的形式来表示。</p>\n<p>魔术字符串有以下几个问题：</p>\n<ol>\n<li>可读性差：魔术字符串通常没有描述性的名称，使用它们的代码难以理解和阅读。</li>\n<li>维护性差：魔术字符串存在于代码的多个地方，如果需要修改它们，就需要在多个地方进行修改，增加了代码的维护成本。</li>\n<li>可重用性差：魔术字符串通常不能被重用，如果需要在代码的不同地方使用相同的字符串，就需要重复硬编码这些字符串，增加了代码的冗余。</li>\n</ol>\n<p>为了解决这些问题，可以将魔术字符串封装成常量或变量。这样可以提高代码的可读性、维护性和可重用性。</p>\n<p>例如，下面的代码中使用了魔术字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getUserRole(user) &#123;</span><br><span class=\"line\">  if (user.role === &#x27;admin&#x27;) &#123;</span><br><span class=\"line\">    return &#x27;admin&#x27;;</span><br><span class=\"line\">  &#125; else if (user.role === &#x27;manager&#x27;) &#123;</span><br><span class=\"line\">    return &#x27;manager&#x27;;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return &#x27;guest&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以将魔术字符串封装成常量形式，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ROLE_ADMIN = &#x27;admin&#x27;;</span><br><span class=\"line\">const ROLE_MANAGER = &#x27;manager&#x27;;</span><br><span class=\"line\">const ROLE_GUEST = &#x27;guest&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function getUserRole(user) &#123;</span><br><span class=\"line\">  if (user.role === ROLE_ADMIN) &#123;</span><br><span class=\"line\">    return ROLE_ADMIN;</span><br><span class=\"line\">  &#125; else if (user.role === ROLE_MANAGER) &#123;</span><br><span class=\"line\">    return ROLE_MANAGER;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return ROLE_GUEST;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样可以提高代码的可读性、维护性和可重用性，减少代码中的冗余和错误。</p>\n<h2 id=\"16-对象的计算属性\"><a href=\"#16-对象的计算属性\" class=\"headerlink\" title=\"16. 对象的计算属性\"></a>16. 对象的计算属性</h2><h3 id=\"16-1-计算属性\"><a href=\"#16-1-计算属性\" class=\"headerlink\" title=\"16.1 计算属性\"></a>16.1 计算属性</h3><p>在 JavaScript 中，对象的属性名可以是字符串或 Symbol 类型。在这个例子中，<code>val.name</code> 是一个字符串类型，而我们需要将它作为属性名添加到对象中。因为对象属性名需要满足标识符的命名规则，所以我们需要将 <code>val.name</code> 包含在方括号中，将它作为属性名添加到对象中。这种方式被称为计算属性名，它可以让我们在对象字面量中使用表达式作为属性名。</p>\n<p>例如，如果我们想要使用一个变量作为属性名，就可以使用计算属性名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const propName = &#x27;name&#x27;;</span><br><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  [propName]: &#x27;Alice&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(person); // &#123; name: &#x27;Alice&#x27; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>[propName]</code> 就是一个计算属性名，它会将 <code>propName</code> 的值作为属性名添加到对象中。</p>\n<p>在我们的代码中，<code>&#123;[val.name]: val.age&#125;</code> 就是一个计算属性名，它会将 <code>val.name</code> 的值作为属性名添加到对象中，同时将 <code>val.age</code> 的值作为属性值添加到对象中。</p>\n<h3 id=\"16-2对象的键值类型\"><a href=\"#16-2对象的键值类型\" class=\"headerlink\" title=\"16.2对象的键值类型\"></a>16.2对象的键值类型</h3><p>在 JavaScript 中，对象的键值可以是字符串类型或符号类型。</p>\n<p>通常，我们使用字符串作为对象的键值，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;John&#x27;,</span><br><span class=\"line\">  age: 30,</span><br><span class=\"line\">  &#x27;last name&#x27;: &#x27;Doe&#x27;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，对象 <code>obj</code> 中的键值分别是 <code>name</code>、<code>age</code> 和 <code>last name</code>，它们都是字符串类型。</p>\n<p>然而，在ES6引入符号类型（Symbol）之后，我们也可以使用符号作为对象的键值，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mySymbol = Symbol(&#x27;mySymbol&#x27;);</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  [mySymbol]: &#x27;Hello World&#x27;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们创建了一个符号 <code>mySymbol</code>，然后将其作为对象 <code>obj</code> 的键值，键名用方括号括起来。符号类型的键值在一些特定场景中很有用，例如在定义私有属性或者避免键名冲突时。需要注意的是，符号类型的键值是唯一的，它们不会与其他键名冲突。</p>\n<h3 id=\"16-3变量名作为键名\"><a href=\"#16-3变量名作为键名\" class=\"headerlink\" title=\"16.3变量名作为键名\"></a>16.3变量名作为键名</h3><p>可以，JavaScript 中对象的键名可以使用变量来动态生成。</p>\n<p>例如，可以使用变量作为对象的键名，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const key = &#x27;name&#x27;;</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  [key]: &#x27;John&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.name); // 输出 &quot;John&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们使用变量 <code>key</code> 来定义对象 <code>obj</code> 中的键名，这个键名是动态生成的。使用方括号语法，将变量 <code>key</code> 包裹在其中，就可以将其解析为一个字符串，作为对象的键名。</p>\n<p>需要注意的是，由于 JavaScript 对象的键名只能是字符串类型或符号类型，因此变量 <code>key</code> 中存储的值必须是字符串类型或符号类型，否则会导致语法错误。</p>\n<h2 id=\"17-Object-defineProperty\"><a href=\"#17-Object-defineProperty\" class=\"headerlink\" title=\"17. Object.defineProperty\"></a>17. Object.defineProperty</h2><p>Object.defineProperty是一个内建对象函数，它用于给对象定义属性。它允许你定义一个对象的新属性或修改对象的已有属性，并且可以控制一些属性的行为，例如可写、可枚举和可配置等。</p>\n<p>Object.defineProperty的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>obj：要定义属性的对象。</li>\n<li>prop：需要定义或修改的属性的名称。</li>\n<li>descriptor：一个对象，用来描述这个属性的特性。</li>\n</ul>\n<p>descriptor参数可以包含以下属性：</p>\n<ul>\n<li>value：属性的值，默认为undefined。</li>\n<li>writable：布尔值，表示属性是否可写。默认false。</li>\n<li>enumerable：布尔值，表示属性是否可枚举。默认false。</li>\n<li>configurable：布尔值，表示可配置性。默认false。</li>\n<li>get：取值函数，当访问该属性时，会调用此函数。默认为undefined。</li>\n<li>set：赋值函数，当属性值改变时，会调用此函数。默认为undefined。</li>\n</ul>\n<p>举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加普通属性</span><br><span class=\"line\">obj.a = 123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义属性方式一</span><br><span class=\"line\">Object.defineProperty(obj, &#x27;b&#x27;, &#123;</span><br><span class=\"line\">  value: 456,</span><br><span class=\"line\">  writable: true,</span><br><span class=\"line\">  enumerable: true,</span><br><span class=\"line\">  configurable: true</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义属性方式二</span><br><span class=\"line\">let c = 789;</span><br><span class=\"line\">Object.defineProperty(obj, &#x27;c&#x27;, &#123;</span><br><span class=\"line\">  get() &#123;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set(newValue) &#123;</span><br><span class=\"line\">    console.log(`New value of c is: $&#123;newValue&#125;`)</span><br><span class=\"line\">    c = newValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  enumerable: true,</span><br><span class=\"line\">  configurable: true</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码将obj对象添加了三个属性，其中b和c使用了Object.defineProperty进行定义，b是一个普通的数据属性，而c具有getter和setter方法，在读取和修改c属性时会触发这两个方法，并输出日志。</p>\n<p>需要注意的是，使用Object.defineProperty定义的属性有些限制：</p>\n<ol>\n<li>__proto__属性不能被定义，必须使用Object.getPrototypeOf()方法访问。</li>\n<li>可以使用Object.getOwnPropertyDescriptors()方法获取到一个属性的完整描述符，并复制到新对象中。</li>\n<li>可以在同一对象上定义多个同名属性。会覆盖之前定义的。</li>\n<li>原型上的属性在遍历时不会出现。只能定义可枚举或不可枚举的属性。</li>\n<li>不能将数据属性定义为不可配置后再将其转换为访问器属性或反之。</li>\n<li>不能将一个访问器属性定义为可写或可配置的，或者同时修改一个访问器描述符的值和getter或setter的描述符的值。</li>\n</ol>\n<p>综上，要使用Object.defineProperty需谨慎，需要清楚地了解其限制和使用场景。在实际开发中，我们通常使用ES6引入的class语法糖和语法规范中的getter和setter来更方便地操作对象的属性。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  // 使用语法糖定义私有变量_name</span><br><span class=\"line\">  #_name;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.#_name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 定义公共的getter和setter访问私有变量_name</span><br><span class=\"line\">  get name() &#123;</span><br><span class=\"line\">    return this.#_name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  set name(newName) &#123;</span><br><span class=\"line\">    this.#_name = newName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&#x27;Tom&#x27;);</span><br><span class=\"line\">console.log(person.name); // &quot;Tom&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">person.name = &#x27;Jerry&#x27;</span><br><span class=\"line\">console.log(person.name); // &quot;Jerry&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码演示了如何使用class语法糖来简单地定义一个Person类，并使用getter和setter访问私有变量。UIColor、UIFont等常见第三方库也大量采用了这种语法糖的应用，代码更加清新易读。</p>\n<p>通过语法糖和规范进行属性定义的好处是，不用过多考虑对象属性的具体实现和私有特性，从而提高代码的可读性和可维护性。</p>\n<h2 id=\"19-Vue什么是响应式数据绑定\"><a href=\"#19-Vue什么是响应式数据绑定\" class=\"headerlink\" title=\"19.Vue什么是响应式数据绑定\"></a>19.Vue什么是响应式数据绑定</h2><p>在Vue中，响应式的数据绑定是一种机制，它允许数据与视图之间建立实时的关联，当数据发生变化时，视图会自动更新以反映数据的最新状态。这种机制允许开发者以一种更加声明式和简单的方式进行数据处理和组件化开发。</p>\n<p>Vue中的响应式数据绑定是通过Vue实例中的数据对象，以及Vue组件中的props和data对象来实现的。结合Vue的模板系统和组件化开发机制，开发者可以以一种容易理解、易于维护的方式进行应用程序开发。</p>\n<p>Vue是如何实现响应式数据绑定的呢？Vue在使用数据对象时，会将数据对象转换为getter/setter形式，当数据发生变化时，setter函数会被触发，并通知Vue框架数据发生了变化。Vue会自动检测数据对象的变化，并将数据的变化反映在相关的视图上。这种机制允许我们在Vue中声明式地描述我们的应用状态，而不需要手动更新DOM，从而实现更少的模版代码和更少的样板代码。</p>\n<p>例如，在Vue模板中，可以通过v-model指令绑定到表单元素上，实现双向数据绑定：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input v-model=&quot;message&quot; placeholder=&quot;Enter your message&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &#x27;Hello Vue!&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，v-model指令允许我们将input元素与message变量绑定起来。当input元素的值发生变化时，Vue会自动将变化的内容赋值给message变量，当message变量发生变化时，Vue会自动更新视图以反映数据的最新状态。这就是Vue响应式的数据绑定机制。</p>\n<h2 id=\"20-Vue生命周期流程\"><a href=\"#20-Vue生命周期流程\" class=\"headerlink\" title=\"20. Vue生命周期流程\"></a>20. Vue生命周期流程</h2><p>在 Vue.js 中，每个组件实例都会经历一系列的生命周期过程。这些生命周期过程由一系列的钩子函数组成，这些钩子函数可以在不同的生命周期步骤中执行代码逻辑，以响应特定的事件或执行必要的操作。</p>\n<p>以下是 Vue.js 组件生命周期的流程：</p>\n<ol>\n<li>创建阶段</li>\n</ol>\n<ul>\n<li><code>beforeCreate</code>：在实例初始化之后，数据观测（data observer）和事件配置之前被调用，此时 <code>vue</code> 实例的挂载阶段还没有开始。</li>\n<li><code>created</code>：实例已经完全创建，属性和方法都已经完成配置。需要注意的是此阶段不能更新属性和 DOM，此时 <code>$el</code> 还不存在。</li>\n</ul>\n<ol>\n<li>挂载阶段</li>\n</ol>\n<ul>\n<li><code>beforeMount</code>：在挂载开始之前被调用。此时 <code>vue</code> 实例的 <code>$el</code> 和 <code>data</code> 都已经初始化，但并未创建真正的 <code>DOM</code> 节点。</li>\n<li><code>mounted</code>：在实例挂载到 <code>DOM</code> 后被调用。此时 <code>vue</code> 实例已经构建完成，可以操作 <code>DOM</code>，初始化发生在该钩子内部。</li>\n</ul>\n<ol>\n<li>更新阶段</li>\n</ol>\n<ul>\n<li><code>beforeUpdate</code>：在响应式数据发生改变时，虚拟 <code>DOM</code> 重新渲染和打补丁之前被调用。此时可以进行必要的更新准备工作。</li>\n<li><code>updated</code>：当虚拟 <code>DOM</code> 重新渲染和打补丁之后调用。假如要对 <code>DOM</code> 进行更改会触发该钩子，注意不要在此修改数据，会导致无限循环。</li>\n</ul>\n<ol>\n<li>销毁阶段</li>\n</ol>\n<ul>\n<li><code>beforeDestroy</code>：实例销毁之前调用。此时实例仍然完全可用，可以进行必要的清理工作，如清除定时器、解绑事件等等。</li>\n<li><code>destroyed</code>：实例销毁之后调用。调用该钩子之后，vue 实例以及所有的事件监听器会被移除，所有与实例相关的指令、过滤器等也会被销毁。</li>\n</ul>\n<ol>\n<li>激活与停用阶段</li>\n</ol>\n<ul>\n<li><code>activated</code>: 被 keep-alive 缓存的组件激活时调用</li>\n<li><code>deactivated</code>: 被 keep-alive 缓存的组件停用时调用</li>\n</ul>\n<p>上述的生命周期钩子用于对应不同的组件状态，并且也为开发者提供了丰富的扩展能力，使用这些钩子函数，开发者可以在不同的状态阶段下进行相应的操作或处理业务逻辑。</p>\n<img src=\"./images/生命周期.png\">\n\n<hr>\n<p>在整个 Vue.js 组件生命周期的过程中，可以看到一些重要的时机：</p>\n<ul>\n<li>在 <code>beforeCreate</code> 钩子函数中，实例已经完成了 <code>data</code> 对象的初始化，但还没有完成 <code>$el</code> 和事件的初始化。</li>\n<li>在 <code>created</code> 钩子函数中，除了可以访问 <code>$data</code> 和 <code>$el</code> 对象之外，其他的一切都需要等到挂载阶段才能访问到。</li>\n<li>在 <code>beforeMount</code> 钩子函数中，Vue.js 将开始创建组件的真实 <code>DOM</code>。此时，组件的 <code>$el</code> 属性已经存在，但是还没有挂载到实际的页面上。</li>\n<li>在 <code>mounted</code> 钩子函数中，Vue.js 完成了组件的挂载过程，并将组件的 <code>DOM</code> 添加到页面中。</li>\n<li>在 <code>beforeUpdate</code> 钩子函数中，响应式数据发生了变化，但是尚未对组件进行重新渲染。</li>\n<li>在 <code>updated</code> 钩子函数中，组件完成了重新渲染，并更新了 <code>DOM</code>。</li>\n<li>在 <code>beforeDestroy</code> 钩子函数中，组件即将被销毁，但仍然可以访问 <code>$data</code> 和 <code>$el</code> 等属性。</li>\n<li>在 <code>destroyed</code> 钩子函数中，组件已经被销毁，所有的事件监听器和指令等都已经被移除。</li>\n</ul>\n<hr>\n<p>下面是一个简单的 Vue.js 组件项目，展示了 Vue.js 生命周期的完整流程及各个时机绑定的钩子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;root&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;updateMessage&quot;&gt;Update Message&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &#x27;Hello, Vue.js!&#x27;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeCreate() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeCreate&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(&#x27;created&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeMount&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    console.log(&#x27;mounted&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUpdate() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeUpdate&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated() &#123;</span><br><span class=\"line\">    console.log(&#x27;updated&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeDestroy&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    console.log(&#x27;destroyed&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    updateMessage() &#123;</span><br><span class=\"line\">      this.message = &#x27;Updated message!&#x27;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了一个简单的组件，其中包含一个 <code>message</code> 数据属性和一个按钮，点击按钮之后可以更新 <code>message</code> 的值。在组件中，我们绑定了 Vue.js 生命周期中的所有钩子函数，并通过控制台输出相应的消息来表示当前执行的生命周期钩子。</p>\n<p>在组件的生命周期中，当组件被创建时，Vue.js 会依次触发 <code>beforeCreate</code> 和 <code>created</code> 钩子函数，在 <code>created</code> 钩子函数中可以访问组件 <code>data</code> 数据和 <code>el</code> 元素，但此时组件尚未挂载到页面中。接下来，当 Vue.js 开始挂载组件时，会依次触发 <code>beforeMount</code> 和 <code>mounted</code> 钩子函数，在 <code>mounted</code> 钩子函数中组件已经被挂载到页面中，此时可以对 <code>this.$el</code> 进行相关操作。</p>\n<p>在组件挂载后，如果组件中的 <code>data</code> 有变化，那么 Vue.js 会依次触发 <code>beforeUpdate</code> 和 <code>updated</code> 钩子函数，分别表示数据更新前后的状态。在所有的钩子函数执行完成后，Vue.js 会在组件销毁时依次触发 <code>beforeDestroy</code> 和 <code>destroyed</code> 钩子函数，分别表示销毁前和销毁后的状态，这个时候应该清除所有的事件监听器和定时器，否则可能会造成内存泄漏的问题。</p>\n<p>通过这个示例，可以更好地理解 Vue.js 的生命周期过程，并注意在不同的生命周期阶段下执行不同的操作，从而使组件功能更加完善和稳定。</p>\n<h2 id=\"21-箭头函数的带大括号与不带大括号的区别\"><a href=\"#21-箭头函数的带大括号与不带大括号的区别\" class=\"headerlink\" title=\"21.箭头函数的带大括号与不带大括号的区别\"></a>21.箭头函数的带大括号与不带大括号的区别</h2><p><code>(x) =&gt; x + 1</code> 与 <code>(x) =&gt; &#123;x + 1&#125;</code> 的区别是：</p>\n<ul>\n<li><code>(x) =&gt; x + 1</code> 是一个箭头函数，它接受一个参数 <code>x</code>，返回 <code>x+1</code> 的结果。</li>\n<li><code>(x) =&gt; &#123;x + 1&#125;</code> 也是一个箭头函数，但是它使用了花括号 <code>&#123;&#125;</code>，其中包含了一个语句 <code>x + 1</code>。由于花括号中包含语句而非表达式，因此需要使用 <code>return</code> 语句将结果返回。</li>\n</ul>\n<p>具体来说，<code>(x) =&gt; &#123;x + 1&#125;</code> 不会直接返回 <code>x + 1</code> 的结果，而是返回 <code>undefined</code>，因为花括号中并没有 <code>return</code> 语句将结果返回。因此需要将其改写为 <code>(x) =&gt; &#123;return x + 1;&#125;</code> 或 <code>function(x)&#123;return x + 1;&#125;</code> 才能实现与 <code>(x) =&gt; x + 1</code> 相同的功能。</p>\n<p>综上，<code>(x) =&gt; x + 1</code> 是一个返回表达式的箭头函数，而 <code>(x) =&gt; &#123;x + 1&#125;</code> 则是一个返回 <code>undefined</code> 的箭头函数，需要使用 <code>return</code> 语句明确返回结果。</p>\n<h2 id=\"22-依赖关系\"><a href=\"#22-依赖关系\" class=\"headerlink\" title=\"22.依赖关系\"></a>22.依赖关系</h2><p>依赖关系指的是一个模块（类、函数、对象等）依赖于其他模块，即它使用了其他模块中的功能或数据。这种依赖关系可以表现为代码中的函数调用、对象引用、类继承等形式。</p>\n<p>在软件开发中，模块化是一种常见的编程思想，它将一个大型的应用程序拆分成多个小的模块，每个模块都有自己的特定功能和职责。这种模块化的设计可以提高代码的可读性、可维护性和可扩展性。</p>\n<p>然而，模块之间的依赖关系也可能会导致一些问题。例如，如果一个模块依赖于其他模块中的某个函数或对象，而这个函数或对象被删除或修改了，那么依赖于它的模块也需要进行相应的修改。如果依赖关系过于复杂，这种修改可能会涉及到多个模块，从而增加了代码的维护难度。</p>\n<p>因此，在软件开发中，需要注意模块之间的依赖关系，避免出现过于复杂的依赖关系。一些常见的减少依赖关系的方法包括：</p>\n<ul>\n<li><p>使用接口或抽象类定义模块之间的通信接口，从而降低了模块之间的耦合度。</p>\n</li>\n<li><p>使用依赖注入（Dependency Injection）等技术，将依赖关系的控制权交给容器，从而减少了模块之间的直接依赖关系。</p>\n</li>\n<li><p>使用事件驱动编程（Event-Driven Programming）等技术，通过事件的发布和订阅来解耦模块之间的依赖关系。</p>\n</li>\n<li><p>以下是一个简单的例子，展示了模块之间的依赖关系：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个模块A</span><br><span class=\"line\">const moduleA = &#123;</span><br><span class=\"line\">  data: &#x27;data from module A&#x27;,</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    console.log(this.data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个模块B，依赖于模块A</span><br><span class=\"line\">const moduleB = &#123;</span><br><span class=\"line\">  data: &#x27;data from module B&#x27;,</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    console.log(this.data);</span><br><span class=\"line\">    moduleA.getData(); // 调用模块A的方法</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在模块B中调用模块A的方法</span><br><span class=\"line\">moduleB.getData(); // 输出：data from module B 和 data from module A</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，模块B依赖于模块A，即在模块B中使用了模块A中的方法。通过调用模块B的getData方法，可以看到它先输出了自己的数据，然后再调用了模块A的getData方法，输出了模块A的数据。这种依赖关系可以通过控制模块之间的通信接口、使用依赖注入等方式进行优化和管理。</p>\n</li>\n</ul>\n<h2 id=\"23-回调函数\"><a href=\"#23-回调函数\" class=\"headerlink\" title=\"23.回调函数\"></a>23.回调函数</h2><p>  回调函数是一种特殊的函数，它作为参数传递给另一个函数，并在该函数执行完毕后被调用。回调函数通常用于异步编程中，例如在处理网络请求、读取文件、执行数据库操作等情况下，可以使用回调函数等待操作完成后再执行回调函数。</p>\n<p>  回调函数的使用方法与普通函数类似，只需要将函数名作为参数传递给另一个函数即可。例如，以下代码演示了在JavaScript中使用回调函数的基本方法：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个异步函数，接受一个回调函数参数</span><br><span class=\"line\">function asyncFunction(callback) &#123;</span><br><span class=\"line\">  // 模拟异步操作</span><br><span class=\"line\">  setTimeout(function() &#123;</span><br><span class=\"line\">    console.log(&#x27;Async operation completed.&#x27;);</span><br><span class=\"line\">    callback(); // 执行回调函数</span><br><span class=\"line\">  &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个回调函数</span><br><span class=\"line\">function callbackFunction() &#123;</span><br><span class=\"line\">  console.log(&#x27;Callback function executed.&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用异步函数并传入回调函数</span><br><span class=\"line\">asyncFunction(callbackFunction);</span><br></pre></td></tr></table></figure>\n\n<p>  在这个例子中，我们定义了一个异步函数<code>asyncFunction</code>，它接受一个回调函数<code>callback</code>作为参数。在异步函数中，我们使用<code>setTimeout</code>方法模拟了一个异步操作，并在操作完成后执行了回调函数。同时，我们也定义了一个回调函数<code>callbackFunction</code>，它会在异步操作完成后被调用。最后，我们通过调用异步函数并传入回调函数的方式，实现了在异步操作完成后执行回调函数的效果。</p>\n<p>  回调函数能回调的原因是因为在JavaScript中，函数也是一种数据类型，可以被作为参数传递给其他函数。当我们将一个函数作为参数传递给另一个函数时，实际上是将这个函数的引用传递给了另一个函数。在另一个函数中，我们可以通过这个函数的引用来调用它并执行它。因此，在使用回调函数时，我们可以将一个函数作为参数传递给另一个函数</p>\n<p>，在异步操作完成后再执行这个函数。这种方式可以避免在异步操作中阻塞代码执行，提高了代码的效率和可读性。</p>\n<p>总之，回调函数是一种常见的编程技术，在异步编程中广泛应用。使用回调函数可以避免代码阻塞，提高代码的效率和可读性。同时，回调函数也是一种函数类型，可以被作为参数传递给其他函数，并在其他函数中执行。</p>\n<h3 id=\"22-1更简单的例子\"><a href=\"#22-1更简单的例子\" class=\"headerlink\" title=\"22.1更简单的例子\"></a>22.1更简单的例子</h3><p>以下是一个简单的例子，演示了在JavaScript中使用回调函数的基本方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接受一个数字参数和一个回调函数参数</span><br><span class=\"line\">function square(num, callback) &#123;</span><br><span class=\"line\">  const result = num * num;</span><br><span class=\"line\">  callback(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个回调函数</span><br><span class=\"line\">function printResult(result) &#123;</span><br><span class=\"line\">  console.log(&quot;The result is: &quot; + result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用square函数并传入回调函数</span><br><span class=\"line\">square(5, printResult); // 输出：The result is: 25</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>square</code>函数，它接受一个数字参数和一个回调函数参数。在函数中，我们计算了数字的平方，并将结果传递给回调函数。同时，我们也定义了一个回调函数<code>printResult</code>，它会在<code>square</code>函数执行完毕后被调用。最后，我们通过调用<code>square</code>函数并传入回调函数的方式，实现了在计算完成后输出结果的效果。</p>\n<hr>\n<p>以下是一个使用回调函数的简单例子：</p>\n<p>function add(a, b, callback) {<br>  var result = a + b;<br>  callback(result);<br>}</p>\n<p>function display(result) {<br>  console.log(“The result is “ + result);<br>}</p>\n<p>add(2, 3, display);<br>在这个例子中，我们定义了一个add函数，它接受两个参数a和b，并在它们上执行加法操作。add函数还接受第三个参数callback，它是一个回调函数。</p>\n<p>在add函数内部，我们首先计算出结果，然后将其作为参数传递给回调函数callback。在这个例子中，我们将display函数作为回调函数传递给add函数。</p>\n<p>display函数将结果作为参数打印到控制台上。</p>\n<p>最后，我们调用add函数并传递两个数字和回调函数作为参数。当add函数完成计算时，它将调用回调函数display，并将结果作为参数传递给它。display函数将结果打印到控制台上。</p>\n<h3 id=\"22-2函数可以被传递\"><a href=\"#22-2函数可以被传递\" class=\"headerlink\" title=\"22.2函数可以被传递\"></a>22.2函数可以被传递</h3><p>回调函数能够回调的原因在于JavaScript中的函数是一等公民，也就是说，函数可以像其他数据类型一样被传递、返回、存储等。在JavaScript中，函数不仅可以被定义和调用，还可以作为参数传递给另一个函数或作为另一个函数的返回值。</p>\n<p>在异步编程中，我们通常需要在某个操作完成后执行某些代码，但是由于JavaScript是单线程执行的，如果在操作完成前执行这些代码，会导致程序阻塞。为了解决这个问题，我们可以将这些代码封装成一个函数，然后将这个函数作为回调函数传递给异步操作。当异步操作完成后，系统会自动调用这个回调函数，以执行我们需要执行的代码。</p>\n<p>回调函数的形式参数通常为函数类型，当异步操作完成后，将会调用这个函数，并将异步操作的结果作为参数传递给这个函数。这样，我们就可以在异步操作完成后使用异步操作的结果进行后续操作。因此，回调函数的能够回调的原因在于函数是一等公民，可以作为参数传递，以及JavaScript的事件循环机制。</p>\n<h2 id=\"23-set-与对象的区别\"><a href=\"#23-set-与对象的区别\" class=\"headerlink\" title=\"23.set 与对象的区别\"></a>23.set 与对象的区别</h2><p>在JavaScript中，<code>set</code>和对象（<code>object</code>）是两种不同的数据类型，它们具有不同的特点和用途。</p>\n<p><code>Set</code>是ES6中新增的一种集合类型，它类似于数组，但是具有以下特点：</p>\n<ul>\n<li><code>Set</code>中的元素是唯一的，不会重复；</li>\n<li><code>Set</code>中的元素是无序的，不能通过下标来访问；</li>\n<li><code>Set</code>中的元素可以是任何数据类型，包括基本类型和对象。</li>\n</ul>\n<p>在<code>Set</code>中，添加重复元素会被自动忽略，因此<code>Set</code>通常被用于去重或者判断元素是否存在等场景。</p>\n<p>对象是JavaScript中的一种复合数据类型，它由一组属性（<code>key-value</code>对）组成，每个属性都有一个唯一的键和对应的值，可以是基本类型或者其他对象。对象可以通过键来访问和修改属性的值，因此对象通常被用于存储和管理复杂的数据结构。</p>\n<p>总之，<code>Set</code>和对象是两种不同的数据类型，它们具有不同的特点和用途。<code>Set</code>通常被用于去重或者判断元素是否存在等场景，而对象通常被用于存储和管理复杂的数据结构。</p>\n<h2 id=\"24-类与构造函数的区别\"><a href=\"#24-类与构造函数的区别\" class=\"headerlink\" title=\"24.类与构造函数的区别\"></a>24.类与构造函数的区别</h2><h3 id=\"24-1不同的对象创建方式\"><a href=\"#24-1不同的对象创建方式\" class=\"headerlink\" title=\"24.1不同的对象创建方式\"></a>24.1不同的对象创建方式</h3><p>类（Class）和构造函数（Constructor）是两种不同的对象创建方式，它们具有不同的特点和用途。</p>\n<p>构造函数是一种用于创建对象的函数，它使用<code>new</code>关键字来创建对象，并且可以接受参数来初始化对象的属性。构造函数通常通过<code>this</code>关键字来引用当前对象的属性和方法，同时也可以通过原型链来实现方法的继承。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&quot;Alice&quot;, 20);</span><br><span class=\"line\">person.sayHello(); // 输出：Hello, my name is Alice, and I&#x27;m 20 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个构造函数<code>Person</code>，用于创建<code>Person</code>对象。构造函数接受两个参数<code>name</code>和<code>age</code>，用于初始化对象的属性。然后，我们通过给<code>Person.prototype</code>添加方法的方式来定义<code>sayHello</code>方法，并将它继承给<code>Person</code>对象。最后，我们创建了一个<code>Person</code>对象，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>类是ES6中新增的一种对象创建方式，它使用<code>class</code>关键字来定义类，并且使用<code>new</code>关键字来创建对象。类中包含了构造函数和实例方法，用于初始化对象的属性和定义对象的行为。类也可以通过继承来实现方法的复用和扩展。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&quot;Alice&quot;, 20);</span><br><span class=\"line\">person.sayHello(); // 输出：Hello, my name is Alice, and I&#x27;m 20 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们使用<code>class</code>关键在这个例子中，我们使用<code>class</code>关键字定义了一个名为<code>Person</code>的类。类中包含了一个构造函数<code>constructor</code>和一个实例方法<code>sayHello</code>。构造函数用于初始化对象的属性，实例方法用于定义对象的行为。在类的内部，可以通过<code>this</code>关键字引用当前对象。</p>\n<p>我们创建了一个<code>Person</code>类的实例，并将<code>&quot;Alice&quot;</code>和<code>20</code>作为参数传递给构造函数。然后，我们通过调用实例方法<code>sayHello</code>来输出相应的信息。</p>\n<p>需要注意的是，虽然类的定义和构造函数的定义在语法上有所不同，但它们都可以用来创建对象并定义对象的行为。类的定义更加清晰和简洁，具有更好的可读性和可维护性，同时还提供了继承和其他高级特性的支持。而构造函数则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。</p>\n<p>总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。</p>\n<h3 id=\"24-2-不同的继承方式\"><a href=\"#24-2-不同的继承方式\" class=\"headerlink\" title=\"24.2 不同的继承方式\"></a>24.2 不同的继承方式</h3><p>此外，类和构造函数的继承方式也有所不同。在构造函数中，可以通过修改原型链来实现继承。例如，可以通过将子类的原型对象指向父类的一个实例来实现继承。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Student(name, age, grade) &#123;</span><br><span class=\"line\">  Person.call(this, name, age);</span><br><span class=\"line\">  this.grade = grade;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype = Object.create(Person.prototype);</span><br><span class=\"line\">Student.prototype.constructor = Student;</span><br><span class=\"line\"></span><br><span class=\"line\">const student = new Student(&quot;Bob&quot;, 18, 90);</span><br><span class=\"line\">student.sayHello(); // 输出：Hello, my name is Bob, and I&#x27;m 18 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>Person</code>构造函数和一个<code>Student</code>构造函数。然后，我们通过在<code>Student</code>构造函数中调用<code>Person</code>构造函数并继承其属性，来实现对<code>Person</code>构造函数的继承。接着，我们通过将<code>Student</code>的原型对象指向一个<code>Person</code>实例来继承<code>Person</code>的方法。最后，我们创建了一个<code>Student</code>对象，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>在类中，继承使用<code>extends</code>关键字来实现。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\">  constructor(name, age, grade) &#123;</span><br><span class=\"line\">    super(name, age);</span><br><span class=\"line\">    this.grade = grade;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const student = new Student(&quot;Bob&quot;, 18, 90);</span><br><span class=\"line\">student.sayHello(); // 输出：Hello, my name is Bob, and I&#x27;m 18 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>Person</code>类和一个<code>Student</code>类，并使用<code>extends</code>关键字将<code>Student</code>类继承自<code>Person</code>类，从而实现对<code>Person</code>类的继承。在<code>Student</code>类的构造函数中，我们通过调用<code>super</code>关键字来调用父类的构造函数并继承其属性。然后，我们定义了一个<code>grade</code>属性，用于表示学生的分数。最后，我们创建了一个<code>Student</code>对象，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>需要注意的是，类的继承方式更加简洁和直观，同时也提供了更好的语言特性支持，例如<code>super</code>关键字和<code>constructor</code>方法。而构造函数的继承方式则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。</p>\n<p>总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。类提供了更加清晰和简洁的语法来定义对象和实现继承，而构造函数则更加灵活和自由。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。</p>\n<h3 id=\"24-3高级特性\"><a href=\"#24-3高级特性\" class=\"headerlink\" title=\"24.3高级特性\"></a>24.3高级特性</h3><p>此外，类还提供了一些其他的高级特性，例如静态方法、getter和setter等。</p>\n<p>静态方法是指类的方法，不需要实例化对象就可以调用。在类中，可以使用<code>static</code>关键字来定义静态方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MathUtil &#123;</span><br><span class=\"line\">  static add(x, y) &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(MathUtil.add(1, 2)); // 输出：3</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>MathUtil</code>类，并使用<code>static</code>关键字定义了一个静态方法<code>add</code>。静态方法可以直接通过类来调用，而不需要先实例化对象。</p>\n<p>Getter和Setter是指用于读取和设置对象属性的方法。在类中，可以使用<code>get</code>和<code>set</code>关键字来定义Getter和Setter方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this._name = name;</span><br><span class=\"line\">    this._age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get name() &#123;</span><br><span class=\"line\">    return this._name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set name(value) &#123;</span><br><span class=\"line\">    this._name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get age() &#123;</span><br><span class=\"line\">    return this._age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set age(value) &#123;</span><br><span class=\"line\">    if (value &gt; 0 &amp;&amp; value &lt; 100) &#123;</span><br><span class=\"line\">      this._age = value;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      throw new Error(&quot;Invalid age value.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&quot;Alice&quot;, 20);</span><br><span class=\"line\">console.log(person.name); // 输出：Alice</span><br><span class=\"line\">person.name = &quot;Bob&quot;;</span><br><span class=\"line\">console.log(person.name); // 输出：Bob</span><br><span class=\"line\">console.log(person.age); // 输出：20</span><br><span class=\"line\">person.age = 200; // 抛出异常：Invalid age value.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>Person</code>类，并使用<code>get</code>和<code>set</code>关键字定义了<code>name</code>和<code>age</code>属性的Getter和Setter方法。Getter方法用于读取属性的值，Setter方法用于设置属性的值。在Setter方法中，我们可以对属性的值进行验证和处理。</p>\n<p>需要注意的是，Getter和Setter方法可以使用不同的属性名来定义，例如在上面的例子中，我们使用了<code>_name</code>和<code>_age</code>属性来存储实际的属性值，并使用<code>name</code>和<code>age</code>来定义Getter和Setter方法。这样可以保证Getter和Setter方法的调用方式与普通属性的调用方式相同，同时也可以避免Getter和Setter方法的递归调用。</p>\n<p>总之，类提供了一系列高级特性，例如静态方法、Getter和Setter等，可以更加方便地实现对象的行为和属性的管理。在实际开发中，需要根据具体的需求和场景选择合适的特性来使用。</p>\n<h3 id=\"24-4语法特性\"><a href=\"#24-4语法特性\" class=\"headerlink\" title=\"24.4语法特性\"></a>24.4语法特性</h3><p>除了上述特性之外，类还有一些其他的语法和用法需要注意。</p>\n<p>首先是类的表达式语法。类可以像函数一样，使用表达式来定义。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MyClass = class &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(`Hello, $&#123;this.name&#125;!`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = new MyClass(&quot;Alice&quot;);</span><br><span class=\"line\">obj.sayHello(); // 输出：Hello, Alice!</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们使用类表达式的方式定义了一个名为<code>MyClass</code>的类，并创建了一个<code>MyClass</code>的实例。类表达式与类声明的语法类似，只是将类名省略了而已。</p>\n<p>其次是类的默认构造函数。如果类没有定义构造函数，那么会默认生成一个空的构造函数。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(&quot;Hello!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = new MyClass();</span><br><span class=\"line\">obj.sayHello(); // 输出：Hello!</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个名为<code>MyClass</code>的类，并在其中定义了一个<code>sayHello</code>方法。由于没有定义构造函数，因此会默认生成一个空的构造函数。我们创建了一个<code>MyClass</code>的实例，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>最后是类的继承链。在类的继承中，如果一个子类继承自多个父类，那么它的继承链会按照从左到右的顺序进行。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(&quot;Hello from A!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B &#123;</span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(&quot;Hello from B!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C extends A,B &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = new C();</span><br><span class=\"line\">obj.sayHello(); // 输出：Hello from A!</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了三个类<code>A</code>、<code>B</code>和<code>C</code>。类<code>C</code>继承自类<code>A</code>和类<code>B</code>，并且没有定义自己的<code>sayHello</code>方法。由于继承链的顺序是从左到右，因此<code>C</code>类的<code>sayHello</code>方法会继承自<code>A</code>类而不是<code>B</code>类。我们创建了一个<code>C</code>类的实例，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>需要注意的是，如果类的继承链中存在同名的方法，那么会按照从左到右的顺序取第一个方法。这个特性在多重继承和方法的定制中非常有用。</p>\n<p>总之，类是ES6中新增的一种语言特性，提供了更加清晰和简洁的语法来定义对象和实现继承。类的特性和用法也非常丰富，可以根据具体的需求和场景选择合适的特性来使用。在实际开发中，需要熟练掌握类的语法和用法，以便更加高效地进行编程。</p>\n<h2 id=\"25-链式写法\"><a href=\"#25-链式写法\" class=\"headerlink\" title=\"25.链式写法\"></a>25.链式写法</h2><p>链式写法是一种将多个操作按照一定的顺序连在一起的编程风格。在链式写法中，每个操作都返回自身的对象，从而可以继续进行下一个操作。这种风格的代码通常非常简洁和直观，可以提高代码的可读性和可维护性。</p>\n<p>链式写法通常使用方法链的方式实现。在方法链中，每个方法都返回自身的对象，从而可以继续调用下一个方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传统的写法</span><br><span class=\"line\">const arr = [1, 2, 3];</span><br><span class=\"line\">const filtered = arr.filter(function(item) &#123;</span><br><span class=\"line\">  return item &gt; 1;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">const mapped = filtered.map(function(item) &#123;</span><br><span class=\"line\">  return item * 2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 链式写法</span><br><span class=\"line\">const arr = [1, 2, 3];</span><br><span class=\"line\">const mapped = arr.filter(function(item) &#123;</span><br><span class=\"line\">  return item &gt; 1;</span><br><span class=\"line\">&#125;).map(function(item) &#123;</span><br><span class=\"line\">  return item * 2;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们分别使用传统的写法和链式写法来实现了一个数组的过滤和映射操作。在传统的写法中，我们需要使用多个中间变量来存储中间结果。而在链式写法中，我们可以直接将多个操作连接在一起，从而避免了中间变量的使用，使得代码更加简洁和直观。</p>\n<hr>\n<p>链式写法通常是从左往右进行读取和理解的。在链式写法中，每个方法都是基于前一个方法的结果进行操作的，因此需要按照从左往右的顺序进行读取和理解。例如，在下面的代码中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const result = arr.filter(function(item) &#123;</span><br><span class=\"line\">  return item &gt; 1;</span><br><span class=\"line\">&#125;).map(function(item) &#123;</span><br><span class=\"line\">  return item * 2;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以先看到<code>arr</code>对象的<code>filter</code>方法，然后再看到<code>map</code>方法。这样就能够理解这段代码的含义，即先将数组<code>arr</code>中大于1的元素过滤出来，然后将剩余的元素都乘以2。</p>\n<p>需要注意的是，有些方法也可以从右往左进行读取和理解。例如，在下面的代码中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const result = arr.reduceRight(function(prev, curr) &#123;</span><br><span class=\"line\">  return prev + curr;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以先看到<code>arr</code>对象的<code>reduceRight</code>方法，然后再看到回调函数。这样就能够理解这段代码的含义，即从右往左地对数组<code>arr</code>中的元素进行累计求和。</p>\n<p>总之，链式写法需要按照从左往右的顺序进行读取和理解，以便理解代码的含义和作用。在实际开发中，需要注意代码的可读性和可维护性，以便其他开发者能够更加容易地理解和维护代码</p>\n<h2 id=\"26-形参命名为什么经常用foo\"><a href=\"#26-形参命名为什么经常用foo\" class=\"headerlink\" title=\"26.形参命名为什么经常用foo\"></a>26.形参命名为什么经常用foo</h2><p>形参命名为<code>foo</code>、<code>bar</code>、<code>baz</code>等是一种编程中常用的命名方式，通常被称为哑变量或占位符。这种命名方式的目的是为了强调变量的重要性或类型，同时也可以避免歧义和冲突。<strong>类似张三和李四，foo第一个无名变量，bar第二个无名变量，以此类推</strong></p>\n<p>具体来说，这种命名方式通常用于以下几个方面：</p>\n<ol>\n<li>强调变量的重要性：在一些情况下，变量的名称并不重要，重要的是变量的作用和含义。例如，在某些算法和数据结构中，变量的名称可能并不重要，重要的是它们的作用和含义。使用哑变量或占位符可以强调变量的作用和含义，而不会分散注意力。</li>\n<li>强调变量的类型：在一些情况下，变量的类型比名称更加重要。例如，在某些函数中，参数的类型可能比名称更加重要。使用哑变量或占位符可以强调变量的类型，而不会分散注意力。</li>\n<li>避免歧义和冲突：在一些情况下，变量的命名可能会引起歧义和冲突。例如，在一些示例代码和教学材料中，变量的名称可能已经被占用或者已经有了特定的含义。使用哑变量或占位符可以避免歧义和冲突，使得示例代码和教学材料更加通用和易懂。</li>\n</ol>\n<p>需要注意的是，虽然哑变量或占位符可以提高代码的可读性和可维护性，但是也需要注意使用的场景和范围。在实际开发中，应该根据具体的需求和场景选择合适的命名方式，以便其他开发者能够更加容易地理解和维护代码。</p>\n<p>此外，还有一些其他的命名方式和规范，例如驼峰命名法、下划线命名法等。这些命名方式和规范都有自己的特点和适用场景，需要根据具体的需求和场景选择合适的命名方式和规范。</p>\n<p>驼峰命名法是一种常用的命名方式，它将多个单词连接起来，每个单词的首字母大写，除第一个单词外其他单词的首字母都小写。例如，<code>firstName</code>、<code>lastName</code>、<code>emailAddress</code>等。驼峰命名法通常用于变量、函数和对象的命名。</p>\n<p>下划线命名法是另一种常用的命名方式，它将多个单词连接起来，每个单词之间用下划线分隔。例如，<code>first_name</code>、<code>last_name</code>、<code>email_address</code>等。下划线命名法通常用于数据库表名、URL路径、CSS类名等。</p>\n<p>需要注意的是，在使用命名方式和规范时，应该尽量保持一致性和规范性，以便提高代码的可读性和可维护性。同时，也需要注意命名的长度和含义，以避免过长或者过短的命名导致代码的可读性下降。</p>\n<hr>\n<p>在编程中，选择合适的变量名是非常重要的，可以提高代码的可读性和可维护性。在不同的场景下，选择不同的变量名可以更好地表达变量的含义和作用。</p>\n<p>下面是一些常见的场景和对应的变量名：</p>\n<ol>\n<li>数组和列表：对于数组和列表中的元素，可以使用单数的名词来表示。例如，<code>item</code>、<code>element</code>、<code>value</code>等。</li>\n<li>布尔值：对于布尔值，可以使用形容词或动词的过去分词来表示。例如，<code>isDone</code>、<code>isEnabled</code>、<code>hasError</code>等。</li>\n<li>函数和方法：对于函数和方法，可以使用动词或动词短语来表示。例如，<code>getLength</code>、<code>calculateSum</code>、<code>renderList</code>等。</li>\n<li>对象和类：对于对象和类，可以使用名词来表示。例如，<code>person</code>、<code>customer</code>、<code>product</code>等。</li>\n<li>常量：对于常量，可以使用全大写的字母和下划线来表示。例如，<code>MAX_VALUE</code>、<code>DEFAULT_TIMEOUT</code>等。</li>\n<li>迭代器和计数器：对于迭代器和计数器，可以使用单词或单词缩写来表示。例如，<code>i</code>、<code>j</code>、<code>k</code>、<code>index</code>、<code>count</code>等。</li>\n</ol>\n<p>需要注意的是，在选择变量名时，应该遵循命名规范和良好的编程习惯，以便提高代码的可读性和可维护性。同时，在实际开发中，应该根据具体的需求和场景选择合适的变量名，以便其他开发者能够更加容易地理解和维护代码。</p>\n<hr>\n<p><code>foo</code>、<code>bar</code>、<code>baz</code>是一组常用的哑变量或占位符，通常用于编程中临时测试、示例代码、伪代码等场景。这些变量名通常被视为没有具体含义的变量名，只是作为占位符来使用。</p>\n<p>在实际开发中，这三个变量名通常用于测试代码和示例代码中，以便提供一些简单的例子来说明代码的用法和效果。例如，在下面的代码中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(foo, bar) &#123;</span><br><span class=\"line\">  return foo + bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const result = add(2, 3);</span><br><span class=\"line\">console.log(result); // 输出 5</span><br></pre></td></tr></table></figure>\n\n<p>我们使用了<code>foo</code>和<code>bar</code>作为函数<code>add</code>的参数，这两个变量名并没有具体的含义，只是作为占位符来使用。这样可以更加简单地说明函数<code>add</code>的用法和效果，而不会分散注意力。</p>\n<p>需要注意的是，尽管这些变量名通常被视为没有具体含义的变量名，但是在实际开发中，我们应该尽量使用有意义的变量名来提高代码的可读性和可维护性。只有在一些简单的测试代码和示例代码中，才可以使用这些占位符变量名.</p>\n<h2 id=\"27-双标签改单标签\"><a href=\"#27-双标签改单标签\" class=\"headerlink\" title=\"27.双标签改单标签\"></a>27.双标签改单标签</h2><p>要将双标签形式中的尾标签删除，同时将尾标签中的 <code>/</code> 删除，这样就变成了单标签形式。</p>\n<p>例如，将双标签形式的 <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code> 改成单标签形式，就需要将它修改成 <code>&lt;input type=&quot;text&quot;&gt;</code>。</p>\n<p>另外，需要注意的是，并非所有的双标签都可以简单地改成单标签。如果一个双标签有子元素或者属性值为空，那么它就无法转换成单标签。例如 <code>&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code>、<code>&lt;input type=&quot;text&quot; value=&quot;&quot;&gt;</code> 等都无法改成单标签形式。只有像上面示范的那个例子一样，没有子元素并且没有属性值为空的双标签才能写成单标签形式。</p>\n<p>好的，下面再给一些例子来详细介绍如何将双标签改成单标签。</p>\n<ol>\n<li><code>&lt;img&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;img&gt;</code> 标签是 HTML 中最常见的单标签之一，它表示文档中的图像。在双标签形式中，它通常被写成 <code>&lt;img&gt;&lt;/img&gt;</code> 或者 <code>&lt;img /&gt;</code> 的形式。</p>\n<p>将其改成单标签的形式，只需要删除尾标签即可，这样就得到了 <code>&lt;img&gt;</code> 标签的单标签形式。</p>\n<ol>\n<li><code>&lt;input&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;input&gt;</code> 标签用来表示文档中的表单控件，例如文本框、单选框、复选框等。在双标签形式中，它通常被写成 <code>&lt;input&gt;&lt;/input&gt;</code> 或者 <code>&lt;input /&gt;</code> 的形式。</p>\n<p>对于 <code>&lt;input&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;input type=&quot;text&quot;&gt;输入框&lt;/input&gt;</code> 和 <code>&lt;input type=&quot;text&quot; value=&quot;&quot; /&gt;</code> 都不能改成单标签的形式。</p>\n<ol>\n<li><code>&lt;br&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;br&gt;</code> 标签用来表示文档中的换行符。在双标签形式中，它通常被写成 <code>&lt;br&gt;&lt;/br&gt;</code> 或者 <code>&lt;br /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;img&gt;</code> 标签一样，将 <code>&lt;br&gt;</code> 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 <code>&lt;br&gt;</code> 标签的单标签形式。</p>\n<ol>\n<li><code>&lt;link&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;link&gt;</code> 标签用来加载外部资源，例如样式表、脚本文件等。在双标签形式中，它通常被写成 <code>&lt;link&gt;&lt;/link&gt;</code> 或者 <code>&lt;link /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;input&gt;</code> 标签一样，对于 <code>&lt;link&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;link&gt;</code> 标签中的属性 rel 和 href 就不能为空。</p>\n<ol>\n<li><code>&lt;meta&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;meta&gt;</code> 标签用来表示文档的元数据，例如编码方式、关键字、描述等。在双标签形式中，它通常被写成 <code>&lt;meta&gt;&lt;/meta&gt;</code> 或者 <code>&lt;meta /&gt;</code> 的形式。</p>\n<p>对于 <code>&lt;meta&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;meta&gt;</code> 中的 charset 属性就不能为空。</p>\n<ol>\n<li><code>&lt;hr&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;hr&gt;</code> 标签用来表示文档中的水平线。在双标签形式中，它通常被写成 <code>&lt;hr&gt;&lt;/hr&gt;</code> 或者 <code>&lt;hr /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;img&gt;</code> 标签一样，将 <code>&lt;hr&gt;</code> 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 <code>&lt;hr&gt;</code> 标签的单标签形式。</p>\n<ol>\n<li><code>&lt;source&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;source&gt;</code> 标签用来定义多媒体资源（如视频、音频）的可选来源。在双标签形式中，它通常被写成 <code>&lt;source&gt;&lt;/source&gt;</code> 或者 <code>&lt;source /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;input&gt;</code> 标签一样，对于 <code>&lt;source&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;source src=&quot;video.mp4&quot; type=&quot;video/mp4&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;source&gt;</code> 标签中的 src 和 type 属性就不能为空。</p>\n<p>总之，将双标签改成单标签的关键就是删除尾标签。但需要注意的是，并非所有的双标签都可以简单地改成单标签，只有没有子元素并且没有属性值为空的双标签才能改成单标签。所以在修改标签形式的时候，一定要注意检查标签中的子元素和属性值。</p>\n<h2 id=\"28-多层嵌套数组，对象\"><a href=\"#28-多层嵌套数组，对象\" class=\"headerlink\" title=\"28.多层嵌套数组，对象\"></a>28.多层嵌套数组，对象</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;</span><br><span class=\"line\">  a: &#123;</span><br><span class=\"line\">    b: &#123;c&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\">console.log(c); // 1</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>解构多层数组和对象</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const data = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: 1,</span><br><span class=\"line\">    name: &#x27;Alice&#x27;,</span><br><span class=\"line\">    cats: [</span><br><span class=\"line\">      &#123;id: 1, name: &#x27;Mimi&#x27;&#125;,</span><br><span class=\"line\">      &#123;id: 2, name: &#x27;Kiki&#x27;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: 2,</span><br><span class=\"line\">    name: &#x27;Bob&#x27;,</span><br><span class=\"line\">    cats: [&#123;id: 3, name: &#x27;Lala&#x27;&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">const [&#123;cats: [cat1, cat2]&#125;, &#123;cats: [cat3]&#125;] = data;</span><br><span class=\"line\">console.log(cat1, cat2, cat3); // &#123; id: 1, name: &#x27;Mimi&#x27; &#125; &#123; id: 2, name: &#x27;Kiki&#x27; &#125; &#123; id: 3, name: &#x27;Lala&#x27; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上示例中，使用 <code>...</code> 操作符将多层的数据结构展开并解构到变量中，简化了代码并使得操作更加清晰易懂。在实际开发中，可以根据具体情况选择使用解构赋值的方式来取出多层嵌套结构中的值。</p>\n<h3 id=\"28-2更多示例\"><a href=\"#28-2更多示例\" class=\"headerlink\" title=\"28.2更多示例\"></a>28.2更多示例</h3><p>多层嵌套数组和多层嵌套对象都是在编程中常见的数据结构，本质上它们都是存储一组相关数据的容器。</p>\n<ol>\n<li>多层嵌套数组</li>\n</ol>\n<p>多层嵌套数组指的是将多个数组嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套数组的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [</span><br><span class=\"line\">  [1, 2, 3],</span><br><span class=\"line\">  [4, 5, 6, [7, 8]],</span><br><span class=\"line\">  [9]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，常量 arr 是一个三层嵌套的数组，其中第二层的第四个元素又是一个二层嵌套的数组。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。</p>\n<p>要访问嵌套数组中的元素，可以通过多次使用数组索引来获取。例如，获取第三个元素的第一个元素的值，可以使用下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const x = arr[2][0];</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>多层嵌套对象</li>\n</ol>\n<p>多层嵌套对象指的是将多个对象嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套对象的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;Alice&#x27;,</span><br><span class=\"line\">  age: 20,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    country: &#x27;USA&#x27;,</span><br><span class=\"line\">    city: &#x27;New York&#x27;,</span><br><span class=\"line\">    street: &#123;</span><br><span class=\"line\">      name: &#x27;Broadway&#x27;,</span><br><span class=\"line\">      number: 1234</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，常量 obj 是一个三层嵌套的对象，其中第二层和第三层都是嵌套的对象。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。</p>\n<p>要访问嵌套对象中的属性，可以使用点号（.）操作符或方括号（[]）操作符来获取。例如，获取地址的街道名称，可以使用下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const streetName = obj.address.street.name;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在使用点号操作符时，属性名必须是一个合法的标识符。如果属性名中包含特殊字符或关键字，就必须使用方括号操作符，并将属性名用引号括起来。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const propertyName = &#x27;street.name&#x27;;</span><br><span class=\"line\">const value = obj[&#x27;address&#x27;][propertyName];</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>嵌套数组和嵌套对象的异同点</li>\n</ol>\n<p>虽然嵌套数组和嵌套对象都是用于存储多个相关数据的容器，但它们之间还是有一些区别和异同点的。</p>\n<p>相同点：</p>\n<ul>\n<li>均可进行多级嵌套，可以表示较为复杂的数据结构。</li>\n<li>均可访问其内部嵌套的元素或属性。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>嵌套数组是一种基于索引值来访问和操作的数据结构，而嵌套对象是一种基于属性名来访问和操作的数据结构。</li>\n<li>嵌套数组的元素是有序的，而嵌套对象的属性是无序的。</li>\n<li>在实际开发中，嵌套数组常用于存储一组相同类型的数据，而嵌套对象则常用于存储一个实体对象的各个属性。</li>\n<li>嵌套数组可以使用循环来遍历、查找、过滤和修改数据，而嵌套对象则可以使用对象方法和操作符来操作属性，如 Object.keys()、Object.values()、Object.assign() 等。</li>\n</ul>\n<ol>\n<li>多层嵌套数组与多层嵌套对象的注意事项</li>\n</ol>\n<p>在使用多层嵌套数组或多层嵌套对象时，需要注意以下事项：</p>\n<ul>\n<li>不要过度嵌套，一般不要超过三层。</li>\n<li>尽量保持数据结构清晰，以便于阅读和维护代码。</li>\n<li>多层嵌套数组和多层嵌套对象的访问操作比较繁琐和易错，需要仔细处理。建议使用变量和常量来保存中间结果，以便于复用。</li>\n<li>在修改多层嵌套数组或多层嵌套对象时，请避免对原数据进行直接修改，可以使用深拷贝（deep clone）来获得一份新的数据，然后对新的数据进行修改。否则可能会引起意外的副作用。</li>\n<li>使用多层嵌套数组或多层嵌套对象时，还需要考虑数据之间的关系和依赖，以便于数据之间的传递和交互。例如，可以使用回调函数、事件监听器、Promise、Async/Await 等机制进行数据传递和交互。</li>\n<li>示例代码</li>\n</ul>\n<p>下面通过一些示例代码来演示使用多层嵌套数组和多层嵌套对象的相关操作。</p>\n<p>5.1. 多层嵌套数组的示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [</span><br><span class=\"line\">  [1, 2, 3],</span><br><span class=\"line\">  [4, 5, 6, [7, 8]],</span><br><span class=\"line\">  [9]</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">// 访问嵌套数组的元素</span><br><span class=\"line\">const x = arr[1][3][1]; // 8</span><br><span class=\"line\"></span><br><span class=\"line\">// 遍历嵌套数组的所有元素</span><br><span class=\"line\">for(let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  for(let j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class=\"line\">    console.log(arr[i][j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 过滤嵌套数组的元素</span><br><span class=\"line\">const filteredArr = arr.filter(item =&gt; item.includes(2));</span><br><span class=\"line\">console.log(filteredArr); // [[1, 2, 3]]</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改嵌套数组的元素</span><br><span class=\"line\">arr[1][1] = 0;</span><br><span class=\"line\">console.log(arr); // [[1, 2, 3], [4, 0, 6, [7, 8]], [9]]</span><br></pre></td></tr></table></figure>\n\n<p>5.2. 多层嵌套对象的示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;Alice&#x27;,</span><br><span class=\"line\">  age: 20,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    country: &#x27;USA&#x27;,</span><br><span class=\"line\">    city: &#x27;New York&#x27;,</span><br><span class=\"line\">    street: &#123;</span><br><span class=\"line\">      name: &#x27;Broadway&#x27;,</span><br><span class=\"line\">      number: 1234</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 访问嵌套对象的属性</span><br><span class=\"line\">const streetName = obj.address.street.name; // Broadway</span><br><span class=\"line\"></span><br><span class=\"line\">// 遍历嵌套对象的所有属性</span><br><span class=\"line\">for(let prop in obj) &#123;</span><br><span class=\"line\">  if(typeof obj[prop] === &#x27;object&#x27;) &#123;</span><br><span class=\"line\">    for(let subProp in obj[prop]) &#123;</span><br><span class=\"line\">      console.log(subProp + &#x27;: &#x27; + obj[prop][subProp]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    console.log(prop + &#x27;: &#x27; + obj[prop]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改嵌套对象的属性</span><br><span class=\"line\">obj.address.street.number = 5678;</span><br><span class=\"line\">console.log(obj);</span><br><span class=\"line\">/* &#123;</span><br><span class=\"line\">  name: &#x27;Alice&#x27;,</span><br><span class=\"line\">  age: 20,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    country: &#x27;USA&#x27;,</span><br><span class=\"line\">    city: &#x27;New York&#x27;,</span><br><span class=\"line\">    street: &#123;</span><br><span class=\"line\">      name: &#x27;Broadway&#x27;,</span><br><span class=\"line\">      number: 5678</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; */</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-3多层数组合并到一个数组\"><a href=\"#28-3多层数组合并到一个数组\" class=\"headerlink\" title=\"28.3多层数组合并到一个数组\"></a>28.3多层数组合并到一个数组</h3><p>可以使用 <code>...</code> 操作符并结合 <code>Array.reduce()</code> 方法来合并多个数组套数组到一个数组中。<code>Array.reduce()</code> 方法会遍历每个数组并将其合并到一个新的数组中，代码实现如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [[1, 2], [3, 4], [5, 6]];</span><br><span class=\"line\">const flattened = arr.reduce((acc, val) =&gt; acc.concat(val), []);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattened); // [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>arr</code> 是一个由三个数组组成的数组。使用 <code>Array.reduce()</code> 方法将它们合并到一个新的数组 <code>flattened</code> 中。在每次迭代中，回调函数接收两个参数，即累加器（<code>acc</code>）和当前值（<code>val</code>）。起始值为一个空数组（<code>[]</code>）。在每次迭代中，将当前值（一个数组）连接到累加器中。最后返回一个扁平化后的数组。</p>\n<p>如果你使用了 ES6，还可以用简化的箭头函数语法和展开运算符来简化代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [[1, 2], [3, 4], [5, 6]];</span><br><span class=\"line\">const flattened = arr.reduce((acc, val) =&gt; [...acc, ...val], []);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattened); // [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>\n\n<p>以上两种方法均可实现将多个数组套数组合并到一个数组中。</p>\n<p><strong>如果需要将多层嵌套的数组全部展开到一个新数组中</strong>，除了使用多层的 <code>Array.reduce()</code> 递归调用外，还可以使用 ES6 中的展开运算符和递归函数来实现。具体实现如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">  return arr.reduce((acc, val) =&gt; Array.isArray(val) ? [...acc, ...flatten(val)] : [...acc, val], []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const arr = [[1, [2], [3, [[4]]]], 5];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flatten(arr)); // [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，<code>flatten</code> 函数递归调用自身并使用展开运算符将每个层次的数组展开到一个新数组中。在每个迭代中，如果当前值为数组，则递归调用 <code>flatten</code> 函数，否则直接将它添加到新数组中。最终会得到扁平化后的数组 <code>[1, 2, 3, 4, 5]</code>。</p>\n<p>需要注意的是，如果嵌套的数组很多，递归调用函数可能会导致栈溢出的问题。可以使用尾调用优化或其他的解决方案来解决这个问题。</p>\n<h3 id=\"28-4对象的嵌套合并\"><a href=\"#28-4对象的嵌套合并\" class=\"headerlink\" title=\"28.4对象的嵌套合并\"></a>28.4对象的嵌套合并</h3><p>在 JavaScript 中，对象可以包含其他对象或数组，并且可以嵌套多层。如果需要将多层嵌套的对象或数组全部展开到一个新对象或数组中，可以使用递归函数和 ES6 中的展开运算符来实现。</p>\n<p>展开对象中的嵌套对象示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: 2,</span><br><span class=\"line\">    d: &#123;</span><br><span class=\"line\">      e: 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  f: [4, 5, [6, 7]]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function flattenObj(obj) &#123;</span><br><span class=\"line\">  return Object.entries(obj).reduce((acc, [key, val]) =&gt; &#123;</span><br><span class=\"line\">    return acc.concat(</span><br><span class=\"line\">      typeof val === &quot;object&quot; &amp;&amp; !Array.isArray(val)</span><br><span class=\"line\">        ? flattenObj(val)</span><br><span class=\"line\">        : &#123; [key]: val &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const flattenedObj = Object.assign(&#123;&#125;, ...flattenObj(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattenedObj);</span><br><span class=\"line\">// &#123; a: 1, c: 2, e: 3, &#x27;0&#x27;: 4, &#x27;1&#x27;: 5, &#x27;2&#x27;: [ 6, 7 ] &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，<code>flattenObj</code> 函数递归调用自身并使用 <code>Object.entries()</code> 方法将对象转换为可迭代的键/值数组。在每个迭代中，如果当前值为对象，则递归调用 <code>flattenObj</code> 函数。否则，将当前键/值对转换为一个新对象并返回。最后使用展开运算符和 <code>Object.assign()</code> 方法将所有新对象合并成一个扁平化的新对象。</p>\n<p>展开数组中的嵌套数组示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [1, [2, [3, [4]]], 5];</span><br><span class=\"line\"></span><br><span class=\"line\">function flattenArr(arr) &#123;</span><br><span class=\"line\">  return arr.reduce((acc, val) =&gt;</span><br><span class=\"line\">    Array.isArray(val) ? acc.concat(flattenArr(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const flattenedArr = flattenArr(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattenedArr); // [ 1, 2, 3, 4, 5 ]</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，<code>flattenArr</code> 函数递归调用自身并使用 <code>Array.reduce()</code> 方法遍历每个嵌套数组。在每个迭代中，如果当前值为数组，则递归调用 <code>flattenArr</code> 函数。否则，将当前值添加到新数组中。最后返回扁平化后的新数组。</p>\n<p>需要注意的是，在处理对象或数组时，循环引用可能会导致无限递归的问题。需要特别小心处理或者采取其他的解决方案。</p>\n<h2 id=\"29-重排重绘\"><a href=\"#29-重排重绘\" class=\"headerlink\" title=\"29.重排重绘\"></a>29.重排重绘</h2><p>重排和重绘是网页性能优化中重要的概念。<strong>重排（reflow）</strong>指的是当DOM结构发生改变，影响到元素的布局、尺寸、位置等属性时，浏览器需要重新计算元素的几何属性和布局，这个过程就是重排。而<strong>重绘（repaint）</strong>则是指当元素的样式发生改变，但不影响到布局时，浏览器只需要重新绘制元素的视觉效果，这个过程就是重绘。重排和重绘都会消耗大量的计算资源，因此会影响网页的性能。以下是一些常见的导致重排和重绘的操作：</p>\n<p>1.改变元素的位置、尺寸和布局：包括改变元素的宽高、margin、padding、border、position、display等属性。</p>\n<p>2.改变元素的内容：包括改变文本内容、图片大小、添加或删除DOM节点等操作。</p>\n<p>3.改变浏览器窗口大小：当窗口大小改变时，会影响到整个页面的布局，因此会触发重排。</p>\n<p>为了减少重排和重绘的次数，可以采取以下措施：</p>\n<p>1.使用CSS3的transform属性来改变元素的位置和尺寸，而不是通过改变元素的position、width、height等属性。</p>\n<p>2.将需要多次操作的元素，先脱离文档流，进行操作后再重新插入文档流。</p>\n<p>3.对需要改变的元素，先使用display:none将其隐藏，修改完后再显示。</p>\n<p>4.使用requestAnimationFrame来优化动画效果，避免频繁的重排和重绘。</p>\n<p>5.避免频繁地修改DOM：可以先将需要修改的数据存储在JavaScript中，最后一次性更新到DOM中。</p>\n<p>6.使用CSS Sprites来减少图片的请求次数，将多张小图片合成一张大图，通过background-position来显示不同的图片。</p>\n<p>7.避免使用table布局：table布局很容易导致重排，可以使用div+CSS布局代替。</p>\n<p>8.使用缓存技术：对于静态资源，可以使用浏览器缓存或CDN缓存来减少请求次数。</p>\n<p>9.使用CSS动画代替JavaScript动画：CSS动画可以避免频繁的JavaScript操作，减少重排和重绘的次数。</p>\n<p>总之，减少重排和重绘是优化网页性能的重要手段之一，需要在开发过程中注意避免频繁进行DOM操作和样式修改，以及采用一些优化技术来减少不必要的重排和重绘。</p>\n<h2 id=\"30-循环中，判断条件，重复某值用if赋值比较好还是取余？\"><a href=\"#30-循环中，判断条件，重复某值用if赋值比较好还是取余？\" class=\"headerlink\" title=\"30.循环中，判断条件，重复某值用if赋值比较好还是取余？\"></a>30.循环中，判断条件，重复某值用if赋值比较好还是取余？</h2><p>这两种方法都可以实现让<code>index</code>在循环中到达7后重新从0开始。但是在实际开发中，推荐使用<code>index % 7</code>的方法，因为它比<code>if(index===7) index=0</code>的方法更简洁、更易读、更易扩展。</p>\n<p>使用取模运算符<code>%</code>可以将<code>index</code>的值限制在0~6的范围内，当<code>index</code>的值达到7时，<code>index % 7</code>的结果为0，从而实现了从头开始的效果。而使用<code>if(index===7) index=0</code>的方法则需要显式地判断<code>index</code>的值是否为7，代码量较大，不够简洁。</p>\n<p>此外，如果循环的次数需要变更为其他值，如10或者14，使用取模运算符也可以轻松实现，只需要将7改为相应的值即可。而使用<code>if</code>语句则需要手动修改判断条件和重新赋值的代码，不够易扩展。</p>\n<p>因此，使用取模运算符<code>%</code>可以使代码更简洁、易读和易扩展，是更好的选择。</p>\n<h2 id=\"31-return-num-与return-num的区别\"><a href=\"#31-return-num-与return-num的区别\" class=\"headerlink\" title=\"31.return num++与return ++num的区别\"></a>31.return num++与return ++num的区别</h2><h3 id=\"31-1前后置-的区别\"><a href=\"#31-1前后置-的区别\" class=\"headerlink\" title=\"31.1前后置++的区别\"></a>31.1前后置++的区别</h3><p>不一样，而且<code>return</code>不会影响后续的+1。</p>\n<p><code>return num++</code> 先返回num的值，然后再将num加1，相当于先返回原来的num值，再执行<code>num=num+1</code>。</p>\n<p>而 <code>return ++num</code> 先将num加1，再返回新的num的值，相当于先执行<code>num=num+1</code>，然后再返回新的num值。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num = 1;</span><br><span class=\"line\">console.log(return num++); // 输出1</span><br><span class=\"line\">console.log(num); // 输出2</span><br><span class=\"line\"></span><br><span class=\"line\">num = 1;</span><br><span class=\"line\">console.log(return ++num); // 输出2</span><br><span class=\"line\">console.log(num); // 输出2</span><br></pre></td></tr></table></figure>\n\n<p>因此，<code>return num++</code> 和 <code>return ++num</code> 的返回值是不同的，需要根据具体情况选择使用哪个。</p>\n<h3 id=\"31-2-return-为什么不会影响\"><a href=\"#31-2-return-为什么不会影响\" class=\"headerlink\" title=\"31.2 return 为什么不会影响\"></a>31.2 return 为什么不会影响</h3><p><code>return</code> 依旧影响，但是后置++，返回的是没有+1的值；前置+1可以看成在<code>return</code>语言前已经+1了，所以返回了+1的值。</p>\n<p>是的，<code>return ++num</code> 先将 <code>num</code> 加 1，然后再返回新的 <code>num</code> 的值。相当于先执行 <code>num = num + 1</code>，然后再执行 <code>return num</code>。</p>\n<p>因此，可以理解为 <code>num = num + 1</code> 在 <code>return</code> 语句前面执行了。在执行 <code>return ++num</code> 语句时，<code>num</code> 的值已经被加 1 了，然后将加 1 后的 <code>num</code> 值作为返回值返回。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test() &#123;</span><br><span class=\"line\">  let num = 1;</span><br><span class=\"line\">  return ++num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(test()); // 输出2</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>test</code> 函数返回 <code>2</code>，因为 <code>return ++num</code> 语句先将 <code>num</code> 加 1，然后再返回新的 <code>num</code> 值，即 <code>2</code>。</p>\n<p>因此，可以理解为 <code>num = num + 1</code> 在 <code>return</code> 语句前面执行了。</p>\n<h2 id=\"33-函数中return的理解\"><a href=\"#33-函数中return的理解\" class=\"headerlink\" title=\"33.函数中return的理解\"></a>33.函数中return的理解</h2><h3 id=\"33-1如果没有返回值就返回undefined\"><a href=\"#33-1如果没有返回值就返回undefined\" class=\"headerlink\" title=\"33.1如果没有返回值就返回undefined\"></a>33.1如果没有返回值就返回undefined</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething() &#123;</span><br><span class=\"line\">  // 这里不需要返回值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doSomethingElse() &#123;</span><br><span class=\"line\">  return; // 返回 undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(doSomething()); // 输出 undefined</span><br><span class=\"line\">console.log(doSomethingElse()); // 输出 undefined</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>doSomething</code> 函数和 <code>doSomethingElse</code> 函数都没有明确使用 <code>return</code> 语句返回值，因此它们的返回值都是 <code>undefined</code>。在 JavaScript 中，如果函数没有明确使用 <code>return</code> 语句返回值，那么函数默认返回 <code>undefined</code>。</p>\n<h2 id=\"34-’-‘-与-“-”-都是字符串，这两个有什么区别\"><a href=\"#34-’-‘-与-“-”-都是字符串，这两个有什么区别\" class=\"headerlink\" title=\"34.’ ‘ 与 “ ” 都是字符串，这两个有什么区别\"></a>34.’ ‘ 与 “ ” 都是字符串，这两个有什么区别</h2><p>在 JavaScript 中，<code>&#39;&#39;</code> 与 <code>&quot;&quot;</code> 都表示空字符串，它们没有本质区别。即使在字符串拼接、字符串截取、字符串比较等操作中，也没有区别。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str1 = &#x27;&#x27;;</span><br><span class=\"line\">let str2 = &quot;&quot;;</span><br><span class=\"line\">console.log(str1 === str2); // 输出 true</span><br><span class=\"line\">console.log(str1 + str2); // 输出空字符串 &#x27;&#x27;</span><br><span class=\"line\">console.log(str1.substring(0, 1)); // 输出空字符串 &#x27;&#x27;</span><br><span class=\"line\">console.log(str1.length === str2.length); // 输出 true</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>str1</code> 和 <code>str2</code> 都表示空字符串，它们之间没有区别。我们可以使用 <code>===</code> 运算符比较它们的值，也可以进行字符串拼接、字符串截取、字符串比较等操作。</p>\n<p>需要注意的是，在编写 JavaScript 代码时，应该保持一致性，即要么使用单引号 <code>&#39;&#39;</code>，要么使用双引号 <code>&quot;&quot;</code>，不要混用。这样可以使代码风格更加统一，易于阅读和维护。</p>\n<h3 id=\"34-1为什么有两个呢？\"><a href=\"#34-1为什么有两个呢？\" class=\"headerlink\" title=\"34.1为什么有两个呢？\"></a>34.1为什么有两个呢？</h3><p>使用两种不同的引号来表示字符串，可以让程序员在字符串中使用另一种引号，而不必进行转义。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str1 = &quot;It&#x27;s a beautiful day.&quot;;</span><br><span class=\"line\">let str2 = &#x27;She said, &quot;Hello.&quot;&#x27;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>str1</code> 使用了双引号，因此可以在字符串中使用单引号；<code>str2</code> 使用了单引号，因此可以在字符串中使用双引号。如果使用相同的引号来表示字符串，那么在字符串中使用相同的引号就需要进行转义，这会使代码变得难以阅读和维护。</p>\n<p>在实际编码中，我们可以根据具体情况选择使用单引号 <code>&#39;&#39;</code> 或双引号 <code>&quot;&quot;</code> 来表示字符串，以便让代码更加易于编写和阅读。</p>\n<h2 id=\"35-函数数据类型\"><a href=\"#35-函数数据类型\" class=\"headerlink\" title=\"35.函数数据类型\"></a>35.函数数据类型</h2><h3 id=\"35-1-函数数据\"><a href=\"#35-1-函数数据\" class=\"headerlink\" title=\"35.1 函数数据\"></a>35.1 函数数据</h3><p>在 JavaScript 中，<code>function</code> 是一种数据类型，它可以表示一个函数。JavaScript 中的函数是一等公民，也就是说函数可以像其他类型的值一样被赋值、传递、返回和存储。</p>\n<p>例如，我们可以将一个函数赋值给一个变量，然后通过变量来调用这个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let sum = add;</span><br><span class=\"line\">console.log(sum(1, 2)); // 输出 3</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们将 <code>add</code> 函数赋值给了 <code>sum</code> 变量，然后通过 <code>sum</code> 变量来调用这个函数。</p>\n<p>我们也可以将一个函数作为参数传递给另一个函数，然后在函数内部调用这个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function multiply(a, b) &#123;</span><br><span class=\"line\">  return a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function calculate(operation, a, b) &#123;</span><br><span class=\"line\">  return operation(a, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(calculate(add, 1, 2)); // 输出 3</span><br><span class=\"line\">console.log(calculate(multiply, 3, 4)); // 输出 12</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了三个函数：<code>add</code>、<code>multiply</code> 和 <code>calculate</code>。<code>calculate</code> 函数接受一个函数作为参数 <code>operation</code>，然后在函数内部调用这个函数，并传递 <code>a</code> 和 <code>b</code> 作为参数。我们可以通过调用 <code>calculate</code> 函数并传递不同的函数来实现不同的计算。</p>\n<p>需要注意的是，在 JavaScript 中，函数本身也是一个对象，它可以拥有属性和方法。我们可以给函数添加属性，也可以给函数添加方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add.name = &#x27;addition&#x27;;</span><br><span class=\"line\">add.description = &#x27;This function adds two numbers.&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add.name); // 输出 &#x27;addition&#x27;</span><br><span class=\"line\">console.log(add.description); // 输出 &#x27;This function adds two numbers.&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们给 <code>add</code> 函数添加了两个属性：<code>name</code> 和 <code>description</code>。然后我们可以通过函数名来访问函数的属性，例如 <code>add.name</code> 和 <code>add.description</code>。需要注意的是，给函数添加属性或方法并不会影响函数的执行逻辑，它们只是函数对象的属性和方法，与函数的行为无关。</p>\n<p>另外，JavaScript 中的函数可以根据定义方式分为函数声明和函数表达式两种类型。函数声明是指使用 <code>function</code> 关键字来定义函数的方式，它们会被解析器提前到作用域的顶部，因此可以在函数声明之前调用。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add(1, 2)); // 输出 3</span><br></pre></td></tr></table></figure>\n\n<p>函数表达式是指将函数赋值给变量或属性的方式定义函数，它们不会被解析器提前到作用域的顶部，因此只能在定义后调用。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let add = function(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add(1, 2)); // 输出 3</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在实际编程中，我们应该根据具体情况选择使用函数声明或函数表达式来定义函数，以便让代码更加清晰、易于阅读和维护。同时，我们也可以使用箭头函数来定义函数，它们是一种更加简洁、易于编写的函数定义方式，可以使代码更加简洁、易于理解。</p>\n<h3 id=\"35-2-为什么没有单独把函数数据类型提出来\"><a href=\"#35-2-为什么没有单独把函数数据类型提出来\" class=\"headerlink\" title=\"35.2 为什么没有单独把函数数据类型提出来\"></a>35.2 为什么没有单独把函数数据类型提出来</h3><p>JavaScript 中的数据类型包括原始类型和引用类型。原始类型包括数字（<code>number</code>）、字符串（<code>string</code>）、布尔值（<code>boolean</code>）、<code>null</code>、<code>undefined</code> 和 <code>Symbol</code>。引用类型包括对象（<code>object</code>）、数组（<code>array</code>）、函数（<code>function</code>）和日期（<code>date</code>）等。</p>\n<p>虽然 JavaScript 中的函数是一种数据类型，但是它与其他数据类型有些不同。函数可以执行代码并返回值，因此它们不仅仅是数据类型，还可以用于实现程序的功能。因此，在 JavaScript 中，函数是一等公民，它们可以像其他类型的值一样被赋值、传递、返回和存储。</p>\n<p><strong>由于函数是一等公民，因此在介绍 JavaScript 的数据类型时通常不会将函数列为独立的数据类型。</strong>通常将函数视为一种可以执行代码并返回值的数据类型，它们可以与其他数据类型一起使用，为程序实现各种功能。</p>\n<p>需要注意的是，虽然函数不是原始类型，但是在 JavaScript 中，函数的值也可以作为变量、对象属性或数组元素存储和传递。因此，我们可以将函数视为一种可以存储和传递的数据类型，它们与其他数据类型一起构成了 JavaScript 中的数据类型系统。</p>\n<h2 id=\"36-Object-prototype-toString-call-是是什么，怎么用\"><a href=\"#36-Object-prototype-toString-call-是是什么，怎么用\" class=\"headerlink\" title=\"36.Object.prototype.toString.call()是是什么，怎么用\"></a>36.Object.prototype.toString.call()是是什么，怎么用</h2><p><code>Object.prototype.toString.call()</code> 是一个用于获取变量的类型信息的方法。它可以返回一个表示变量类型的字符串，例如 <code>[object Object]</code> 表示一个对象类型，<code>[object Array]</code> 表示一个数组类型，<code>[object String]</code> 表示一个字符串类型，等等。</p>\n<p>它的常见用途是用于判断一个变量的类型，尤其是在处理不同类型的数据时。例如，我们可以使用 <code>Object.prototype.toString.call()</code> 来判断一个变量是否为数组类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">console.log(Object.prototype.toString.call(arr)); // 输出 &#x27;[object Array]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们使用 <code>Object.prototype.toString.call()</code> 方法来获取 <code>arr</code> 变量的类型信息，它返回了一个字符串 <code>&#39;[object Array]&#39;</code>，表示 <code>arr</code> 是一个数组类型。</p>\n<p>需要注意的是，直接使用 <code>typeof</code> 运算符来判断一个变量的类型并不总是可靠的，因为它只能判断出原始类型和函数类型，无法判断其他类型（例如对象类型和数组类型）。因此，在实际编程中，我们通常会结合 <code>Object.prototype.toString.call()</code> 方法来判断一个变量的类型，以便使代码更加健壮、可靠。</p>\n<p>下面是一个使用 <code>Object.prototype.toString.call()</code> 方法来判断变量类型的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getType(variable) &#123;</span><br><span class=\"line\">  return Object.prototype.toString.call(variable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getType(123)); // 输出 &#x27;[object Number]&#x27;</span><br><span class=\"line\">console.log(getType(&#x27;abc&#x27;)); // 输出 &#x27;[object String]&#x27;</span><br><span class=\"line\">console.log(getType(true)); // 输出 &#x27;[object Boolean]&#x27;</span><br><span class=\"line\">console.log(getType(null)); // 输出 &#x27;[object Null]&#x27;</span><br><span class=\"line\">console.log(getType(undefined)); // 输出 &#x27;[object Undefined]&#x27;</span><br><span class=\"line\">console.log(getType(&#123;&#125;)); // 输出 &#x27;[object Object]&#x27;</span><br><span class=\"line\">console.log(getType([])); // 输出 &#x27;[object Array]&#x27;</span><br><span class=\"line\">console.log(getType(function() &#123;&#125;)); // 输出 &#x27;[object Function]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了一个名为 <code>getType</code> 的函数，它接受一个参数 <code>variable</code>，并返回 <code>Object.prototype.toString.call(variable)</code> 的结果，即变量的类型信息。通过调用 <code>getType</code> 函数，我们可以获取不同类型变量的类型信息，并进行相应的处理。例如，我们可以编写一个函数来打印不同类型的变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function printType(variable) &#123;</span><br><span class=\"line\">  let type = getType(variable);</span><br><span class=\"line\"></span><br><span class=\"line\">  switch (type) &#123;</span><br><span class=\"line\">    case &#x27;[object Number]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a number.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object String]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a string.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Boolean]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a boolean.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Null]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a null.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Undefined]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is an undefined.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Object]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is an object.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Array]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is an array.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Function]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a function.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      console.log(&#x27;This is an unknown type.&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printType(123); // 输出 &#x27;This is a number.&#x27;</span><br><span class=\"line\">printType(&#x27;abc&#x27;); // 输出 &#x27;This is a string.&#x27;</span><br><span class=\"line\">printType(true); // 输出 &#x27;This is a boolean.&#x27;</span><br><span class=\"line\">printType(null); // 输出 &#x27;This is a null.&#x27;</span><br><span class=\"line\">printType(undefined); // 输出 &#x27;This is an undefined.&#x27;</span><br><span class=\"line\">printType(&#123;&#125;); // 输出 &#x27;This is an object.&#x27;</span><br><span class=\"line\">printType([]); // 输出 &#x27;This is an array.&#x27;</span><br><span class=\"line\">printType(function() &#123;&#125;); // 输出 &#x27;This is a function.&#x27;</span><br><span class=\"line\">printType(new Date()); // 输出 &#x27;This is an unknown type.&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了一个名为 <code>printType</code> 的函数，它接受一个参数 <code>variable</code>，并根据变量的类型信息打印相应的信息。通过调用 <code>getType</code> 函数获取变量的类型信息，然后使用 <code>switch</code> 语句根据类型信息进行不同的处理。</p>\n<p>需要注意的是，在使用 <code>Object.prototype.toString.call()</code> 方法时，我们需要使用 <code>call()</code> 方法来明确指定调用对象，即 <code>Object.prototype</code>。这是因为 <code>toString()</code> 方法可以被所有 JavaScript 对象继承，但是不同对象的 <code>toString()</code> 方法可能会返回不同的值，因此我们需要使用 <code>call()</code> 方法来确保获取的是 <code>Object.prototype</code> 对象的 <code>toString()</code> 方法返回的值。</p>\n<p>下面是一个错误的示例，它没有使用 <code>call()</code> 方法，导致获取的类型信息不正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">console.log(Object.prototype.toString(arr)); // 输出 &#x27;[object Object]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们没有使用 <code>call()</code> 方法，而是直接调用 <code>Object.prototype.toString(arr)</code> 方法来获取 <code>arr</code> 的类型信息。由于 <code>toString()</code> 方法可以被所有对象继承，因此这里调用的是 <code>arr</code> 对象的 <code>toString()</code> 方法，它返回了 <code>&#39;[object Object]&#39;</code>，而不是 <code>&#39;[object Array]&#39;</code>。</p>\n<p>因此，在使用 <code>Object.prototype.toString.call()</code> 方法时，我们需要明确指定调用对象，并传递要获取类型信息的变量作为参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">console.log(Object.prototype.toString.call(arr)); // 输出 &#x27;[object Array]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们使用 <code>call()</code> 方法来明确指定调用对象为 <code>Object.prototype</code>，并传递 <code>arr</code> 变量作为参数，确保获取到的是 <code>arr</code> 变量的类型信息。</p>\n<h2 id=\"37-浏览器控制台\"><a href=\"#37-浏览器控制台\" class=\"headerlink\" title=\"37.浏览器控制台\"></a>37.浏览器控制台</h2><p>const obj = {name:’zs’,age:{year:18}} undefined 为什么浏览器上控制台会返回一个undefined ？</p>\n<p> 在控制台中输入代码时，控制台会返回最后一个表达式的结果。在你的代码中，执行了一条赋值语句 <code>const obj = &#123;name:&#39;zs&#39;,age:&#123;year:18&#125;&#125;</code>，这条语句并不会返回任何值，所以控制台返回了 <code>undefined</code>。</p>\n<p>如果你想在控制台中查看这个对象，可以在代码后面添加 <code>console.log(obj)</code> 或者直接输入 <code>obj</code>，这样控制台就会输出这个对象了。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;name:&#x27;zs&#x27;,age:&#123;year:18&#125;&#125;;</span><br><span class=\"line\">console.log(obj); // 输出 &#123;name: &quot;zs&quot;, age: &#123;year: 18&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者直接在控制台中输入 <code>obj</code>，按回车键，控制台也会输出这个对象。</p>\n<p>因此，控制台返回 <code>undefined</code> 并不代表代码出现了错误，只是最后一个表达式并没有返回任何值。</p>\n<h2 id=\"38-boostrap间距的设置\"><a href=\"#38-boostrap间距的设置\" class=\"headerlink\" title=\"38.boostrap间距的设置\"></a>38.boostrap间距的设置</h2><p>Bootstrap提供了一些CSS类来改变元素的间距、行高、文字大小和边距等样式，这些类可以通过在HTML标签中添加class属性来使用。下面是一些常用的类和其作用：</p>\n<ol>\n<li><p>间距（Spacing）：用于控制元素之间的间距。</p>\n<ul>\n<li><code>.m-*</code>：设置元素的外边距（Margin），*可以为以下值：0-5，auto。</li>\n<li><code>.p-*</code>：设置元素的内边距（Padding），*可以为以下值：0-5。</li>\n<li><code>.mx-*</code>：设置元素的左右外边距（Margin）。</li>\n<li><code>.my-*</code>：设置元素的上下外边距（Margin）。</li>\n<li><code>.px-*</code>：设置元素的左右内边距（Padding）。</li>\n<li><code>.py-*</code>：设置元素的上下内边距（Padding）。</li>\n</ul>\n</li>\n<li><p>行高（Line Height）：用于控制文本行与行之间的距离。</p>\n<ul>\n<li><code>.lh-*</code>：设置元素的行高（Line Height），*可以为以下值：1-5。</li>\n</ul>\n</li>\n<li><p>文字大小（Text Size）：用于控制文本的大小。</p>\n<ul>\n<li><code>.text-*</code>：设置元素的文本大小，<em>可以为以下值：sm（小号）、lg（大号）、</em>（默认大小）。</li>\n</ul>\n</li>\n<li><p>边距（Margin）：用于控制元素与其他元素之间的距离。</p>\n<ul>\n<li><p><code>.mt-*</code>：设置元素的上外边距（Margin Top），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.mb-*</code>：设置元素的下外边距（Margin Bottom），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.ml-*</code>：设置元素的左外边距（Margin Left），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.mr-*</code>：设置元素的右外边距（Margin Right），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.m-*</code>：设置元素的外边距（Margin），*可以为以下值：0-5，auto。 - <code>.mt-*</code>、<code>.mb-*</code>、<code>.ml-*</code>、<code>.mr-*</code>：也可以使用 <code>.m-*</code> 替代，例如 <code>.m-3</code> 相当于 <code>.mt-3 mb-3 ml-3 mr-3</code>。</p>\n<p>下面是一个示例代码，展示如何使用这些类来改变元素的样式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class=\"line\">      &lt;h1 class=&quot;text-primary text-center mt-5&quot;&gt;标题&lt;/h1&gt;</span><br><span class=\"line\">      &lt;p class=&quot;lead text-muted mx-3 my-4&quot;&gt;这是一段引导性文字。&lt;/p&gt;</span><br><span class=\"line\">      &lt;ul class=&quot;list-group list-group-flush px-4&quot;&gt;</span><br><span class=\"line\">        &lt;li class=&quot;list-group-item&quot;&gt;列表项1&lt;/li&gt;</span><br><span class=\"line\">        &lt;li class=&quot;list-group-item&quot;&gt;列表项2&lt;/li&gt;</span><br><span class=\"line\">        &lt;li class=&quot;list-group-item&quot;&gt;列表项3&lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这个代码中，我们使用了 <code>.mt-5</code>、<code>.mx-3</code>、<code>.my-4</code>、<code>.px-4</code>、<code>.list-group-flush</code> 等类来改变元素的样式。<code>.mt-5</code> 用于设置标题的上外边距为5个间距单元，<code>.mx-3</code> 和 <code>.my-4</code> 用于设置引导性文字的左右外边距和上下外边距，<code>.px-4</code> 用于设置列表的左右内边距，<code>.list-group-flush</code> 用于去除列表的边框和圆角。这些类的使用可以让我们更加方便地控制元素的样式，从而使网页设计更加美观。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"39-函数的传递\"><a href=\"#39-函数的传递\" class=\"headerlink\" title=\"39.函数的传递\"></a>39.函数的传递</h2><p>JavaScript 函数是一等公民，可以作为变量、参数或返回值在其他函数中传递，因此函数的传递成为了 JavaScript 中的常见操作。</p>\n<p>在 JavaScript 中，函数传递主要有以下几种方式：</p>\n<ol>\n<li>作为函数参数传递</li>\n<li>作为函数返回值传递</li>\n<li>作为对象属性传递</li>\n</ol>\n<p>接下来，让我们分别来详解这些方式。</p>\n<h3 id=\"作为函数参数传递\"><a href=\"#作为函数参数传递\" class=\"headerlink\" title=\"作为函数参数传递\"></a>作为函数参数传递</h3><p>在 JavaScript 中，可以将一个函数作为另一个函数的参数，从而实现进一步的功能。这种方式可以让代码更加抽象、模块化和可复用。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function square(c) &#123;</span><br><span class=\"line\">  return c * c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function compose(fn1, fn2) &#123;</span><br><span class=\"line\">  return function(x) &#123;</span><br><span class=\"line\">    return fn2(fn1(x));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var addAndSquare = compose(add, square);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(addAndSquare(2, 3)); // 25</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们定义了三个函数，其中 <code>add</code> 和 <code>square</code> 分别是两个单独的函数，而 <code>compose</code> 函数用于将两个函数连接起来，并返回一个新的函数 <code>addAndSquare</code>。在调用 <code>addAndSquare</code> 函数时，它会先执行 <code>add</code> 函数，然后将结果再传递给 <code>square</code> 函数。最终得到的结果是 25。</p>\n<p>可以看到，将函数作为参数传递，可以方便地实现代码模块化和抽象，提高代码的可读性和可维护性。</p>\n<h3 id=\"作为函数返回值传递\"><a href=\"#作为函数返回值传递\" class=\"headerlink\" title=\"作为函数返回值传递\"></a>作为函数返回值传递</h3><p>除了作为参数传递外，在 JavaScript 中，函数还可以作为返回值进行传递。这种方式通常可以用于实现柯里化（currying）和函数式编程的一些高级特性。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a) &#123;</span><br><span class=\"line\">  return function(b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var add5 = add(5);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add5(3)); // 8</span><br><span class=\"line\">console.log(add5(6)); // 11</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们定义了一个 <code>add</code> 函数，它的作用是将一个数加上另一个数。注意到 <code>add</code> 函数返回了一个匿名函数，这个匿名函数在调用时可以继续接收参数，并返回结果。</p>\n<p>通过调用 <code>add(5)</code> 这个函数，我们得到了一个新的函数 <code>add5</code>，它的作用是将一个数加上 5。这样，无论我们传入什么参数，<code>add5</code> 都会将其加上 5，并返回结果。</p>\n<p>可以看到，这种函数返回函数的方式，使我们能够更加灵活地组合和复用函数，提高了代码的可扩展性和可复用性。</p>\n<h3 id=\"作为对象属性传递\"><a href=\"#作为对象属性传递\" class=\"headerlink\" title=\"作为对象属性传递\"></a>作为对象属性传递</h3><p>另外，函数也可以作为对象属性进行传递，这种方式在事件绑定和回调函数中比较常见，可以方便地将某个对象的方法传递到其他函数中去。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  name: &#x27;Jack&#x27;,</span><br><span class=\"line\">  sayHello: function() &#123;</span><br><span class=\"line\">    console.log(`Hello, my name is $&#123;this.name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(obj.sayHello.bind(obj), 1000); // 1秒后输出 &quot;Hello, my name is Jack&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们定义了一个对象 <code>obj</code>，它包含了一个姓名属性和一个 <code>sayHello</code> 方法。在调用 <code>setTimeout</code> 函数时，我们将 <code>obj.sayHello</code> 方法作为参数传入，并在需要时通过 <code>bind</code> 方法绑定执行上下文（也就是 <code>this</code> 关键字）。</p>\n<p>在 1 秒后，<code>sayHello</code> 方法将被调用，并输出 “Hello, my name is Jack”。</p>\n<p>可以看到，将函数作为对象属性传递，可以方便地在不同的上下文中传递并执行函数，提高代码的复用性和灵活性。</p>\n<p>总结</p>\n<p>以上是 JavaScript 中函数传递的几种方式，它们为前端开发提供了更多的编程思路和技能，可以帮助我们编写更加优雅和高效的代码。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"技术总结v1-0\"><a href=\"#技术总结v1-0\" class=\"headerlink\" title=\"技术总结v1.0\"></a>技术总结v1.0</h1><h2 id=\"1-面向对象与面向过程的区别\"><a href=\"#1-面向对象与面向过程的区别\" class=\"headerlink\" title=\"1. 面向对象与面向过程的区别\"></a>1. 面向对象与面向过程的区别</h2><p>​ <strong>面向过程</strong>：是将事件分成步骤，按部就班一步一步完成的。</p>\n<p>​ <strong>面向对象</strong> ：将事件分成一个又一个对象，每个对象有自己的属性及方法。是各个对象之间的方法交互。</p>\n<h2 id=\"2-flex布局与grid布局的区别\"><a href=\"#2-flex布局与grid布局的区别\" class=\"headerlink\" title=\"2. flex布局与grid布局的区别\"></a>2. flex布局与grid布局的区别</h2><p>​ grid布局讲容器分成行与块，远比flex布局强。</p>\n<p>参考链接</p>\n<h2 id=\"3-Sass与Less的区别？用哪个好？\"><a href=\"#3-Sass与Less的区别？用哪个好？\" class=\"headerlink\" title=\"3.Sass与Less的区别？用哪个好？\"></a>3.Sass与Less的区别？用哪个好？</h2><p>​ Sass 的主版本现在已经改用 Dart 实现了，Ruby 的版本一年前就不再维护了。Sass 和 Less 的使用并没有明显的「复杂」和「简单」的区别，常用部分大同小异。Less 运行在浏览器端只是方便初学者上手，生产环境是绝对不会这么做的，都是随着前端项目一起构建，构建完之后的都是静态资源，不涉及服务端什么事。两者都有线上的 REPL，所以简单的演示代码不用担心用不了 Sass。Sass 以 $ 打头比较不容易和 CSS 标准语法冲突，Less 的语法跟 CSS 标准太像了，有时候会难以区分（Stylus 更糟糕）。Sass 和 Less 的变量机制有很大的不同，Sass 是类似 JS 的块级作用域一样，可以在作用域内重新赋值而不影响外部，Less 是以全局的最后一次赋值为准，这也是为什么大部分 UI 组件库都选择 Less。Compass 这个东西……已经没什么人在用的了，只存在于教材上的东西，忘了它吧。SASS 和 SCSS 只是两种语法风格而已，<strong>推荐使用 SCSS</strong> ，但 SASS 也没有不再支持，放到现在来看，跟版本没关系。Sass 的模块机制现在大改了，建议跟进下。不论国内外市场如何，Less 和 Sass 最常用的部分并没有明显的区别，不用太在意该用哪个，Just pick one。我个人比较偏好 Sass，生态更好（踩过 Stylus 的坑，深刻的教训），至于公司用哪个，跟着用就行，不出大问题不用考虑换。</p>\n<h2 id=\"4-sass使用过程中的问题\"><a href=\"#4-sass使用过程中的问题\" class=\"headerlink\" title=\"4.sass使用过程中的问题\"></a>4.sass使用过程中的问题</h2><h3 id=\"Easy-Sass插件没有生成-css文件问题\"><a href=\"#Easy-Sass插件没有生成-css文件问题\" class=\"headerlink\" title=\"Easy Sass插件没有生成.css文件问题\"></a>Easy Sass插件没有生成.css文件问题</h3><ul>\n<li>检查是否安装好</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass -v //检查是否安装好sass</span><br><span class=\"line\">compass -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>路径保存问题</strong>，settings.json中保存路径应该为<code>css/</code>这样才能在上一级文件夹（当前在sass文件夹内）的<code>css</code>文件夹生成对应<code>.css</code>文件。<b>ps</b>:需要自己新建<code>css</code>文件夹，不然会报错。</li>\n<li>settings.json配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;easysass.compileAfterSave&quot;: true,</span><br><span class=\"line\">&quot;easysass.formats&quot;: [ </span><br><span class=\"line\">        //nested：嵌套缩进的 css 代码。</span><br><span class=\"line\">        //expanded：没有缩进的、扩展的css代码。</span><br><span class=\"line\">        //compact：简洁格式的 css 代码。</span><br><span class=\"line\">        //compressed：压缩后的 css 代码</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;format&quot;: &quot;expanded&quot;,</span><br><span class=\"line\">            &quot;extension&quot;: &quot;.css&quot; //设置编译输出的文件名</span><br><span class=\"line\">    ],</span><br><span class=\"line\">      //这会回到根目录的css文件夹内创建同名.css文件</span><br><span class=\"line\">    &quot;easysass.targetDir&quot;: &quot;css/&quot; //提供 css 输出路径的设置.</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>需要自己提前在<strong>根目录创建好css文件夹</strong>否则会报错。</li>\n</ul>\n<h2 id=\"5-写css的命名规范–BEM\"><a href=\"#5-写css的命名规范–BEM\" class=\"headerlink\" title=\"5.写css的命名规范–BEM\"></a>5.写css的命名规范–BEM</h2><ul>\n<li>命名规范</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>参考连接<a href=\"https://zhuanlan.zhihu.com/p/122214519\">css命名规范–知乎</a></p>\n<h2 id=\"6-tree生成目录的使用\"><a href=\"#6-tree生成目录的使用\" class=\"headerlink\" title=\"6.tree生成目录的使用\"></a>6.tree生成目录的使用</h2><ul>\n<li>在在Tree for Winodws页面，下载二进制文件Binaries zip</li>\n<li>解压压缩包，找到压缩包内的 bin 目录，将 bin 目录下的 tree.exe 复制到git文件夹Git\\usr\\bin 目录下，将 tree.exe 粘贴到该目录下，安装完成，即可使用。</li>\n<li>git bash</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree -L 1 &gt;tree.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tree命令行参数\"><a href=\"#tree命令行参数\" class=\"headerlink\" title=\"tree命令行参数\"></a>tree命令行参数</h3><p>-a 显示所有文件和目录。<br><br>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。<br><br>-C 在文件和目录清单加上色彩，便于区分各种类型。<br><br>-d 显示目录名称而非内容。<br><br>-D 列出文件或目录的更改时间。<br><br>-f 在每个文件或目录之前，显示完整的相对路径名称。<br><br>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|“号。<br><br>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。<br><br>-i 不以阶梯状列出文件或目录名称。<br><br>-I 不显示符合范本样式的文件或目录名称。<br><br>-n 不在文件和目录清单加上色彩。<br><br>-N 直接列出文件和目录名称，包括控制字符。<br><br>-p 列出权限标示。<br><br>-P 只显示符合范本样式的文件或目录名称。<br><br>-q 用”?”号取代控制字符，列出文件和目录名称。<br><br>-s 列出文件或目录大小。<br><br>-t 用文件和目录的更改时间排序。<br><br>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。<br><br>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</p>\n<h2 id=\"7-this的指向\"><a href=\"#7-this的指向\" class=\"headerlink\" title=\"7.this的指向\"></a>7.this的指向</h2><ul>\n<li><strong>方法中</strong>，<code>this</code>指向方法所在的对象。</li>\n<li>单独使用<code>this</code>指向<code>window</code>。</li>\n<li>函数中<code>this</code>为函数的所有者。如果在浏览器中就是<code>window</code>。<br><br>函数默认指向最高的<code>window</code>。<br><br><b>构造函数是obj对象</b>，所以<code>this</code>会指向该构造函数（obj）。</li>\n<li><strong>事件中</strong>的<code>this</code>指向接收事件的HTML元素。因为<strong>HTML元素是对象</strong>。???</li>\n</ul>\n<h2 id=\"8-for-in-与for-of的区别\"><a href=\"#8-for-in-与for-of的区别\" class=\"headerlink\" title=\"8.for in 与for of的区别\"></a>8.for in 与for of的区别</h2><ul>\n<li><code>for in</code>其中的参数保存的是<strong>键名</strong>，而<code>for of</code>其中的参数保存的是<strong>键值</strong>。</li>\n</ul>\n<h2 id=\"9-逻辑中断\"><a href=\"#9-逻辑中断\" class=\"headerlink\" title=\"9.逻辑中断\"></a>9.逻辑中断</h2><ul>\n<li>某些场景用来替代if-else操作，默认值</li>\n<li><code>&amp;</code>中断，左边false中断</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = false &amp;&amp; 5 //false</span><br><span class=\"line\">let a = true &amp;&amp; 5 // 5</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>||</code>中断，左边true中断</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = true || 5 // true</span><br><span class=\"line\">let a = false || 5 // 5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-原型与原型链与原型对象\"><a href=\"#10-原型与原型链与原型对象\" class=\"headerlink\" title=\"10.原型与原型链与原型对象\"></a>10.原型与原型链与原型对象</h2><p><a href=\"https://juejin.cn/post/6984678359275929637#comment\">https://juejin.cn/post/6984678359275929637#comment</a>这篇文章写的十分透彻</p>\n<h3 id=\"10-1构造函数创建实例对象过程？\"><a href=\"#10-1构造函数创建实例对象过程？\" class=\"headerlink\" title=\"10.1构造函数创建实例对象过程？\"></a>10.1构造函数创建实例对象过程？</h3><p>  1、创建新对象<br>  <br>2、将构造函数作用域赋值给新对象（this指向新对象）<br>  <br>3、执行构造函数中的代码，给实例对象添加实例属性和实例方法。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // 构造函数</span><br><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成实例</span><br><span class=\"line\">const p = new Person(&#x27;zhangsan&#x27;, 18);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2原型对象\"><a href=\"#10-2原型对象\" class=\"headerlink\" title=\"10.2原型对象\"></a>10.2原型对象</h3><p>  <code>函数</code>在创建时会生成一个<code>prototype</code>属性，该属性<code>指向一个对象</code>，这个对象就是<code>原型对象</code><br><img src=\"/images/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp\"></p>\n<h3 id=\"10-3原型链\"><a href=\"#10-3原型链\" class=\"headerlink\" title=\"10.3原型链\"></a>10.3原型链</h3><ul>\n<li>通过<code>构造函数</code>创建出的<code>实例对象</code>有个<code>_proto_</code>属性，该属性指向<code>实例对象的构造函数的原型对象</code><br><img src=\"/images/%E5%AE%9E%E4%BE%8B%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.awebp\"><br>其实就是<code>实例的_proto_</code>指向<code>原型对象</code>,同时<code>构造函数的prototype</code>也指向<code>原型对象</code>。</li>\n<li><strong>原型链</strong>就是访问对象属性时，查找对象有没有查找的对象，没有就找<code>_proto_的原型对象（构造函数的prototype）</code>，还是没有就找<code>原型对象的_proto_查找</code>，因此形成原型链。</li>\n<li>原型链的尽头是<code>null</code></li>\n</ul>\n<h3 id=\"10-4在构造函数原型对象修改属性\"><a href=\"#10-4在构造函数原型对象修改属性\" class=\"headerlink\" title=\"10.4在构造函数原型对象修改属性\"></a>10.4在构造函数原型对象修改属性</h3><ul>\n<li>要让所有实例共享构造函数属性，添加或删改内在的属性或方法，应该在<code>构造函数的prototype（原型对象）</code>去更改。</li>\n<li>在实例对象修改<code>_proto_</code>会影响<strong>所有共享构造函数</strong>的实例对象。</li>\n</ul>\n<h3 id=\"10-5GPT的说法\"><a href=\"#10-5GPT的说法\" class=\"headerlink\" title=\"10.5GPT的说法\"></a>10.5GPT的说法</h3><p>在 JavaScript 中，每个对象都有一个原型对象（prototype），它定义了该对象的属性和方法。当访问一个对象的属性或方法时，如果该对象本身没有定义该属性或方法，则会沿着原型链向上查找，直到找到该属性或方法为止。</p>\n<p>原型链是由一系列原型对象组成的链式结构，它描述了对象之间的继承关系。每个对象都有一个原型对象，如果对象 A 的原型对象是对象 B，那么对象 A 就可以继承对象 B 中定义的属性和方法。</p>\n<p>原型对象可以通过函数的 <code>prototype</code> 属性进行访问和修改。例如，可以定义一个构造函数 <code>Person</code>，并在其原型对象上添加一个方法 <code>sayHello()</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;`)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let person = new Person(&#x27;John&#x27;)</span><br><span class=\"line\">person.sayHello() // 输出：Hello, my name is John</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>Person</code> 函数定义了一个 <code>name</code> 属性，并在其原型对象上添加了一个 <code>sayHello()</code> 方法。当创建一个 <code>Person</code> 对象时，可以通过 <code>new</code> 运算符调用 <code>Person</code> 函数，并返回一个新的对象。这个新对象的原型对象指向 <code>Person.prototype</code>，因此可以访问 <code>sayHello()</code> 方法。</p>\n<p>需要注意的是，原型对象是在对象创建时动态生成的，因此可以在运行时动态地修改原型对象。同时，原型对象是基于引用的，即多个对象可以共享同一个原型对象。这种机制不仅可以提高代码的复用性，还能够实现面向对象编程中的继承和多态等特性。</p>\n<h3 id=\"10-6为什么有原型链？\"><a href=\"#10-6为什么有原型链？\" class=\"headerlink\" title=\"10.6为什么有原型链？\"></a>10.6为什么有原型链？</h3><p>JavaScript 之所以有原型链，是因为其是一种基于<strong>原型继承</strong>的面向对象编程语言。在 JavaScript 中，<code>每个对象都有一个指向其原型的内部链接</code>，这个链接被称为原型链。</p>\n<p>当我们访问一个对象的属性或方法时，如果当前对象没有这个属性或方法，JavaScript 引擎就会去该对象的原型对象中查找是否有这个属性或方法。如果原型对象中也没有这个属性或方法，那么就会继续在原型对象的原型对象中查找，直到找到 Object.prototype 对象为止，如果还没有找到，则返回 undefined。</p>\n<p>这样的设计可以让对象之间实现继承，从而使得代码更加简洁、灵活和可重用。通过在原型对象中定义方法和属性，我们可以让所有基于该原型的对象都共享这些方法和属性，从而避免在每个对象中都定义一遍，提高了代码的复用性和效率。</p>\n<p>因此，原型链是 JavaScript 面向对象编程的一个重要特性，也是理解 JavaScript 中对象和继承机制的关键。</p>\n<h3 id=\"10-7浏览器的-prototype-是什么\"><a href=\"#10-7浏览器的-prototype-是什么\" class=\"headerlink\" title=\"10.7浏览器的[[prototype]]是什么\"></a>10.7浏览器的[[prototype]]是什么</h3><p>在JavaScript中，每个对象都有一个原型对象（即_proto_属性），它决定了对象的属性和方法。同时，每个构造函数也有一个原型对象（即prototype属性），它是通过new操作符创建的实例的原型对象。</p>\n<p>在浏览器中，对象的_proto_属性通常被称为对象的“隐式原型”（implicit prototype），它指向该对象的原型对象。而该对象的原型对象通常被称为对象的“显示原型”（explicit prototype），它是一个对象，它包含了该对象的属性和方法。</p>\n<p>具体来说，浏览器中的对象的[[prototype]]属性（即_proto_属性）指向该对象的原型对象，它是一个内部属性，通常无法直接访问。而该对象的原型对象通常是通过构造函数的prototype属性设置的，从而让该对象可以访问到构造函数中定义的属性和方法。</p>\n<p>例如，以下代码演示了在浏览器中创建对象时的[[prototype]]属性和prototype属性的关系：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个构造函数</span><br><span class=\"line\">function Person(name) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在构造函数的原型对象中定义一个方法</span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个Person对象</span><br><span class=\"line\">const person = new Person(&#x27;Tom&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出person对象的[[prototype]]属性</span><br><span class=\"line\">console.log(person.__proto__); // 输出：Person &#123;sayHello: ƒ, constructor: ƒ&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出person对象的构造函数</span><br><span class=\"line\">console.log(person.constructor); // 输出：ƒ Person(name) &#123;this.name = name;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用person对象的方法</span><br><span class=\"line\">person.sayHello(); // 输出：Hello, my name is Tom</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个构造函数Person，然后在它的原型对象中定义了一个方法sayHello。接着，我们使用new操作符创建了一个Person对象，并输出了它的[[prototype]]属性和constructor属性。可以看到，person对象的[[prototype]]属性指向了Person构造</p>\n<h2 id=\"11-自增的数据类型转换\"><a href=\"#11-自增的数据类型转换\" class=\"headerlink\" title=\"11.自增的数据类型转换\"></a>11.自增的数据类型转换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 =<span class=\"string\">&quot;w&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bin = <span class=\"number\">1.1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o =&#123;</span><br><span class=\"line\"> <span class=\"attr\">valueOf</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">a1++;</span><br><span class=\"line\">a2++;</span><br><span class=\"line\">b1++;</span><br><span class=\"line\">bin--;</span><br><span class=\"line\">o--;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a1);  <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a2);  <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b1);  <span class=\"comment\">//0.10000000000000009</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bin);  <span class=\"comment\">//1.1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o);   <span class=\"comment\">//-2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-闭包的理解\"><a href=\"#12-闭包的理解\" class=\"headerlink\" title=\"12.闭包的理解\"></a>12.闭包的理解</h2><p>闭包是指在函数内部定义的函数可以访问函数外部的变量，即使在函数外部这些变量已经不可访问。闭包通常由一个函数和在该函数内部定义的另一个函数组成，在内部函数中可以访问外部函数的变量和参数，即使在外部函数执行完毕后，这些变量和参数仍然可以被内部函数访问。</p>\n<p>闭包的概念可能比较抽象，以下是一个例子来帮助理解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function outer() &#123;</span><br><span class=\"line\">  let count = 0</span><br><span class=\"line\">  function inner() &#123;</span><br><span class=\"line\">    count++</span><br><span class=\"line\">    console.log(count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return inner</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let fn = outer()</span><br><span class=\"line\">fn() // 1</span><br><span class=\"line\">fn() // 2</span><br><span class=\"line\">fn() // 3</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，函数 <code>outer</code> 内部定义了一个变量 <code>count</code> 和一个函数 <code>inner</code>，<code>inner</code> 函数可以访问 <code>outer</code> 函数中的变量 <code>count</code>。<code>outer</code> 函数最终返回 <code>inner</code> 函数，并将其赋值给变量 <code>fn</code>。</p>\n<p>当执行 <code>fn()</code> 的时候，实际上是在执行 <code>inner()</code> 函数，因此每次执行 <code>fn()</code> 都会输出 <code>count</code> 变量的值，并将其自增。由于 <code>count</code> 变量是在 <code>outer</code> 函数中定义的，因此在 <code>inner</code> 函数中也可以访问和修改 <code>count</code> 变量的值，即使 <code>outer</code> 函数已经执行完毕。</p>\n<p>这个例子就展示了一个闭包的具体实现：内部函数 <code>inner</code> 可以访问外部函数 <code>outer</code> 中的变量 <code>count</code>，即使 <code>outer</code> 函数执行完毕后这个变量仍然可以被访问和修改。闭包可以用于实现一些高级的 JavaScript 技术，例如柯里化、函数式编程、模块化等。</p>\n<h2 id=\"13-函数式编程\"><a href=\"#13-函数式编程\" class=\"headerlink\" title=\"13.函数式编程\"></a>13.函数式编程</h2><p>函数式编程是一种编程范式，它是一种程序设计的风格，强调函数的使用来构建软件应用程序。它是一种声明式编程，而不是命令式编程。在函数式编程中，程序由许多小的、可组合的函数组成，每个函数都有一个明确定义的输入和输出，不会修改函数外的状态。函数式编程的目标是编写简单、可读、可维护和可扩展的代码。</p>\n<p>函数式编程的一些特征包括：</p>\n<ul>\n<li>纯函数：函数的输出仅取决于输入，而不依赖于任何外部状态或副作用。</li>\n<li>不可变性：数据不可被修改，一旦创建就不能再改变，因此任何对数据的修改都会创建一个新的数据对象。</li>\n<li>高阶函数：函数可以作为参数传递给其他函数，也可以返回其他函数。</li>\n<li>延迟执行：表达式的求值被延迟到需要使用它的时候。</li>\n<li>函数组合：将函数组合起来构建更复杂的函数。</li>\n</ul>\n<p>函数式编程有许多优点，例如代码简洁、可读性高、易于测试、可维护性强、并发性好等。它在处理大规模数据、并发编程和分布式系统方面具有巨大的优势。在 JavaScript 中，函数式编程的特征可以通过使用高阶函数和内置的 <code>Array</code> 方法如 <code>map()</code>、<code>filter()</code>、<code>reduce()</code> 等来实现。</p>\n<h2 id=\"14-开源项目怎么学习\"><a href=\"#14-开源项目怎么学习\" class=\"headerlink\" title=\"14.开源项目怎么学习\"></a>14.开源项目怎么学习</h2><p>学习开源项目需要一定的技能和经验，以下是一些建议：</p>\n<ol>\n<li>了解项目：在探索一个新的开源项目之前，应该先了解项目的背景、目的和技术栈等信息。这可以通过项目的文档、代码库、社区和邮件列表等渠道来获取。</li>\n<li>安装和运行代码：安装和运行代码是了解项目的一个重要部分。这可以通过阅读项目的文档和代码库来完成。如果遇到问题，可以查看项目的社区和邮件列表，也可以尝试在开发者社区中提问。</li>\n<li>阅读代码：阅读代码是了解项目的另一个重要部分。可以通过阅读项目的代码库来了解代码的结构、功能和实现细节。此外，还可以使用调试工具来了解代码的执行过程。</li>\n<li>参与社区：参与社区是学习开源项目的另一个重要部分。可以通过参加社区讨论、提供反馈和贡献代码等方式来参与项目。这可以帮助学习项目，并建立联系和信任。</li>\n<li>贡献代码：贡献代码是学习开源项目的最终目标之一。可以通过提供修复错误、新增功能、重构代码等方式来贡献代码。这可以帮助学习项目的实现和贡献开源社区。</li>\n</ol>\n<p>总之，学习开源项目需要花费一定的时间和精力。一旦掌握了这些技巧和经验，就可以更轻松地了解和贡献开源项目。</p>\n<h3 id=\"源代码的阅读\"><a href=\"#源代码的阅读\" class=\"headerlink\" title=\"源代码的阅读\"></a>源代码的阅读</h3><p>阅读源代码可以帮助深入了解项目的实现细节和结构，以下是一些阅读源代码的建议：</p>\n<ol>\n<li>了解项目结构：在阅读代码之前，应该先了解项目的目录结构和文件组织方式。这可以帮助理解代码中各个模块和组件之间的关系和依赖关系。</li>\n<li>阅读文档：阅读项目的文档可以帮助了解项目的功能、设计和代码结构。这可以帮助理解代码的目的和实现细节，减少阅读代码的时间和难度。</li>\n<li>阅读代码注释：阅读代码注释可以帮助理解代码的实现细节和目的。注释应该提供有关代码结构、函数用途、变量定义等方面的信息。</li>\n<li>使用调试工具：使用调试工具可以帮助了解代码的执行过程和调用关系。可以使用调试器、日志和断点来追踪代码的执行路径和状态变化。</li>\n<li>运行示例代码：运行示例代码可以帮助理解代码的实现和功能。可以尝试运行和调试示例代码，并尝试修改代码和观察结果。</li>\n<li>尝试重构代码：尝试重构代码可以帮助理解代码的结构和逻辑。可以尝试删除冗余代码、合并函数或变量、提取公共代码块等操作，以改善代码的可读性和维护性。</li>\n</ol>\n<p>总之，在阅读源代码时，应该有一个系统性的方法来了解项目的结构和实现细节。可以阅读文档和代码注释，使用调试工具和运行示例代码，并尝试重构代码以提高代码的可读性和维护性。</p>\n<h2 id=\"15-魔术字符串\"><a href=\"#15-魔术字符串\" class=\"headerlink\" title=\"15. 魔术字符串\"></a>15. 魔术字符串</h2><p>魔术字符串是指在代码中多次出现的、与代码实现相关的、没有被封装成常量或变量的字符串。这些字符串通常被直接硬编码在代码中，而没有使用变量或常量的形式来表示。</p>\n<p>魔术字符串有以下几个问题：</p>\n<ol>\n<li>可读性差：魔术字符串通常没有描述性的名称，使用它们的代码难以理解和阅读。</li>\n<li>维护性差：魔术字符串存在于代码的多个地方，如果需要修改它们，就需要在多个地方进行修改，增加了代码的维护成本。</li>\n<li>可重用性差：魔术字符串通常不能被重用，如果需要在代码的不同地方使用相同的字符串，就需要重复硬编码这些字符串，增加了代码的冗余。</li>\n</ol>\n<p>为了解决这些问题，可以将魔术字符串封装成常量或变量。这样可以提高代码的可读性、维护性和可重用性。</p>\n<p>例如，下面的代码中使用了魔术字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getUserRole(user) &#123;</span><br><span class=\"line\">  if (user.role === &#x27;admin&#x27;) &#123;</span><br><span class=\"line\">    return &#x27;admin&#x27;;</span><br><span class=\"line\">  &#125; else if (user.role === &#x27;manager&#x27;) &#123;</span><br><span class=\"line\">    return &#x27;manager&#x27;;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return &#x27;guest&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以将魔术字符串封装成常量形式，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ROLE_ADMIN = &#x27;admin&#x27;;</span><br><span class=\"line\">const ROLE_MANAGER = &#x27;manager&#x27;;</span><br><span class=\"line\">const ROLE_GUEST = &#x27;guest&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function getUserRole(user) &#123;</span><br><span class=\"line\">  if (user.role === ROLE_ADMIN) &#123;</span><br><span class=\"line\">    return ROLE_ADMIN;</span><br><span class=\"line\">  &#125; else if (user.role === ROLE_MANAGER) &#123;</span><br><span class=\"line\">    return ROLE_MANAGER;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return ROLE_GUEST;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样可以提高代码的可读性、维护性和可重用性，减少代码中的冗余和错误。</p>\n<h2 id=\"16-对象的计算属性\"><a href=\"#16-对象的计算属性\" class=\"headerlink\" title=\"16. 对象的计算属性\"></a>16. 对象的计算属性</h2><h3 id=\"16-1-计算属性\"><a href=\"#16-1-计算属性\" class=\"headerlink\" title=\"16.1 计算属性\"></a>16.1 计算属性</h3><p>在 JavaScript 中，对象的属性名可以是字符串或 Symbol 类型。在这个例子中，<code>val.name</code> 是一个字符串类型，而我们需要将它作为属性名添加到对象中。因为对象属性名需要满足标识符的命名规则，所以我们需要将 <code>val.name</code> 包含在方括号中，将它作为属性名添加到对象中。这种方式被称为计算属性名，它可以让我们在对象字面量中使用表达式作为属性名。</p>\n<p>例如，如果我们想要使用一个变量作为属性名，就可以使用计算属性名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const propName = &#x27;name&#x27;;</span><br><span class=\"line\">const person = &#123;</span><br><span class=\"line\">  [propName]: &#x27;Alice&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(person); // &#123; name: &#x27;Alice&#x27; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>[propName]</code> 就是一个计算属性名，它会将 <code>propName</code> 的值作为属性名添加到对象中。</p>\n<p>在我们的代码中，<code>&#123;[val.name]: val.age&#125;</code> 就是一个计算属性名，它会将 <code>val.name</code> 的值作为属性名添加到对象中，同时将 <code>val.age</code> 的值作为属性值添加到对象中。</p>\n<h3 id=\"16-2对象的键值类型\"><a href=\"#16-2对象的键值类型\" class=\"headerlink\" title=\"16.2对象的键值类型\"></a>16.2对象的键值类型</h3><p>在 JavaScript 中，对象的键值可以是字符串类型或符号类型。</p>\n<p>通常，我们使用字符串作为对象的键值，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;John&#x27;,</span><br><span class=\"line\">  age: 30,</span><br><span class=\"line\">  &#x27;last name&#x27;: &#x27;Doe&#x27;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，对象 <code>obj</code> 中的键值分别是 <code>name</code>、<code>age</code> 和 <code>last name</code>，它们都是字符串类型。</p>\n<p>然而，在ES6引入符号类型（Symbol）之后，我们也可以使用符号作为对象的键值，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mySymbol = Symbol(&#x27;mySymbol&#x27;);</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  [mySymbol]: &#x27;Hello World&#x27;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们创建了一个符号 <code>mySymbol</code>，然后将其作为对象 <code>obj</code> 的键值，键名用方括号括起来。符号类型的键值在一些特定场景中很有用，例如在定义私有属性或者避免键名冲突时。需要注意的是，符号类型的键值是唯一的，它们不会与其他键名冲突。</p>\n<h3 id=\"16-3变量名作为键名\"><a href=\"#16-3变量名作为键名\" class=\"headerlink\" title=\"16.3变量名作为键名\"></a>16.3变量名作为键名</h3><p>可以，JavaScript 中对象的键名可以使用变量来动态生成。</p>\n<p>例如，可以使用变量作为对象的键名，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const key = &#x27;name&#x27;;</span><br><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  [key]: &#x27;John&#x27;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(obj.name); // 输出 &quot;John&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们使用变量 <code>key</code> 来定义对象 <code>obj</code> 中的键名，这个键名是动态生成的。使用方括号语法，将变量 <code>key</code> 包裹在其中，就可以将其解析为一个字符串，作为对象的键名。</p>\n<p>需要注意的是，由于 JavaScript 对象的键名只能是字符串类型或符号类型，因此变量 <code>key</code> 中存储的值必须是字符串类型或符号类型，否则会导致语法错误。</p>\n<h2 id=\"17-Object-defineProperty\"><a href=\"#17-Object-defineProperty\" class=\"headerlink\" title=\"17. Object.defineProperty\"></a>17. Object.defineProperty</h2><p>Object.defineProperty是一个内建对象函数，它用于给对象定义属性。它允许你定义一个对象的新属性或修改对象的已有属性，并且可以控制一些属性的行为，例如可写、可枚举和可配置等。</p>\n<p>Object.defineProperty的语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>obj：要定义属性的对象。</li>\n<li>prop：需要定义或修改的属性的名称。</li>\n<li>descriptor：一个对象，用来描述这个属性的特性。</li>\n</ul>\n<p>descriptor参数可以包含以下属性：</p>\n<ul>\n<li>value：属性的值，默认为undefined。</li>\n<li>writable：布尔值，表示属性是否可写。默认false。</li>\n<li>enumerable：布尔值，表示属性是否可枚举。默认false。</li>\n<li>configurable：布尔值，表示可配置性。默认false。</li>\n<li>get：取值函数，当访问该属性时，会调用此函数。默认为undefined。</li>\n<li>set：赋值函数，当属性值改变时，会调用此函数。默认为undefined。</li>\n</ul>\n<p>举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加普通属性</span><br><span class=\"line\">obj.a = 123;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义属性方式一</span><br><span class=\"line\">Object.defineProperty(obj, &#x27;b&#x27;, &#123;</span><br><span class=\"line\">  value: 456,</span><br><span class=\"line\">  writable: true,</span><br><span class=\"line\">  enumerable: true,</span><br><span class=\"line\">  configurable: true</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义属性方式二</span><br><span class=\"line\">let c = 789;</span><br><span class=\"line\">Object.defineProperty(obj, &#x27;c&#x27;, &#123;</span><br><span class=\"line\">  get() &#123;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set(newValue) &#123;</span><br><span class=\"line\">    console.log(`New value of c is: $&#123;newValue&#125;`)</span><br><span class=\"line\">    c = newValue;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  enumerable: true,</span><br><span class=\"line\">  configurable: true</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码将obj对象添加了三个属性，其中b和c使用了Object.defineProperty进行定义，b是一个普通的数据属性，而c具有getter和setter方法，在读取和修改c属性时会触发这两个方法，并输出日志。</p>\n<p>需要注意的是，使用Object.defineProperty定义的属性有些限制：</p>\n<ol>\n<li>__proto__属性不能被定义，必须使用Object.getPrototypeOf()方法访问。</li>\n<li>可以使用Object.getOwnPropertyDescriptors()方法获取到一个属性的完整描述符，并复制到新对象中。</li>\n<li>可以在同一对象上定义多个同名属性。会覆盖之前定义的。</li>\n<li>原型上的属性在遍历时不会出现。只能定义可枚举或不可枚举的属性。</li>\n<li>不能将数据属性定义为不可配置后再将其转换为访问器属性或反之。</li>\n<li>不能将一个访问器属性定义为可写或可配置的，或者同时修改一个访问器描述符的值和getter或setter的描述符的值。</li>\n</ol>\n<p>综上，要使用Object.defineProperty需谨慎，需要清楚地了解其限制和使用场景。在实际开发中，我们通常使用ES6引入的class语法糖和语法规范中的getter和setter来更方便地操作对象的属性。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  // 使用语法糖定义私有变量_name</span><br><span class=\"line\">  #_name;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.#_name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 定义公共的getter和setter访问私有变量_name</span><br><span class=\"line\">  get name() &#123;</span><br><span class=\"line\">    return this.#_name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  set name(newName) &#123;</span><br><span class=\"line\">    this.#_name = newName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&#x27;Tom&#x27;);</span><br><span class=\"line\">console.log(person.name); // &quot;Tom&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">person.name = &#x27;Jerry&#x27;</span><br><span class=\"line\">console.log(person.name); // &quot;Jerry&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码演示了如何使用class语法糖来简单地定义一个Person类，并使用getter和setter访问私有变量。UIColor、UIFont等常见第三方库也大量采用了这种语法糖的应用，代码更加清新易读。</p>\n<p>通过语法糖和规范进行属性定义的好处是，不用过多考虑对象属性的具体实现和私有特性，从而提高代码的可读性和可维护性。</p>\n<h2 id=\"19-Vue什么是响应式数据绑定\"><a href=\"#19-Vue什么是响应式数据绑定\" class=\"headerlink\" title=\"19.Vue什么是响应式数据绑定\"></a>19.Vue什么是响应式数据绑定</h2><p>在Vue中，响应式的数据绑定是一种机制，它允许数据与视图之间建立实时的关联，当数据发生变化时，视图会自动更新以反映数据的最新状态。这种机制允许开发者以一种更加声明式和简单的方式进行数据处理和组件化开发。</p>\n<p>Vue中的响应式数据绑定是通过Vue实例中的数据对象，以及Vue组件中的props和data对象来实现的。结合Vue的模板系统和组件化开发机制，开发者可以以一种容易理解、易于维护的方式进行应用程序开发。</p>\n<p>Vue是如何实现响应式数据绑定的呢？Vue在使用数据对象时，会将数据对象转换为getter/setter形式，当数据发生变化时，setter函数会被触发，并通知Vue框架数据发生了变化。Vue会自动检测数据对象的变化，并将数据的变化反映在相关的视图上。这种机制允许我们在Vue中声明式地描述我们的应用状态，而不需要手动更新DOM，从而实现更少的模版代码和更少的样板代码。</p>\n<p>例如，在Vue模板中，可以通过v-model指令绑定到表单元素上，实现双向数据绑定：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;input v-model=&quot;message&quot; placeholder=&quot;Enter your message&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &#x27;Hello Vue!&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，v-model指令允许我们将input元素与message变量绑定起来。当input元素的值发生变化时，Vue会自动将变化的内容赋值给message变量，当message变量发生变化时，Vue会自动更新视图以反映数据的最新状态。这就是Vue响应式的数据绑定机制。</p>\n<h2 id=\"20-Vue生命周期流程\"><a href=\"#20-Vue生命周期流程\" class=\"headerlink\" title=\"20. Vue生命周期流程\"></a>20. Vue生命周期流程</h2><p>在 Vue.js 中，每个组件实例都会经历一系列的生命周期过程。这些生命周期过程由一系列的钩子函数组成，这些钩子函数可以在不同的生命周期步骤中执行代码逻辑，以响应特定的事件或执行必要的操作。</p>\n<p>以下是 Vue.js 组件生命周期的流程：</p>\n<ol>\n<li>创建阶段</li>\n</ol>\n<ul>\n<li><code>beforeCreate</code>：在实例初始化之后，数据观测（data observer）和事件配置之前被调用，此时 <code>vue</code> 实例的挂载阶段还没有开始。</li>\n<li><code>created</code>：实例已经完全创建，属性和方法都已经完成配置。需要注意的是此阶段不能更新属性和 DOM，此时 <code>$el</code> 还不存在。</li>\n</ul>\n<ol>\n<li>挂载阶段</li>\n</ol>\n<ul>\n<li><code>beforeMount</code>：在挂载开始之前被调用。此时 <code>vue</code> 实例的 <code>$el</code> 和 <code>data</code> 都已经初始化，但并未创建真正的 <code>DOM</code> 节点。</li>\n<li><code>mounted</code>：在实例挂载到 <code>DOM</code> 后被调用。此时 <code>vue</code> 实例已经构建完成，可以操作 <code>DOM</code>，初始化发生在该钩子内部。</li>\n</ul>\n<ol>\n<li>更新阶段</li>\n</ol>\n<ul>\n<li><code>beforeUpdate</code>：在响应式数据发生改变时，虚拟 <code>DOM</code> 重新渲染和打补丁之前被调用。此时可以进行必要的更新准备工作。</li>\n<li><code>updated</code>：当虚拟 <code>DOM</code> 重新渲染和打补丁之后调用。假如要对 <code>DOM</code> 进行更改会触发该钩子，注意不要在此修改数据，会导致无限循环。</li>\n</ul>\n<ol>\n<li>销毁阶段</li>\n</ol>\n<ul>\n<li><code>beforeDestroy</code>：实例销毁之前调用。此时实例仍然完全可用，可以进行必要的清理工作，如清除定时器、解绑事件等等。</li>\n<li><code>destroyed</code>：实例销毁之后调用。调用该钩子之后，vue 实例以及所有的事件监听器会被移除，所有与实例相关的指令、过滤器等也会被销毁。</li>\n</ul>\n<ol>\n<li>激活与停用阶段</li>\n</ol>\n<ul>\n<li><code>activated</code>: 被 keep-alive 缓存的组件激活时调用</li>\n<li><code>deactivated</code>: 被 keep-alive 缓存的组件停用时调用</li>\n</ul>\n<p>上述的生命周期钩子用于对应不同的组件状态，并且也为开发者提供了丰富的扩展能力，使用这些钩子函数，开发者可以在不同的状态阶段下进行相应的操作或处理业务逻辑。</p>\n<img src=\"./images/生命周期.png\">\n\n<hr>\n<p>在整个 Vue.js 组件生命周期的过程中，可以看到一些重要的时机：</p>\n<ul>\n<li>在 <code>beforeCreate</code> 钩子函数中，实例已经完成了 <code>data</code> 对象的初始化，但还没有完成 <code>$el</code> 和事件的初始化。</li>\n<li>在 <code>created</code> 钩子函数中，除了可以访问 <code>$data</code> 和 <code>$el</code> 对象之外，其他的一切都需要等到挂载阶段才能访问到。</li>\n<li>在 <code>beforeMount</code> 钩子函数中，Vue.js 将开始创建组件的真实 <code>DOM</code>。此时，组件的 <code>$el</code> 属性已经存在，但是还没有挂载到实际的页面上。</li>\n<li>在 <code>mounted</code> 钩子函数中，Vue.js 完成了组件的挂载过程，并将组件的 <code>DOM</code> 添加到页面中。</li>\n<li>在 <code>beforeUpdate</code> 钩子函数中，响应式数据发生了变化，但是尚未对组件进行重新渲染。</li>\n<li>在 <code>updated</code> 钩子函数中，组件完成了重新渲染，并更新了 <code>DOM</code>。</li>\n<li>在 <code>beforeDestroy</code> 钩子函数中，组件即将被销毁，但仍然可以访问 <code>$data</code> 和 <code>$el</code> 等属性。</li>\n<li>在 <code>destroyed</code> 钩子函数中，组件已经被销毁，所有的事件监听器和指令等都已经被移除。</li>\n</ul>\n<hr>\n<p>下面是一个简单的 Vue.js 组件项目，展示了 Vue.js 生命周期的完整流程及各个时机绑定的钩子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;root&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;updateMessage&quot;&gt;Update Message&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &#x27;Hello, Vue.js!&#x27;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeCreate() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeCreate&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created() &#123;</span><br><span class=\"line\">    console.log(&#x27;created&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeMount&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    console.log(&#x27;mounted&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUpdate() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeUpdate&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated() &#123;</span><br><span class=\"line\">    console.log(&#x27;updated&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy() &#123;</span><br><span class=\"line\">    console.log(&#x27;beforeDestroy&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    console.log(&#x27;destroyed&#x27;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    updateMessage() &#123;</span><br><span class=\"line\">      this.message = &#x27;Updated message!&#x27;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了一个简单的组件，其中包含一个 <code>message</code> 数据属性和一个按钮，点击按钮之后可以更新 <code>message</code> 的值。在组件中，我们绑定了 Vue.js 生命周期中的所有钩子函数，并通过控制台输出相应的消息来表示当前执行的生命周期钩子。</p>\n<p>在组件的生命周期中，当组件被创建时，Vue.js 会依次触发 <code>beforeCreate</code> 和 <code>created</code> 钩子函数，在 <code>created</code> 钩子函数中可以访问组件 <code>data</code> 数据和 <code>el</code> 元素，但此时组件尚未挂载到页面中。接下来，当 Vue.js 开始挂载组件时，会依次触发 <code>beforeMount</code> 和 <code>mounted</code> 钩子函数，在 <code>mounted</code> 钩子函数中组件已经被挂载到页面中，此时可以对 <code>this.$el</code> 进行相关操作。</p>\n<p>在组件挂载后，如果组件中的 <code>data</code> 有变化，那么 Vue.js 会依次触发 <code>beforeUpdate</code> 和 <code>updated</code> 钩子函数，分别表示数据更新前后的状态。在所有的钩子函数执行完成后，Vue.js 会在组件销毁时依次触发 <code>beforeDestroy</code> 和 <code>destroyed</code> 钩子函数，分别表示销毁前和销毁后的状态，这个时候应该清除所有的事件监听器和定时器，否则可能会造成内存泄漏的问题。</p>\n<p>通过这个示例，可以更好地理解 Vue.js 的生命周期过程，并注意在不同的生命周期阶段下执行不同的操作，从而使组件功能更加完善和稳定。</p>\n<h2 id=\"21-箭头函数的带大括号与不带大括号的区别\"><a href=\"#21-箭头函数的带大括号与不带大括号的区别\" class=\"headerlink\" title=\"21.箭头函数的带大括号与不带大括号的区别\"></a>21.箭头函数的带大括号与不带大括号的区别</h2><p><code>(x) =&gt; x + 1</code> 与 <code>(x) =&gt; &#123;x + 1&#125;</code> 的区别是：</p>\n<ul>\n<li><code>(x) =&gt; x + 1</code> 是一个箭头函数，它接受一个参数 <code>x</code>，返回 <code>x+1</code> 的结果。</li>\n<li><code>(x) =&gt; &#123;x + 1&#125;</code> 也是一个箭头函数，但是它使用了花括号 <code>&#123;&#125;</code>，其中包含了一个语句 <code>x + 1</code>。由于花括号中包含语句而非表达式，因此需要使用 <code>return</code> 语句将结果返回。</li>\n</ul>\n<p>具体来说，<code>(x) =&gt; &#123;x + 1&#125;</code> 不会直接返回 <code>x + 1</code> 的结果，而是返回 <code>undefined</code>，因为花括号中并没有 <code>return</code> 语句将结果返回。因此需要将其改写为 <code>(x) =&gt; &#123;return x + 1;&#125;</code> 或 <code>function(x)&#123;return x + 1;&#125;</code> 才能实现与 <code>(x) =&gt; x + 1</code> 相同的功能。</p>\n<p>综上，<code>(x) =&gt; x + 1</code> 是一个返回表达式的箭头函数，而 <code>(x) =&gt; &#123;x + 1&#125;</code> 则是一个返回 <code>undefined</code> 的箭头函数，需要使用 <code>return</code> 语句明确返回结果。</p>\n<h2 id=\"22-依赖关系\"><a href=\"#22-依赖关系\" class=\"headerlink\" title=\"22.依赖关系\"></a>22.依赖关系</h2><p>依赖关系指的是一个模块（类、函数、对象等）依赖于其他模块，即它使用了其他模块中的功能或数据。这种依赖关系可以表现为代码中的函数调用、对象引用、类继承等形式。</p>\n<p>在软件开发中，模块化是一种常见的编程思想，它将一个大型的应用程序拆分成多个小的模块，每个模块都有自己的特定功能和职责。这种模块化的设计可以提高代码的可读性、可维护性和可扩展性。</p>\n<p>然而，模块之间的依赖关系也可能会导致一些问题。例如，如果一个模块依赖于其他模块中的某个函数或对象，而这个函数或对象被删除或修改了，那么依赖于它的模块也需要进行相应的修改。如果依赖关系过于复杂，这种修改可能会涉及到多个模块，从而增加了代码的维护难度。</p>\n<p>因此，在软件开发中，需要注意模块之间的依赖关系，避免出现过于复杂的依赖关系。一些常见的减少依赖关系的方法包括：</p>\n<ul>\n<li><p>使用接口或抽象类定义模块之间的通信接口，从而降低了模块之间的耦合度。</p>\n</li>\n<li><p>使用依赖注入（Dependency Injection）等技术，将依赖关系的控制权交给容器，从而减少了模块之间的直接依赖关系。</p>\n</li>\n<li><p>使用事件驱动编程（Event-Driven Programming）等技术，通过事件的发布和订阅来解耦模块之间的依赖关系。</p>\n</li>\n<li><p>以下是一个简单的例子，展示了模块之间的依赖关系：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个模块A</span><br><span class=\"line\">const moduleA = &#123;</span><br><span class=\"line\">  data: &#x27;data from module A&#x27;,</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    console.log(this.data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个模块B，依赖于模块A</span><br><span class=\"line\">const moduleB = &#123;</span><br><span class=\"line\">  data: &#x27;data from module B&#x27;,</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    console.log(this.data);</span><br><span class=\"line\">    moduleA.getData(); // 调用模块A的方法</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在模块B中调用模块A的方法</span><br><span class=\"line\">moduleB.getData(); // 输出：data from module B 和 data from module A</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，模块B依赖于模块A，即在模块B中使用了模块A中的方法。通过调用模块B的getData方法，可以看到它先输出了自己的数据，然后再调用了模块A的getData方法，输出了模块A的数据。这种依赖关系可以通过控制模块之间的通信接口、使用依赖注入等方式进行优化和管理。</p>\n</li>\n</ul>\n<h2 id=\"23-回调函数\"><a href=\"#23-回调函数\" class=\"headerlink\" title=\"23.回调函数\"></a>23.回调函数</h2><p>  回调函数是一种特殊的函数，它作为参数传递给另一个函数，并在该函数执行完毕后被调用。回调函数通常用于异步编程中，例如在处理网络请求、读取文件、执行数据库操作等情况下，可以使用回调函数等待操作完成后再执行回调函数。</p>\n<p>  回调函数的使用方法与普通函数类似，只需要将函数名作为参数传递给另一个函数即可。例如，以下代码演示了在JavaScript中使用回调函数的基本方法：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义一个异步函数，接受一个回调函数参数</span><br><span class=\"line\">function asyncFunction(callback) &#123;</span><br><span class=\"line\">  // 模拟异步操作</span><br><span class=\"line\">  setTimeout(function() &#123;</span><br><span class=\"line\">    console.log(&#x27;Async operation completed.&#x27;);</span><br><span class=\"line\">    callback(); // 执行回调函数</span><br><span class=\"line\">  &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个回调函数</span><br><span class=\"line\">function callbackFunction() &#123;</span><br><span class=\"line\">  console.log(&#x27;Callback function executed.&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用异步函数并传入回调函数</span><br><span class=\"line\">asyncFunction(callbackFunction);</span><br></pre></td></tr></table></figure>\n\n<p>  在这个例子中，我们定义了一个异步函数<code>asyncFunction</code>，它接受一个回调函数<code>callback</code>作为参数。在异步函数中，我们使用<code>setTimeout</code>方法模拟了一个异步操作，并在操作完成后执行了回调函数。同时，我们也定义了一个回调函数<code>callbackFunction</code>，它会在异步操作完成后被调用。最后，我们通过调用异步函数并传入回调函数的方式，实现了在异步操作完成后执行回调函数的效果。</p>\n<p>  回调函数能回调的原因是因为在JavaScript中，函数也是一种数据类型，可以被作为参数传递给其他函数。当我们将一个函数作为参数传递给另一个函数时，实际上是将这个函数的引用传递给了另一个函数。在另一个函数中，我们可以通过这个函数的引用来调用它并执行它。因此，在使用回调函数时，我们可以将一个函数作为参数传递给另一个函数</p>\n<p>，在异步操作完成后再执行这个函数。这种方式可以避免在异步操作中阻塞代码执行，提高了代码的效率和可读性。</p>\n<p>总之，回调函数是一种常见的编程技术，在异步编程中广泛应用。使用回调函数可以避免代码阻塞，提高代码的效率和可读性。同时，回调函数也是一种函数类型，可以被作为参数传递给其他函数，并在其他函数中执行。</p>\n<h3 id=\"22-1更简单的例子\"><a href=\"#22-1更简单的例子\" class=\"headerlink\" title=\"22.1更简单的例子\"></a>22.1更简单的例子</h3><p>以下是一个简单的例子，演示了在JavaScript中使用回调函数的基本方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接受一个数字参数和一个回调函数参数</span><br><span class=\"line\">function square(num, callback) &#123;</span><br><span class=\"line\">  const result = num * num;</span><br><span class=\"line\">  callback(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义一个回调函数</span><br><span class=\"line\">function printResult(result) &#123;</span><br><span class=\"line\">  console.log(&quot;The result is: &quot; + result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用square函数并传入回调函数</span><br><span class=\"line\">square(5, printResult); // 输出：The result is: 25</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>square</code>函数，它接受一个数字参数和一个回调函数参数。在函数中，我们计算了数字的平方，并将结果传递给回调函数。同时，我们也定义了一个回调函数<code>printResult</code>，它会在<code>square</code>函数执行完毕后被调用。最后，我们通过调用<code>square</code>函数并传入回调函数的方式，实现了在计算完成后输出结果的效果。</p>\n<hr>\n<p>以下是一个使用回调函数的简单例子：</p>\n<p>function add(a, b, callback) {<br>  var result = a + b;<br>  callback(result);<br>}</p>\n<p>function display(result) {<br>  console.log(“The result is “ + result);<br>}</p>\n<p>add(2, 3, display);<br>在这个例子中，我们定义了一个add函数，它接受两个参数a和b，并在它们上执行加法操作。add函数还接受第三个参数callback，它是一个回调函数。</p>\n<p>在add函数内部，我们首先计算出结果，然后将其作为参数传递给回调函数callback。在这个例子中，我们将display函数作为回调函数传递给add函数。</p>\n<p>display函数将结果作为参数打印到控制台上。</p>\n<p>最后，我们调用add函数并传递两个数字和回调函数作为参数。当add函数完成计算时，它将调用回调函数display，并将结果作为参数传递给它。display函数将结果打印到控制台上。</p>\n<h3 id=\"22-2函数可以被传递\"><a href=\"#22-2函数可以被传递\" class=\"headerlink\" title=\"22.2函数可以被传递\"></a>22.2函数可以被传递</h3><p>回调函数能够回调的原因在于JavaScript中的函数是一等公民，也就是说，函数可以像其他数据类型一样被传递、返回、存储等。在JavaScript中，函数不仅可以被定义和调用，还可以作为参数传递给另一个函数或作为另一个函数的返回值。</p>\n<p>在异步编程中，我们通常需要在某个操作完成后执行某些代码，但是由于JavaScript是单线程执行的，如果在操作完成前执行这些代码，会导致程序阻塞。为了解决这个问题，我们可以将这些代码封装成一个函数，然后将这个函数作为回调函数传递给异步操作。当异步操作完成后，系统会自动调用这个回调函数，以执行我们需要执行的代码。</p>\n<p>回调函数的形式参数通常为函数类型，当异步操作完成后，将会调用这个函数，并将异步操作的结果作为参数传递给这个函数。这样，我们就可以在异步操作完成后使用异步操作的结果进行后续操作。因此，回调函数的能够回调的原因在于函数是一等公民，可以作为参数传递，以及JavaScript的事件循环机制。</p>\n<h2 id=\"23-set-与对象的区别\"><a href=\"#23-set-与对象的区别\" class=\"headerlink\" title=\"23.set 与对象的区别\"></a>23.set 与对象的区别</h2><p>在JavaScript中，<code>set</code>和对象（<code>object</code>）是两种不同的数据类型，它们具有不同的特点和用途。</p>\n<p><code>Set</code>是ES6中新增的一种集合类型，它类似于数组，但是具有以下特点：</p>\n<ul>\n<li><code>Set</code>中的元素是唯一的，不会重复；</li>\n<li><code>Set</code>中的元素是无序的，不能通过下标来访问；</li>\n<li><code>Set</code>中的元素可以是任何数据类型，包括基本类型和对象。</li>\n</ul>\n<p>在<code>Set</code>中，添加重复元素会被自动忽略，因此<code>Set</code>通常被用于去重或者判断元素是否存在等场景。</p>\n<p>对象是JavaScript中的一种复合数据类型，它由一组属性（<code>key-value</code>对）组成，每个属性都有一个唯一的键和对应的值，可以是基本类型或者其他对象。对象可以通过键来访问和修改属性的值，因此对象通常被用于存储和管理复杂的数据结构。</p>\n<p>总之，<code>Set</code>和对象是两种不同的数据类型，它们具有不同的特点和用途。<code>Set</code>通常被用于去重或者判断元素是否存在等场景，而对象通常被用于存储和管理复杂的数据结构。</p>\n<h2 id=\"24-类与构造函数的区别\"><a href=\"#24-类与构造函数的区别\" class=\"headerlink\" title=\"24.类与构造函数的区别\"></a>24.类与构造函数的区别</h2><h3 id=\"24-1不同的对象创建方式\"><a href=\"#24-1不同的对象创建方式\" class=\"headerlink\" title=\"24.1不同的对象创建方式\"></a>24.1不同的对象创建方式</h3><p>类（Class）和构造函数（Constructor）是两种不同的对象创建方式，它们具有不同的特点和用途。</p>\n<p>构造函数是一种用于创建对象的函数，它使用<code>new</code>关键字来创建对象，并且可以接受参数来初始化对象的属性。构造函数通常通过<code>this</code>关键字来引用当前对象的属性和方法，同时也可以通过原型链来实现方法的继承。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&quot;Alice&quot;, 20);</span><br><span class=\"line\">person.sayHello(); // 输出：Hello, my name is Alice, and I&#x27;m 20 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个构造函数<code>Person</code>，用于创建<code>Person</code>对象。构造函数接受两个参数<code>name</code>和<code>age</code>，用于初始化对象的属性。然后，我们通过给<code>Person.prototype</code>添加方法的方式来定义<code>sayHello</code>方法，并将它继承给<code>Person</code>对象。最后，我们创建了一个<code>Person</code>对象，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>类是ES6中新增的一种对象创建方式，它使用<code>class</code>关键字来定义类，并且使用<code>new</code>关键字来创建对象。类中包含了构造函数和实例方法，用于初始化对象的属性和定义对象的行为。类也可以通过继承来实现方法的复用和扩展。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&quot;Alice&quot;, 20);</span><br><span class=\"line\">person.sayHello(); // 输出：Hello, my name is Alice, and I&#x27;m 20 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们使用<code>class</code>关键在这个例子中，我们使用<code>class</code>关键字定义了一个名为<code>Person</code>的类。类中包含了一个构造函数<code>constructor</code>和一个实例方法<code>sayHello</code>。构造函数用于初始化对象的属性，实例方法用于定义对象的行为。在类的内部，可以通过<code>this</code>关键字引用当前对象。</p>\n<p>我们创建了一个<code>Person</code>类的实例，并将<code>&quot;Alice&quot;</code>和<code>20</code>作为参数传递给构造函数。然后，我们通过调用实例方法<code>sayHello</code>来输出相应的信息。</p>\n<p>需要注意的是，虽然类的定义和构造函数的定义在语法上有所不同，但它们都可以用来创建对象并定义对象的行为。类的定义更加清晰和简洁，具有更好的可读性和可维护性，同时还提供了继承和其他高级特性的支持。而构造函数则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。</p>\n<p>总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。</p>\n<h3 id=\"24-2-不同的继承方式\"><a href=\"#24-2-不同的继承方式\" class=\"headerlink\" title=\"24.2 不同的继承方式\"></a>24.2 不同的继承方式</h3><p>此外，类和构造函数的继承方式也有所不同。在构造函数中，可以通过修改原型链来实现继承。例如，可以通过将子类的原型对象指向父类的一个实例来实现继承。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.sayHello = function() &#123;</span><br><span class=\"line\">  console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Student(name, age, grade) &#123;</span><br><span class=\"line\">  Person.call(this, name, age);</span><br><span class=\"line\">  this.grade = grade;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype = Object.create(Person.prototype);</span><br><span class=\"line\">Student.prototype.constructor = Student;</span><br><span class=\"line\"></span><br><span class=\"line\">const student = new Student(&quot;Bob&quot;, 18, 90);</span><br><span class=\"line\">student.sayHello(); // 输出：Hello, my name is Bob, and I&#x27;m 18 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>Person</code>构造函数和一个<code>Student</code>构造函数。然后，我们通过在<code>Student</code>构造函数中调用<code>Person</code>构造函数并继承其属性，来实现对<code>Person</code>构造函数的继承。接着，我们通过将<code>Student</code>的原型对象指向一个<code>Person</code>实例来继承<code>Person</code>的方法。最后，我们创建了一个<code>Student</code>对象，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>在类中，继承使用<code>extends</code>关键字来实现。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(`Hello, my name is $&#123;this.name&#125;, and I&#x27;m $&#123;this.age&#125; years old.`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\">  constructor(name, age, grade) &#123;</span><br><span class=\"line\">    super(name, age);</span><br><span class=\"line\">    this.grade = grade;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const student = new Student(&quot;Bob&quot;, 18, 90);</span><br><span class=\"line\">student.sayHello(); // 输出：Hello, my name is Bob, and I&#x27;m 18 years old.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>Person</code>类和一个<code>Student</code>类，并使用<code>extends</code>关键字将<code>Student</code>类继承自<code>Person</code>类，从而实现对<code>Person</code>类的继承。在<code>Student</code>类的构造函数中，我们通过调用<code>super</code>关键字来调用父类的构造函数并继承其属性。然后，我们定义了一个<code>grade</code>属性，用于表示学生的分数。最后，我们创建了一个<code>Student</code>对象，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>需要注意的是，类的继承方式更加简洁和直观，同时也提供了更好的语言特性支持，例如<code>super</code>关键字和<code>constructor</code>方法。而构造函数的继承方式则更加灵活，可以通过原型链自由地扩展和定制对象的方法和属性。</p>\n<p>总之，类和构造函数是两种不同的对象创建方式，它们具有不同的特点和用途。类提供了更加清晰和简洁的语法来定义对象和实现继承，而构造函数则更加灵活和自由。在实际开发中，可以根据具体的需求和场景选择合适的方式来创建对象和定义对象的行为。</p>\n<h3 id=\"24-3高级特性\"><a href=\"#24-3高级特性\" class=\"headerlink\" title=\"24.3高级特性\"></a>24.3高级特性</h3><p>此外，类还提供了一些其他的高级特性，例如静态方法、getter和setter等。</p>\n<p>静态方法是指类的方法，不需要实例化对象就可以调用。在类中，可以使用<code>static</code>关键字来定义静态方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MathUtil &#123;</span><br><span class=\"line\">  static add(x, y) &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(MathUtil.add(1, 2)); // 输出：3</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>MathUtil</code>类，并使用<code>static</code>关键字定义了一个静态方法<code>add</code>。静态方法可以直接通过类来调用，而不需要先实例化对象。</p>\n<p>Getter和Setter是指用于读取和设置对象属性的方法。在类中，可以使用<code>get</code>和<code>set</code>关键字来定义Getter和Setter方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this._name = name;</span><br><span class=\"line\">    this._age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get name() &#123;</span><br><span class=\"line\">    return this._name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set name(value) &#123;</span><br><span class=\"line\">    this._name = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  get age() &#123;</span><br><span class=\"line\">    return this._age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  set age(value) &#123;</span><br><span class=\"line\">    if (value &gt; 0 &amp;&amp; value &lt; 100) &#123;</span><br><span class=\"line\">      this._age = value;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      throw new Error(&quot;Invalid age value.&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const person = new Person(&quot;Alice&quot;, 20);</span><br><span class=\"line\">console.log(person.name); // 输出：Alice</span><br><span class=\"line\">person.name = &quot;Bob&quot;;</span><br><span class=\"line\">console.log(person.name); // 输出：Bob</span><br><span class=\"line\">console.log(person.age); // 输出：20</span><br><span class=\"line\">person.age = 200; // 抛出异常：Invalid age value.</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个<code>Person</code>类，并使用<code>get</code>和<code>set</code>关键字定义了<code>name</code>和<code>age</code>属性的Getter和Setter方法。Getter方法用于读取属性的值，Setter方法用于设置属性的值。在Setter方法中，我们可以对属性的值进行验证和处理。</p>\n<p>需要注意的是，Getter和Setter方法可以使用不同的属性名来定义，例如在上面的例子中，我们使用了<code>_name</code>和<code>_age</code>属性来存储实际的属性值，并使用<code>name</code>和<code>age</code>来定义Getter和Setter方法。这样可以保证Getter和Setter方法的调用方式与普通属性的调用方式相同，同时也可以避免Getter和Setter方法的递归调用。</p>\n<p>总之，类提供了一系列高级特性，例如静态方法、Getter和Setter等，可以更加方便地实现对象的行为和属性的管理。在实际开发中，需要根据具体的需求和场景选择合适的特性来使用。</p>\n<h3 id=\"24-4语法特性\"><a href=\"#24-4语法特性\" class=\"headerlink\" title=\"24.4语法特性\"></a>24.4语法特性</h3><p>除了上述特性之外，类还有一些其他的语法和用法需要注意。</p>\n<p>首先是类的表达式语法。类可以像函数一样，使用表达式来定义。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MyClass = class &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(`Hello, $&#123;this.name&#125;!`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = new MyClass(&quot;Alice&quot;);</span><br><span class=\"line\">obj.sayHello(); // 输出：Hello, Alice!</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们使用类表达式的方式定义了一个名为<code>MyClass</code>的类，并创建了一个<code>MyClass</code>的实例。类表达式与类声明的语法类似，只是将类名省略了而已。</p>\n<p>其次是类的默认构造函数。如果类没有定义构造函数，那么会默认生成一个空的构造函数。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyClass &#123;</span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(&quot;Hello!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = new MyClass();</span><br><span class=\"line\">obj.sayHello(); // 输出：Hello!</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个名为<code>MyClass</code>的类，并在其中定义了一个<code>sayHello</code>方法。由于没有定义构造函数，因此会默认生成一个空的构造函数。我们创建了一个<code>MyClass</code>的实例，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>最后是类的继承链。在类的继承中，如果一个子类继承自多个父类，那么它的继承链会按照从左到右的顺序进行。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(&quot;Hello from A!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B &#123;</span><br><span class=\"line\">  sayHello() &#123;</span><br><span class=\"line\">    console.log(&quot;Hello from B!&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C extends A,B &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj = new C();</span><br><span class=\"line\">obj.sayHello(); // 输出：Hello from A!</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了三个类<code>A</code>、<code>B</code>和<code>C</code>。类<code>C</code>继承自类<code>A</code>和类<code>B</code>，并且没有定义自己的<code>sayHello</code>方法。由于继承链的顺序是从左到右，因此<code>C</code>类的<code>sayHello</code>方法会继承自<code>A</code>类而不是<code>B</code>类。我们创建了一个<code>C</code>类的实例，并调用<code>sayHello</code>方法来输出相应的信息。</p>\n<p>需要注意的是，如果类的继承链中存在同名的方法，那么会按照从左到右的顺序取第一个方法。这个特性在多重继承和方法的定制中非常有用。</p>\n<p>总之，类是ES6中新增的一种语言特性，提供了更加清晰和简洁的语法来定义对象和实现继承。类的特性和用法也非常丰富，可以根据具体的需求和场景选择合适的特性来使用。在实际开发中，需要熟练掌握类的语法和用法，以便更加高效地进行编程。</p>\n<h2 id=\"25-链式写法\"><a href=\"#25-链式写法\" class=\"headerlink\" title=\"25.链式写法\"></a>25.链式写法</h2><p>链式写法是一种将多个操作按照一定的顺序连在一起的编程风格。在链式写法中，每个操作都返回自身的对象，从而可以继续进行下一个操作。这种风格的代码通常非常简洁和直观，可以提高代码的可读性和可维护性。</p>\n<p>链式写法通常使用方法链的方式实现。在方法链中，每个方法都返回自身的对象，从而可以继续调用下一个方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传统的写法</span><br><span class=\"line\">const arr = [1, 2, 3];</span><br><span class=\"line\">const filtered = arr.filter(function(item) &#123;</span><br><span class=\"line\">  return item &gt; 1;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">const mapped = filtered.map(function(item) &#123;</span><br><span class=\"line\">  return item * 2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 链式写法</span><br><span class=\"line\">const arr = [1, 2, 3];</span><br><span class=\"line\">const mapped = arr.filter(function(item) &#123;</span><br><span class=\"line\">  return item &gt; 1;</span><br><span class=\"line\">&#125;).map(function(item) &#123;</span><br><span class=\"line\">  return item * 2;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们分别使用传统的写法和链式写法来实现了一个数组的过滤和映射操作。在传统的写法中，我们需要使用多个中间变量来存储中间结果。而在链式写法中，我们可以直接将多个操作连接在一起，从而避免了中间变量的使用，使得代码更加简洁和直观。</p>\n<hr>\n<p>链式写法通常是从左往右进行读取和理解的。在链式写法中，每个方法都是基于前一个方法的结果进行操作的，因此需要按照从左往右的顺序进行读取和理解。例如，在下面的代码中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const result = arr.filter(function(item) &#123;</span><br><span class=\"line\">  return item &gt; 1;</span><br><span class=\"line\">&#125;).map(function(item) &#123;</span><br><span class=\"line\">  return item * 2;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以先看到<code>arr</code>对象的<code>filter</code>方法，然后再看到<code>map</code>方法。这样就能够理解这段代码的含义，即先将数组<code>arr</code>中大于1的元素过滤出来，然后将剩余的元素都乘以2。</p>\n<p>需要注意的是，有些方法也可以从右往左进行读取和理解。例如，在下面的代码中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const result = arr.reduceRight(function(prev, curr) &#123;</span><br><span class=\"line\">  return prev + curr;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们可以先看到<code>arr</code>对象的<code>reduceRight</code>方法，然后再看到回调函数。这样就能够理解这段代码的含义，即从右往左地对数组<code>arr</code>中的元素进行累计求和。</p>\n<p>总之，链式写法需要按照从左往右的顺序进行读取和理解，以便理解代码的含义和作用。在实际开发中，需要注意代码的可读性和可维护性，以便其他开发者能够更加容易地理解和维护代码</p>\n<h2 id=\"26-形参命名为什么经常用foo\"><a href=\"#26-形参命名为什么经常用foo\" class=\"headerlink\" title=\"26.形参命名为什么经常用foo\"></a>26.形参命名为什么经常用foo</h2><p>形参命名为<code>foo</code>、<code>bar</code>、<code>baz</code>等是一种编程中常用的命名方式，通常被称为哑变量或占位符。这种命名方式的目的是为了强调变量的重要性或类型，同时也可以避免歧义和冲突。<strong>类似张三和李四，foo第一个无名变量，bar第二个无名变量，以此类推</strong></p>\n<p>具体来说，这种命名方式通常用于以下几个方面：</p>\n<ol>\n<li>强调变量的重要性：在一些情况下，变量的名称并不重要，重要的是变量的作用和含义。例如，在某些算法和数据结构中，变量的名称可能并不重要，重要的是它们的作用和含义。使用哑变量或占位符可以强调变量的作用和含义，而不会分散注意力。</li>\n<li>强调变量的类型：在一些情况下，变量的类型比名称更加重要。例如，在某些函数中，参数的类型可能比名称更加重要。使用哑变量或占位符可以强调变量的类型，而不会分散注意力。</li>\n<li>避免歧义和冲突：在一些情况下，变量的命名可能会引起歧义和冲突。例如，在一些示例代码和教学材料中，变量的名称可能已经被占用或者已经有了特定的含义。使用哑变量或占位符可以避免歧义和冲突，使得示例代码和教学材料更加通用和易懂。</li>\n</ol>\n<p>需要注意的是，虽然哑变量或占位符可以提高代码的可读性和可维护性，但是也需要注意使用的场景和范围。在实际开发中，应该根据具体的需求和场景选择合适的命名方式，以便其他开发者能够更加容易地理解和维护代码。</p>\n<p>此外，还有一些其他的命名方式和规范，例如驼峰命名法、下划线命名法等。这些命名方式和规范都有自己的特点和适用场景，需要根据具体的需求和场景选择合适的命名方式和规范。</p>\n<p>驼峰命名法是一种常用的命名方式，它将多个单词连接起来，每个单词的首字母大写，除第一个单词外其他单词的首字母都小写。例如，<code>firstName</code>、<code>lastName</code>、<code>emailAddress</code>等。驼峰命名法通常用于变量、函数和对象的命名。</p>\n<p>下划线命名法是另一种常用的命名方式，它将多个单词连接起来，每个单词之间用下划线分隔。例如，<code>first_name</code>、<code>last_name</code>、<code>email_address</code>等。下划线命名法通常用于数据库表名、URL路径、CSS类名等。</p>\n<p>需要注意的是，在使用命名方式和规范时，应该尽量保持一致性和规范性，以便提高代码的可读性和可维护性。同时，也需要注意命名的长度和含义，以避免过长或者过短的命名导致代码的可读性下降。</p>\n<hr>\n<p>在编程中，选择合适的变量名是非常重要的，可以提高代码的可读性和可维护性。在不同的场景下，选择不同的变量名可以更好地表达变量的含义和作用。</p>\n<p>下面是一些常见的场景和对应的变量名：</p>\n<ol>\n<li>数组和列表：对于数组和列表中的元素，可以使用单数的名词来表示。例如，<code>item</code>、<code>element</code>、<code>value</code>等。</li>\n<li>布尔值：对于布尔值，可以使用形容词或动词的过去分词来表示。例如，<code>isDone</code>、<code>isEnabled</code>、<code>hasError</code>等。</li>\n<li>函数和方法：对于函数和方法，可以使用动词或动词短语来表示。例如，<code>getLength</code>、<code>calculateSum</code>、<code>renderList</code>等。</li>\n<li>对象和类：对于对象和类，可以使用名词来表示。例如，<code>person</code>、<code>customer</code>、<code>product</code>等。</li>\n<li>常量：对于常量，可以使用全大写的字母和下划线来表示。例如，<code>MAX_VALUE</code>、<code>DEFAULT_TIMEOUT</code>等。</li>\n<li>迭代器和计数器：对于迭代器和计数器，可以使用单词或单词缩写来表示。例如，<code>i</code>、<code>j</code>、<code>k</code>、<code>index</code>、<code>count</code>等。</li>\n</ol>\n<p>需要注意的是，在选择变量名时，应该遵循命名规范和良好的编程习惯，以便提高代码的可读性和可维护性。同时，在实际开发中，应该根据具体的需求和场景选择合适的变量名，以便其他开发者能够更加容易地理解和维护代码。</p>\n<hr>\n<p><code>foo</code>、<code>bar</code>、<code>baz</code>是一组常用的哑变量或占位符，通常用于编程中临时测试、示例代码、伪代码等场景。这些变量名通常被视为没有具体含义的变量名，只是作为占位符来使用。</p>\n<p>在实际开发中，这三个变量名通常用于测试代码和示例代码中，以便提供一些简单的例子来说明代码的用法和效果。例如，在下面的代码中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(foo, bar) &#123;</span><br><span class=\"line\">  return foo + bar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const result = add(2, 3);</span><br><span class=\"line\">console.log(result); // 输出 5</span><br></pre></td></tr></table></figure>\n\n<p>我们使用了<code>foo</code>和<code>bar</code>作为函数<code>add</code>的参数，这两个变量名并没有具体的含义，只是作为占位符来使用。这样可以更加简单地说明函数<code>add</code>的用法和效果，而不会分散注意力。</p>\n<p>需要注意的是，尽管这些变量名通常被视为没有具体含义的变量名，但是在实际开发中，我们应该尽量使用有意义的变量名来提高代码的可读性和可维护性。只有在一些简单的测试代码和示例代码中，才可以使用这些占位符变量名.</p>\n<h2 id=\"27-双标签改单标签\"><a href=\"#27-双标签改单标签\" class=\"headerlink\" title=\"27.双标签改单标签\"></a>27.双标签改单标签</h2><p>要将双标签形式中的尾标签删除，同时将尾标签中的 <code>/</code> 删除，这样就变成了单标签形式。</p>\n<p>例如，将双标签形式的 <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code> 改成单标签形式，就需要将它修改成 <code>&lt;input type=&quot;text&quot;&gt;</code>。</p>\n<p>另外，需要注意的是，并非所有的双标签都可以简单地改成单标签。如果一个双标签有子元素或者属性值为空，那么它就无法转换成单标签。例如 <code>&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code>、<code>&lt;input type=&quot;text&quot; value=&quot;&quot;&gt;</code> 等都无法改成单标签形式。只有像上面示范的那个例子一样，没有子元素并且没有属性值为空的双标签才能写成单标签形式。</p>\n<p>好的，下面再给一些例子来详细介绍如何将双标签改成单标签。</p>\n<ol>\n<li><code>&lt;img&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;img&gt;</code> 标签是 HTML 中最常见的单标签之一，它表示文档中的图像。在双标签形式中，它通常被写成 <code>&lt;img&gt;&lt;/img&gt;</code> 或者 <code>&lt;img /&gt;</code> 的形式。</p>\n<p>将其改成单标签的形式，只需要删除尾标签即可，这样就得到了 <code>&lt;img&gt;</code> 标签的单标签形式。</p>\n<ol>\n<li><code>&lt;input&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;input&gt;</code> 标签用来表示文档中的表单控件，例如文本框、单选框、复选框等。在双标签形式中，它通常被写成 <code>&lt;input&gt;&lt;/input&gt;</code> 或者 <code>&lt;input /&gt;</code> 的形式。</p>\n<p>对于 <code>&lt;input&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;input type=&quot;text&quot;&gt;输入框&lt;/input&gt;</code> 和 <code>&lt;input type=&quot;text&quot; value=&quot;&quot; /&gt;</code> 都不能改成单标签的形式。</p>\n<ol>\n<li><code>&lt;br&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;br&gt;</code> 标签用来表示文档中的换行符。在双标签形式中，它通常被写成 <code>&lt;br&gt;&lt;/br&gt;</code> 或者 <code>&lt;br /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;img&gt;</code> 标签一样，将 <code>&lt;br&gt;</code> 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 <code>&lt;br&gt;</code> 标签的单标签形式。</p>\n<ol>\n<li><code>&lt;link&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;link&gt;</code> 标签用来加载外部资源，例如样式表、脚本文件等。在双标签形式中，它通常被写成 <code>&lt;link&gt;&lt;/link&gt;</code> 或者 <code>&lt;link /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;input&gt;</code> 标签一样，对于 <code>&lt;link&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;link&gt;</code> 标签中的属性 rel 和 href 就不能为空。</p>\n<ol>\n<li><code>&lt;meta&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;meta&gt;</code> 标签用来表示文档的元数据，例如编码方式、关键字、描述等。在双标签形式中，它通常被写成 <code>&lt;meta&gt;&lt;/meta&gt;</code> 或者 <code>&lt;meta /&gt;</code> 的形式。</p>\n<p>对于 <code>&lt;meta&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;meta&gt;</code> 中的 charset 属性就不能为空。</p>\n<ol>\n<li><code>&lt;hr&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;hr&gt;</code> 标签用来表示文档中的水平线。在双标签形式中，它通常被写成 <code>&lt;hr&gt;&lt;/hr&gt;</code> 或者 <code>&lt;hr /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;img&gt;</code> 标签一样，将 <code>&lt;hr&gt;</code> 标签改成单标签的形式，只需要删除尾标签即可，这样就得到了 <code>&lt;hr&gt;</code> 标签的单标签形式。</p>\n<ol>\n<li><code>&lt;source&gt;</code> 标签</li>\n</ol>\n<p><code>&lt;source&gt;</code> 标签用来定义多媒体资源（如视频、音频）的可选来源。在双标签形式中，它通常被写成 <code>&lt;source&gt;&lt;/source&gt;</code> 或者 <code>&lt;source /&gt;</code> 的形式。</p>\n<p>和 <code>&lt;input&gt;</code> 标签一样，对于 <code>&lt;source&gt;</code> 标签来说，如果它没有子元素和属性值，那么它就可以改成单标签的形式。例如 <code>&lt;source src=&quot;video.mp4&quot; type=&quot;video/mp4&quot; /&gt;</code> 就是合法的单标签形式。</p>\n<p>但如果它有子元素或者属性值为空，那么它就不能改成单标签的形式。例如 <code>&lt;source&gt;</code> 标签中的 src 和 type 属性就不能为空。</p>\n<p>总之，将双标签改成单标签的关键就是删除尾标签。但需要注意的是，并非所有的双标签都可以简单地改成单标签，只有没有子元素并且没有属性值为空的双标签才能改成单标签。所以在修改标签形式的时候，一定要注意检查标签中的子元素和属性值。</p>\n<h2 id=\"28-多层嵌套数组，对象\"><a href=\"#28-多层嵌套数组，对象\" class=\"headerlink\" title=\"28.多层嵌套数组，对象\"></a>28.多层嵌套数组，对象</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;</span><br><span class=\"line\">  a: &#123;</span><br><span class=\"line\">    b: &#123;c&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; = obj;</span><br><span class=\"line\">console.log(c); // 1</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>解构多层数组和对象</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const data = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: 1,</span><br><span class=\"line\">    name: &#x27;Alice&#x27;,</span><br><span class=\"line\">    cats: [</span><br><span class=\"line\">      &#123;id: 1, name: &#x27;Mimi&#x27;&#125;,</span><br><span class=\"line\">      &#123;id: 2, name: &#x27;Kiki&#x27;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: 2,</span><br><span class=\"line\">    name: &#x27;Bob&#x27;,</span><br><span class=\"line\">    cats: [&#123;id: 3, name: &#x27;Lala&#x27;&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">const [&#123;cats: [cat1, cat2]&#125;, &#123;cats: [cat3]&#125;] = data;</span><br><span class=\"line\">console.log(cat1, cat2, cat3); // &#123; id: 1, name: &#x27;Mimi&#x27; &#125; &#123; id: 2, name: &#x27;Kiki&#x27; &#125; &#123; id: 3, name: &#x27;Lala&#x27; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上示例中，使用 <code>...</code> 操作符将多层的数据结构展开并解构到变量中，简化了代码并使得操作更加清晰易懂。在实际开发中，可以根据具体情况选择使用解构赋值的方式来取出多层嵌套结构中的值。</p>\n<h3 id=\"28-2更多示例\"><a href=\"#28-2更多示例\" class=\"headerlink\" title=\"28.2更多示例\"></a>28.2更多示例</h3><p>多层嵌套数组和多层嵌套对象都是在编程中常见的数据结构，本质上它们都是存储一组相关数据的容器。</p>\n<ol>\n<li>多层嵌套数组</li>\n</ol>\n<p>多层嵌套数组指的是将多个数组嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套数组的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [</span><br><span class=\"line\">  [1, 2, 3],</span><br><span class=\"line\">  [4, 5, 6, [7, 8]],</span><br><span class=\"line\">  [9]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，常量 arr 是一个三层嵌套的数组，其中第二层的第四个元素又是一个二层嵌套的数组。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。</p>\n<p>要访问嵌套数组中的元素，可以通过多次使用数组索引来获取。例如，获取第三个元素的第一个元素的值，可以使用下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const x = arr[2][0];</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>多层嵌套对象</li>\n</ol>\n<p>多层嵌套对象指的是将多个对象嵌套在一起的数据结构，形成了多层的嵌套结构。例如，下面的代码展示了一个三层嵌套对象的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;Alice&#x27;,</span><br><span class=\"line\">  age: 20,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    country: &#x27;USA&#x27;,</span><br><span class=\"line\">    city: &#x27;New York&#x27;,</span><br><span class=\"line\">    street: &#123;</span><br><span class=\"line\">      name: &#x27;Broadway&#x27;,</span><br><span class=\"line\">      number: 1234</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，常量 obj 是一个三层嵌套的对象，其中第二层和第三层都是嵌套的对象。通过多层嵌套，我们可以方便地表示复杂的数据结构和数据关系。</p>\n<p>要访问嵌套对象中的属性，可以使用点号（.）操作符或方括号（[]）操作符来获取。例如，获取地址的街道名称，可以使用下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const streetName = obj.address.street.name;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在使用点号操作符时，属性名必须是一个合法的标识符。如果属性名中包含特殊字符或关键字，就必须使用方括号操作符，并将属性名用引号括起来。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const propertyName = &#x27;street.name&#x27;;</span><br><span class=\"line\">const value = obj[&#x27;address&#x27;][propertyName];</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>嵌套数组和嵌套对象的异同点</li>\n</ol>\n<p>虽然嵌套数组和嵌套对象都是用于存储多个相关数据的容器，但它们之间还是有一些区别和异同点的。</p>\n<p>相同点：</p>\n<ul>\n<li>均可进行多级嵌套，可以表示较为复杂的数据结构。</li>\n<li>均可访问其内部嵌套的元素或属性。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>嵌套数组是一种基于索引值来访问和操作的数据结构，而嵌套对象是一种基于属性名来访问和操作的数据结构。</li>\n<li>嵌套数组的元素是有序的，而嵌套对象的属性是无序的。</li>\n<li>在实际开发中，嵌套数组常用于存储一组相同类型的数据，而嵌套对象则常用于存储一个实体对象的各个属性。</li>\n<li>嵌套数组可以使用循环来遍历、查找、过滤和修改数据，而嵌套对象则可以使用对象方法和操作符来操作属性，如 Object.keys()、Object.values()、Object.assign() 等。</li>\n</ul>\n<ol>\n<li>多层嵌套数组与多层嵌套对象的注意事项</li>\n</ol>\n<p>在使用多层嵌套数组或多层嵌套对象时，需要注意以下事项：</p>\n<ul>\n<li>不要过度嵌套，一般不要超过三层。</li>\n<li>尽量保持数据结构清晰，以便于阅读和维护代码。</li>\n<li>多层嵌套数组和多层嵌套对象的访问操作比较繁琐和易错，需要仔细处理。建议使用变量和常量来保存中间结果，以便于复用。</li>\n<li>在修改多层嵌套数组或多层嵌套对象时，请避免对原数据进行直接修改，可以使用深拷贝（deep clone）来获得一份新的数据，然后对新的数据进行修改。否则可能会引起意外的副作用。</li>\n<li>使用多层嵌套数组或多层嵌套对象时，还需要考虑数据之间的关系和依赖，以便于数据之间的传递和交互。例如，可以使用回调函数、事件监听器、Promise、Async/Await 等机制进行数据传递和交互。</li>\n<li>示例代码</li>\n</ul>\n<p>下面通过一些示例代码来演示使用多层嵌套数组和多层嵌套对象的相关操作。</p>\n<p>5.1. 多层嵌套数组的示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [</span><br><span class=\"line\">  [1, 2, 3],</span><br><span class=\"line\">  [4, 5, 6, [7, 8]],</span><br><span class=\"line\">  [9]</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">// 访问嵌套数组的元素</span><br><span class=\"line\">const x = arr[1][3][1]; // 8</span><br><span class=\"line\"></span><br><span class=\"line\">// 遍历嵌套数组的所有元素</span><br><span class=\"line\">for(let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  for(let j = 0; j &lt; arr[i].length; j++) &#123;</span><br><span class=\"line\">    console.log(arr[i][j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 过滤嵌套数组的元素</span><br><span class=\"line\">const filteredArr = arr.filter(item =&gt; item.includes(2));</span><br><span class=\"line\">console.log(filteredArr); // [[1, 2, 3]]</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改嵌套数组的元素</span><br><span class=\"line\">arr[1][1] = 0;</span><br><span class=\"line\">console.log(arr); // [[1, 2, 3], [4, 0, 6, [7, 8]], [9]]</span><br></pre></td></tr></table></figure>\n\n<p>5.2. 多层嵌套对象的示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  name: &#x27;Alice&#x27;,</span><br><span class=\"line\">  age: 20,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    country: &#x27;USA&#x27;,</span><br><span class=\"line\">    city: &#x27;New York&#x27;,</span><br><span class=\"line\">    street: &#123;</span><br><span class=\"line\">      name: &#x27;Broadway&#x27;,</span><br><span class=\"line\">      number: 1234</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 访问嵌套对象的属性</span><br><span class=\"line\">const streetName = obj.address.street.name; // Broadway</span><br><span class=\"line\"></span><br><span class=\"line\">// 遍历嵌套对象的所有属性</span><br><span class=\"line\">for(let prop in obj) &#123;</span><br><span class=\"line\">  if(typeof obj[prop] === &#x27;object&#x27;) &#123;</span><br><span class=\"line\">    for(let subProp in obj[prop]) &#123;</span><br><span class=\"line\">      console.log(subProp + &#x27;: &#x27; + obj[prop][subProp]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    console.log(prop + &#x27;: &#x27; + obj[prop]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改嵌套对象的属性</span><br><span class=\"line\">obj.address.street.number = 5678;</span><br><span class=\"line\">console.log(obj);</span><br><span class=\"line\">/* &#123;</span><br><span class=\"line\">  name: &#x27;Alice&#x27;,</span><br><span class=\"line\">  age: 20,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    country: &#x27;USA&#x27;,</span><br><span class=\"line\">    city: &#x27;New York&#x27;,</span><br><span class=\"line\">    street: &#123;</span><br><span class=\"line\">      name: &#x27;Broadway&#x27;,</span><br><span class=\"line\">      number: 5678</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; */</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-3多层数组合并到一个数组\"><a href=\"#28-3多层数组合并到一个数组\" class=\"headerlink\" title=\"28.3多层数组合并到一个数组\"></a>28.3多层数组合并到一个数组</h3><p>可以使用 <code>...</code> 操作符并结合 <code>Array.reduce()</code> 方法来合并多个数组套数组到一个数组中。<code>Array.reduce()</code> 方法会遍历每个数组并将其合并到一个新的数组中，代码实现如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [[1, 2], [3, 4], [5, 6]];</span><br><span class=\"line\">const flattened = arr.reduce((acc, val) =&gt; acc.concat(val), []);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattened); // [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>arr</code> 是一个由三个数组组成的数组。使用 <code>Array.reduce()</code> 方法将它们合并到一个新的数组 <code>flattened</code> 中。在每次迭代中，回调函数接收两个参数，即累加器（<code>acc</code>）和当前值（<code>val</code>）。起始值为一个空数组（<code>[]</code>）。在每次迭代中，将当前值（一个数组）连接到累加器中。最后返回一个扁平化后的数组。</p>\n<p>如果你使用了 ES6，还可以用简化的箭头函数语法和展开运算符来简化代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [[1, 2], [3, 4], [5, 6]];</span><br><span class=\"line\">const flattened = arr.reduce((acc, val) =&gt; [...acc, ...val], []);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattened); // [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>\n\n<p>以上两种方法均可实现将多个数组套数组合并到一个数组中。</p>\n<p><strong>如果需要将多层嵌套的数组全部展开到一个新数组中</strong>，除了使用多层的 <code>Array.reduce()</code> 递归调用外，还可以使用 ES6 中的展开运算符和递归函数来实现。具体实现如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">  return arr.reduce((acc, val) =&gt; Array.isArray(val) ? [...acc, ...flatten(val)] : [...acc, val], []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const arr = [[1, [2], [3, [[4]]]], 5];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flatten(arr)); // [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，<code>flatten</code> 函数递归调用自身并使用展开运算符将每个层次的数组展开到一个新数组中。在每个迭代中，如果当前值为数组，则递归调用 <code>flatten</code> 函数，否则直接将它添加到新数组中。最终会得到扁平化后的数组 <code>[1, 2, 3, 4, 5]</code>。</p>\n<p>需要注意的是，如果嵌套的数组很多，递归调用函数可能会导致栈溢出的问题。可以使用尾调用优化或其他的解决方案来解决这个问题。</p>\n<h3 id=\"28-4对象的嵌套合并\"><a href=\"#28-4对象的嵌套合并\" class=\"headerlink\" title=\"28.4对象的嵌套合并\"></a>28.4对象的嵌套合并</h3><p>在 JavaScript 中，对象可以包含其他对象或数组，并且可以嵌套多层。如果需要将多层嵌套的对象或数组全部展开到一个新对象或数组中，可以使用递归函数和 ES6 中的展开运算符来实现。</p>\n<p>展开对象中的嵌套对象示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    c: 2,</span><br><span class=\"line\">    d: &#123;</span><br><span class=\"line\">      e: 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  f: [4, 5, [6, 7]]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function flattenObj(obj) &#123;</span><br><span class=\"line\">  return Object.entries(obj).reduce((acc, [key, val]) =&gt; &#123;</span><br><span class=\"line\">    return acc.concat(</span><br><span class=\"line\">      typeof val === &quot;object&quot; &amp;&amp; !Array.isArray(val)</span><br><span class=\"line\">        ? flattenObj(val)</span><br><span class=\"line\">        : &#123; [key]: val &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const flattenedObj = Object.assign(&#123;&#125;, ...flattenObj(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattenedObj);</span><br><span class=\"line\">// &#123; a: 1, c: 2, e: 3, &#x27;0&#x27;: 4, &#x27;1&#x27;: 5, &#x27;2&#x27;: [ 6, 7 ] &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，<code>flattenObj</code> 函数递归调用自身并使用 <code>Object.entries()</code> 方法将对象转换为可迭代的键/值数组。在每个迭代中，如果当前值为对象，则递归调用 <code>flattenObj</code> 函数。否则，将当前键/值对转换为一个新对象并返回。最后使用展开运算符和 <code>Object.assign()</code> 方法将所有新对象合并成一个扁平化的新对象。</p>\n<p>展开数组中的嵌套数组示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const arr = [1, [2, [3, [4]]], 5];</span><br><span class=\"line\"></span><br><span class=\"line\">function flattenArr(arr) &#123;</span><br><span class=\"line\">  return arr.reduce((acc, val) =&gt;</span><br><span class=\"line\">    Array.isArray(val) ? acc.concat(flattenArr(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const flattenedArr = flattenArr(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flattenedArr); // [ 1, 2, 3, 4, 5 ]</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，<code>flattenArr</code> 函数递归调用自身并使用 <code>Array.reduce()</code> 方法遍历每个嵌套数组。在每个迭代中，如果当前值为数组，则递归调用 <code>flattenArr</code> 函数。否则，将当前值添加到新数组中。最后返回扁平化后的新数组。</p>\n<p>需要注意的是，在处理对象或数组时，循环引用可能会导致无限递归的问题。需要特别小心处理或者采取其他的解决方案。</p>\n<h2 id=\"29-重排重绘\"><a href=\"#29-重排重绘\" class=\"headerlink\" title=\"29.重排重绘\"></a>29.重排重绘</h2><p>重排和重绘是网页性能优化中重要的概念。<strong>重排（reflow）</strong>指的是当DOM结构发生改变，影响到元素的布局、尺寸、位置等属性时，浏览器需要重新计算元素的几何属性和布局，这个过程就是重排。而<strong>重绘（repaint）</strong>则是指当元素的样式发生改变，但不影响到布局时，浏览器只需要重新绘制元素的视觉效果，这个过程就是重绘。重排和重绘都会消耗大量的计算资源，因此会影响网页的性能。以下是一些常见的导致重排和重绘的操作：</p>\n<p>1.改变元素的位置、尺寸和布局：包括改变元素的宽高、margin、padding、border、position、display等属性。</p>\n<p>2.改变元素的内容：包括改变文本内容、图片大小、添加或删除DOM节点等操作。</p>\n<p>3.改变浏览器窗口大小：当窗口大小改变时，会影响到整个页面的布局，因此会触发重排。</p>\n<p>为了减少重排和重绘的次数，可以采取以下措施：</p>\n<p>1.使用CSS3的transform属性来改变元素的位置和尺寸，而不是通过改变元素的position、width、height等属性。</p>\n<p>2.将需要多次操作的元素，先脱离文档流，进行操作后再重新插入文档流。</p>\n<p>3.对需要改变的元素，先使用display:none将其隐藏，修改完后再显示。</p>\n<p>4.使用requestAnimationFrame来优化动画效果，避免频繁的重排和重绘。</p>\n<p>5.避免频繁地修改DOM：可以先将需要修改的数据存储在JavaScript中，最后一次性更新到DOM中。</p>\n<p>6.使用CSS Sprites来减少图片的请求次数，将多张小图片合成一张大图，通过background-position来显示不同的图片。</p>\n<p>7.避免使用table布局：table布局很容易导致重排，可以使用div+CSS布局代替。</p>\n<p>8.使用缓存技术：对于静态资源，可以使用浏览器缓存或CDN缓存来减少请求次数。</p>\n<p>9.使用CSS动画代替JavaScript动画：CSS动画可以避免频繁的JavaScript操作，减少重排和重绘的次数。</p>\n<p>总之，减少重排和重绘是优化网页性能的重要手段之一，需要在开发过程中注意避免频繁进行DOM操作和样式修改，以及采用一些优化技术来减少不必要的重排和重绘。</p>\n<h2 id=\"30-循环中，判断条件，重复某值用if赋值比较好还是取余？\"><a href=\"#30-循环中，判断条件，重复某值用if赋值比较好还是取余？\" class=\"headerlink\" title=\"30.循环中，判断条件，重复某值用if赋值比较好还是取余？\"></a>30.循环中，判断条件，重复某值用if赋值比较好还是取余？</h2><p>这两种方法都可以实现让<code>index</code>在循环中到达7后重新从0开始。但是在实际开发中，推荐使用<code>index % 7</code>的方法，因为它比<code>if(index===7) index=0</code>的方法更简洁、更易读、更易扩展。</p>\n<p>使用取模运算符<code>%</code>可以将<code>index</code>的值限制在0~6的范围内，当<code>index</code>的值达到7时，<code>index % 7</code>的结果为0，从而实现了从头开始的效果。而使用<code>if(index===7) index=0</code>的方法则需要显式地判断<code>index</code>的值是否为7，代码量较大，不够简洁。</p>\n<p>此外，如果循环的次数需要变更为其他值，如10或者14，使用取模运算符也可以轻松实现，只需要将7改为相应的值即可。而使用<code>if</code>语句则需要手动修改判断条件和重新赋值的代码，不够易扩展。</p>\n<p>因此，使用取模运算符<code>%</code>可以使代码更简洁、易读和易扩展，是更好的选择。</p>\n<h2 id=\"31-return-num-与return-num的区别\"><a href=\"#31-return-num-与return-num的区别\" class=\"headerlink\" title=\"31.return num++与return ++num的区别\"></a>31.return num++与return ++num的区别</h2><h3 id=\"31-1前后置-的区别\"><a href=\"#31-1前后置-的区别\" class=\"headerlink\" title=\"31.1前后置++的区别\"></a>31.1前后置++的区别</h3><p>不一样，而且<code>return</code>不会影响后续的+1。</p>\n<p><code>return num++</code> 先返回num的值，然后再将num加1，相当于先返回原来的num值，再执行<code>num=num+1</code>。</p>\n<p>而 <code>return ++num</code> 先将num加1，再返回新的num的值，相当于先执行<code>num=num+1</code>，然后再返回新的num值。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num = 1;</span><br><span class=\"line\">console.log(return num++); // 输出1</span><br><span class=\"line\">console.log(num); // 输出2</span><br><span class=\"line\"></span><br><span class=\"line\">num = 1;</span><br><span class=\"line\">console.log(return ++num); // 输出2</span><br><span class=\"line\">console.log(num); // 输出2</span><br></pre></td></tr></table></figure>\n\n<p>因此，<code>return num++</code> 和 <code>return ++num</code> 的返回值是不同的，需要根据具体情况选择使用哪个。</p>\n<h3 id=\"31-2-return-为什么不会影响\"><a href=\"#31-2-return-为什么不会影响\" class=\"headerlink\" title=\"31.2 return 为什么不会影响\"></a>31.2 return 为什么不会影响</h3><p><code>return</code> 依旧影响，但是后置++，返回的是没有+1的值；前置+1可以看成在<code>return</code>语言前已经+1了，所以返回了+1的值。</p>\n<p>是的，<code>return ++num</code> 先将 <code>num</code> 加 1，然后再返回新的 <code>num</code> 的值。相当于先执行 <code>num = num + 1</code>，然后再执行 <code>return num</code>。</p>\n<p>因此，可以理解为 <code>num = num + 1</code> 在 <code>return</code> 语句前面执行了。在执行 <code>return ++num</code> 语句时，<code>num</code> 的值已经被加 1 了，然后将加 1 后的 <code>num</code> 值作为返回值返回。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test() &#123;</span><br><span class=\"line\">  let num = 1;</span><br><span class=\"line\">  return ++num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(test()); // 输出2</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>test</code> 函数返回 <code>2</code>，因为 <code>return ++num</code> 语句先将 <code>num</code> 加 1，然后再返回新的 <code>num</code> 值，即 <code>2</code>。</p>\n<p>因此，可以理解为 <code>num = num + 1</code> 在 <code>return</code> 语句前面执行了。</p>\n<h2 id=\"33-函数中return的理解\"><a href=\"#33-函数中return的理解\" class=\"headerlink\" title=\"33.函数中return的理解\"></a>33.函数中return的理解</h2><h3 id=\"33-1如果没有返回值就返回undefined\"><a href=\"#33-1如果没有返回值就返回undefined\" class=\"headerlink\" title=\"33.1如果没有返回值就返回undefined\"></a>33.1如果没有返回值就返回undefined</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething() &#123;</span><br><span class=\"line\">  // 这里不需要返回值</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doSomethingElse() &#123;</span><br><span class=\"line\">  return; // 返回 undefined</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(doSomething()); // 输出 undefined</span><br><span class=\"line\">console.log(doSomethingElse()); // 输出 undefined</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>doSomething</code> 函数和 <code>doSomethingElse</code> 函数都没有明确使用 <code>return</code> 语句返回值，因此它们的返回值都是 <code>undefined</code>。在 JavaScript 中，如果函数没有明确使用 <code>return</code> 语句返回值，那么函数默认返回 <code>undefined</code>。</p>\n<h2 id=\"34-’-‘-与-“-”-都是字符串，这两个有什么区别\"><a href=\"#34-’-‘-与-“-”-都是字符串，这两个有什么区别\" class=\"headerlink\" title=\"34.’ ‘ 与 “ ” 都是字符串，这两个有什么区别\"></a>34.’ ‘ 与 “ ” 都是字符串，这两个有什么区别</h2><p>在 JavaScript 中，<code>&#39;&#39;</code> 与 <code>&quot;&quot;</code> 都表示空字符串，它们没有本质区别。即使在字符串拼接、字符串截取、字符串比较等操作中，也没有区别。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str1 = &#x27;&#x27;;</span><br><span class=\"line\">let str2 = &quot;&quot;;</span><br><span class=\"line\">console.log(str1 === str2); // 输出 true</span><br><span class=\"line\">console.log(str1 + str2); // 输出空字符串 &#x27;&#x27;</span><br><span class=\"line\">console.log(str1.substring(0, 1)); // 输出空字符串 &#x27;&#x27;</span><br><span class=\"line\">console.log(str1.length === str2.length); // 输出 true</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>str1</code> 和 <code>str2</code> 都表示空字符串，它们之间没有区别。我们可以使用 <code>===</code> 运算符比较它们的值，也可以进行字符串拼接、字符串截取、字符串比较等操作。</p>\n<p>需要注意的是，在编写 JavaScript 代码时，应该保持一致性，即要么使用单引号 <code>&#39;&#39;</code>，要么使用双引号 <code>&quot;&quot;</code>，不要混用。这样可以使代码风格更加统一，易于阅读和维护。</p>\n<h3 id=\"34-1为什么有两个呢？\"><a href=\"#34-1为什么有两个呢？\" class=\"headerlink\" title=\"34.1为什么有两个呢？\"></a>34.1为什么有两个呢？</h3><p>使用两种不同的引号来表示字符串，可以让程序员在字符串中使用另一种引号，而不必进行转义。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let str1 = &quot;It&#x27;s a beautiful day.&quot;;</span><br><span class=\"line\">let str2 = &#x27;She said, &quot;Hello.&quot;&#x27;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>str1</code> 使用了双引号，因此可以在字符串中使用单引号；<code>str2</code> 使用了单引号，因此可以在字符串中使用双引号。如果使用相同的引号来表示字符串，那么在字符串中使用相同的引号就需要进行转义，这会使代码变得难以阅读和维护。</p>\n<p>在实际编码中，我们可以根据具体情况选择使用单引号 <code>&#39;&#39;</code> 或双引号 <code>&quot;&quot;</code> 来表示字符串，以便让代码更加易于编写和阅读。</p>\n<h2 id=\"35-函数数据类型\"><a href=\"#35-函数数据类型\" class=\"headerlink\" title=\"35.函数数据类型\"></a>35.函数数据类型</h2><h3 id=\"35-1-函数数据\"><a href=\"#35-1-函数数据\" class=\"headerlink\" title=\"35.1 函数数据\"></a>35.1 函数数据</h3><p>在 JavaScript 中，<code>function</code> 是一种数据类型，它可以表示一个函数。JavaScript 中的函数是一等公民，也就是说函数可以像其他类型的值一样被赋值、传递、返回和存储。</p>\n<p>例如，我们可以将一个函数赋值给一个变量，然后通过变量来调用这个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let sum = add;</span><br><span class=\"line\">console.log(sum(1, 2)); // 输出 3</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们将 <code>add</code> 函数赋值给了 <code>sum</code> 变量，然后通过 <code>sum</code> 变量来调用这个函数。</p>\n<p>我们也可以将一个函数作为参数传递给另一个函数，然后在函数内部调用这个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function multiply(a, b) &#123;</span><br><span class=\"line\">  return a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function calculate(operation, a, b) &#123;</span><br><span class=\"line\">  return operation(a, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(calculate(add, 1, 2)); // 输出 3</span><br><span class=\"line\">console.log(calculate(multiply, 3, 4)); // 输出 12</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了三个函数：<code>add</code>、<code>multiply</code> 和 <code>calculate</code>。<code>calculate</code> 函数接受一个函数作为参数 <code>operation</code>，然后在函数内部调用这个函数，并传递 <code>a</code> 和 <code>b</code> 作为参数。我们可以通过调用 <code>calculate</code> 函数并传递不同的函数来实现不同的计算。</p>\n<p>需要注意的是，在 JavaScript 中，函数本身也是一个对象，它可以拥有属性和方法。我们可以给函数添加属性，也可以给函数添加方法。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add.name = &#x27;addition&#x27;;</span><br><span class=\"line\">add.description = &#x27;This function adds two numbers.&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add.name); // 输出 &#x27;addition&#x27;</span><br><span class=\"line\">console.log(add.description); // 输出 &#x27;This function adds two numbers.&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们给 <code>add</code> 函数添加了两个属性：<code>name</code> 和 <code>description</code>。然后我们可以通过函数名来访问函数的属性，例如 <code>add.name</code> 和 <code>add.description</code>。需要注意的是，给函数添加属性或方法并不会影响函数的执行逻辑，它们只是函数对象的属性和方法，与函数的行为无关。</p>\n<p>另外，JavaScript 中的函数可以根据定义方式分为函数声明和函数表达式两种类型。函数声明是指使用 <code>function</code> 关键字来定义函数的方式，它们会被解析器提前到作用域的顶部，因此可以在函数声明之前调用。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add(1, 2)); // 输出 3</span><br></pre></td></tr></table></figure>\n\n<p>函数表达式是指将函数赋值给变量或属性的方式定义函数，它们不会被解析器提前到作用域的顶部，因此只能在定义后调用。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let add = function(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add(1, 2)); // 输出 3</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，在实际编程中，我们应该根据具体情况选择使用函数声明或函数表达式来定义函数，以便让代码更加清晰、易于阅读和维护。同时，我们也可以使用箭头函数来定义函数，它们是一种更加简洁、易于编写的函数定义方式，可以使代码更加简洁、易于理解。</p>\n<h3 id=\"35-2-为什么没有单独把函数数据类型提出来\"><a href=\"#35-2-为什么没有单独把函数数据类型提出来\" class=\"headerlink\" title=\"35.2 为什么没有单独把函数数据类型提出来\"></a>35.2 为什么没有单独把函数数据类型提出来</h3><p>JavaScript 中的数据类型包括原始类型和引用类型。原始类型包括数字（<code>number</code>）、字符串（<code>string</code>）、布尔值（<code>boolean</code>）、<code>null</code>、<code>undefined</code> 和 <code>Symbol</code>。引用类型包括对象（<code>object</code>）、数组（<code>array</code>）、函数（<code>function</code>）和日期（<code>date</code>）等。</p>\n<p>虽然 JavaScript 中的函数是一种数据类型，但是它与其他数据类型有些不同。函数可以执行代码并返回值，因此它们不仅仅是数据类型，还可以用于实现程序的功能。因此，在 JavaScript 中，函数是一等公民，它们可以像其他类型的值一样被赋值、传递、返回和存储。</p>\n<p><strong>由于函数是一等公民，因此在介绍 JavaScript 的数据类型时通常不会将函数列为独立的数据类型。</strong>通常将函数视为一种可以执行代码并返回值的数据类型，它们可以与其他数据类型一起使用，为程序实现各种功能。</p>\n<p>需要注意的是，虽然函数不是原始类型，但是在 JavaScript 中，函数的值也可以作为变量、对象属性或数组元素存储和传递。因此，我们可以将函数视为一种可以存储和传递的数据类型，它们与其他数据类型一起构成了 JavaScript 中的数据类型系统。</p>\n<h2 id=\"36-Object-prototype-toString-call-是是什么，怎么用\"><a href=\"#36-Object-prototype-toString-call-是是什么，怎么用\" class=\"headerlink\" title=\"36.Object.prototype.toString.call()是是什么，怎么用\"></a>36.Object.prototype.toString.call()是是什么，怎么用</h2><p><code>Object.prototype.toString.call()</code> 是一个用于获取变量的类型信息的方法。它可以返回一个表示变量类型的字符串，例如 <code>[object Object]</code> 表示一个对象类型，<code>[object Array]</code> 表示一个数组类型，<code>[object String]</code> 表示一个字符串类型，等等。</p>\n<p>它的常见用途是用于判断一个变量的类型，尤其是在处理不同类型的数据时。例如，我们可以使用 <code>Object.prototype.toString.call()</code> 来判断一个变量是否为数组类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">console.log(Object.prototype.toString.call(arr)); // 输出 &#x27;[object Array]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们使用 <code>Object.prototype.toString.call()</code> 方法来获取 <code>arr</code> 变量的类型信息，它返回了一个字符串 <code>&#39;[object Array]&#39;</code>，表示 <code>arr</code> 是一个数组类型。</p>\n<p>需要注意的是，直接使用 <code>typeof</code> 运算符来判断一个变量的类型并不总是可靠的，因为它只能判断出原始类型和函数类型，无法判断其他类型（例如对象类型和数组类型）。因此，在实际编程中，我们通常会结合 <code>Object.prototype.toString.call()</code> 方法来判断一个变量的类型，以便使代码更加健壮、可靠。</p>\n<p>下面是一个使用 <code>Object.prototype.toString.call()</code> 方法来判断变量类型的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getType(variable) &#123;</span><br><span class=\"line\">  return Object.prototype.toString.call(variable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getType(123)); // 输出 &#x27;[object Number]&#x27;</span><br><span class=\"line\">console.log(getType(&#x27;abc&#x27;)); // 输出 &#x27;[object String]&#x27;</span><br><span class=\"line\">console.log(getType(true)); // 输出 &#x27;[object Boolean]&#x27;</span><br><span class=\"line\">console.log(getType(null)); // 输出 &#x27;[object Null]&#x27;</span><br><span class=\"line\">console.log(getType(undefined)); // 输出 &#x27;[object Undefined]&#x27;</span><br><span class=\"line\">console.log(getType(&#123;&#125;)); // 输出 &#x27;[object Object]&#x27;</span><br><span class=\"line\">console.log(getType([])); // 输出 &#x27;[object Array]&#x27;</span><br><span class=\"line\">console.log(getType(function() &#123;&#125;)); // 输出 &#x27;[object Function]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了一个名为 <code>getType</code> 的函数，它接受一个参数 <code>variable</code>，并返回 <code>Object.prototype.toString.call(variable)</code> 的结果，即变量的类型信息。通过调用 <code>getType</code> 函数，我们可以获取不同类型变量的类型信息，并进行相应的处理。例如，我们可以编写一个函数来打印不同类型的变量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function printType(variable) &#123;</span><br><span class=\"line\">  let type = getType(variable);</span><br><span class=\"line\"></span><br><span class=\"line\">  switch (type) &#123;</span><br><span class=\"line\">    case &#x27;[object Number]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a number.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object String]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a string.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Boolean]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a boolean.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Null]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a null.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Undefined]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is an undefined.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Object]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is an object.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Array]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is an array.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case &#x27;[object Function]&#x27;:</span><br><span class=\"line\">      console.log(&#x27;This is a function.&#x27;);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      console.log(&#x27;This is an unknown type.&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printType(123); // 输出 &#x27;This is a number.&#x27;</span><br><span class=\"line\">printType(&#x27;abc&#x27;); // 输出 &#x27;This is a string.&#x27;</span><br><span class=\"line\">printType(true); // 输出 &#x27;This is a boolean.&#x27;</span><br><span class=\"line\">printType(null); // 输出 &#x27;This is a null.&#x27;</span><br><span class=\"line\">printType(undefined); // 输出 &#x27;This is an undefined.&#x27;</span><br><span class=\"line\">printType(&#123;&#125;); // 输出 &#x27;This is an object.&#x27;</span><br><span class=\"line\">printType([]); // 输出 &#x27;This is an array.&#x27;</span><br><span class=\"line\">printType(function() &#123;&#125;); // 输出 &#x27;This is a function.&#x27;</span><br><span class=\"line\">printType(new Date()); // 输出 &#x27;This is an unknown type.&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们定义了一个名为 <code>printType</code> 的函数，它接受一个参数 <code>variable</code>，并根据变量的类型信息打印相应的信息。通过调用 <code>getType</code> 函数获取变量的类型信息，然后使用 <code>switch</code> 语句根据类型信息进行不同的处理。</p>\n<p>需要注意的是，在使用 <code>Object.prototype.toString.call()</code> 方法时，我们需要使用 <code>call()</code> 方法来明确指定调用对象，即 <code>Object.prototype</code>。这是因为 <code>toString()</code> 方法可以被所有 JavaScript 对象继承，但是不同对象的 <code>toString()</code> 方法可能会返回不同的值，因此我们需要使用 <code>call()</code> 方法来确保获取的是 <code>Object.prototype</code> 对象的 <code>toString()</code> 方法返回的值。</p>\n<p>下面是一个错误的示例，它没有使用 <code>call()</code> 方法，导致获取的类型信息不正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">console.log(Object.prototype.toString(arr)); // 输出 &#x27;[object Object]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们没有使用 <code>call()</code> 方法，而是直接调用 <code>Object.prototype.toString(arr)</code> 方法来获取 <code>arr</code> 的类型信息。由于 <code>toString()</code> 方法可以被所有对象继承，因此这里调用的是 <code>arr</code> 对象的 <code>toString()</code> 方法，它返回了 <code>&#39;[object Object]&#39;</code>，而不是 <code>&#39;[object Array]&#39;</code>。</p>\n<p>因此，在使用 <code>Object.prototype.toString.call()</code> 方法时，我们需要明确指定调用对象，并传递要获取类型信息的变量作为参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [1, 2, 3];</span><br><span class=\"line\">console.log(Object.prototype.toString.call(arr)); // 输出 &#x27;[object Array]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，我们使用 <code>call()</code> 方法来明确指定调用对象为 <code>Object.prototype</code>，并传递 <code>arr</code> 变量作为参数，确保获取到的是 <code>arr</code> 变量的类型信息。</p>\n<h2 id=\"37-浏览器控制台\"><a href=\"#37-浏览器控制台\" class=\"headerlink\" title=\"37.浏览器控制台\"></a>37.浏览器控制台</h2><p>const obj = {name:’zs’,age:{year:18}} undefined 为什么浏览器上控制台会返回一个undefined ？</p>\n<p> 在控制台中输入代码时，控制台会返回最后一个表达式的结果。在你的代码中，执行了一条赋值语句 <code>const obj = &#123;name:&#39;zs&#39;,age:&#123;year:18&#125;&#125;</code>，这条语句并不会返回任何值，所以控制台返回了 <code>undefined</code>。</p>\n<p>如果你想在控制台中查看这个对象，可以在代码后面添加 <code>console.log(obj)</code> 或者直接输入 <code>obj</code>，这样控制台就会输出这个对象了。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;name:&#x27;zs&#x27;,age:&#123;year:18&#125;&#125;;</span><br><span class=\"line\">console.log(obj); // 输出 &#123;name: &quot;zs&quot;, age: &#123;year: 18&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者直接在控制台中输入 <code>obj</code>，按回车键，控制台也会输出这个对象。</p>\n<p>因此，控制台返回 <code>undefined</code> 并不代表代码出现了错误，只是最后一个表达式并没有返回任何值。</p>\n<h2 id=\"38-boostrap间距的设置\"><a href=\"#38-boostrap间距的设置\" class=\"headerlink\" title=\"38.boostrap间距的设置\"></a>38.boostrap间距的设置</h2><p>Bootstrap提供了一些CSS类来改变元素的间距、行高、文字大小和边距等样式，这些类可以通过在HTML标签中添加class属性来使用。下面是一些常用的类和其作用：</p>\n<ol>\n<li><p>间距（Spacing）：用于控制元素之间的间距。</p>\n<ul>\n<li><code>.m-*</code>：设置元素的外边距（Margin），*可以为以下值：0-5，auto。</li>\n<li><code>.p-*</code>：设置元素的内边距（Padding），*可以为以下值：0-5。</li>\n<li><code>.mx-*</code>：设置元素的左右外边距（Margin）。</li>\n<li><code>.my-*</code>：设置元素的上下外边距（Margin）。</li>\n<li><code>.px-*</code>：设置元素的左右内边距（Padding）。</li>\n<li><code>.py-*</code>：设置元素的上下内边距（Padding）。</li>\n</ul>\n</li>\n<li><p>行高（Line Height）：用于控制文本行与行之间的距离。</p>\n<ul>\n<li><code>.lh-*</code>：设置元素的行高（Line Height），*可以为以下值：1-5。</li>\n</ul>\n</li>\n<li><p>文字大小（Text Size）：用于控制文本的大小。</p>\n<ul>\n<li><code>.text-*</code>：设置元素的文本大小，<em>可以为以下值：sm（小号）、lg（大号）、</em>（默认大小）。</li>\n</ul>\n</li>\n<li><p>边距（Margin）：用于控制元素与其他元素之间的距离。</p>\n<ul>\n<li><p><code>.mt-*</code>：设置元素的上外边距（Margin Top），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.mb-*</code>：设置元素的下外边距（Margin Bottom），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.ml-*</code>：设置元素的左外边距（Margin Left），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.mr-*</code>：设置元素的右外边距（Margin Right），*可以为以下值：0-5。</p>\n</li>\n<li><p><code>.m-*</code>：设置元素的外边距（Margin），*可以为以下值：0-5，auto。 - <code>.mt-*</code>、<code>.mb-*</code>、<code>.ml-*</code>、<code>.mr-*</code>：也可以使用 <code>.m-*</code> 替代，例如 <code>.m-3</code> 相当于 <code>.mt-3 mb-3 ml-3 mr-3</code>。</p>\n<p>下面是一个示例代码，展示如何使用这些类来改变元素的样式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;col-md-6&quot;&gt;</span><br><span class=\"line\">      &lt;h1 class=&quot;text-primary text-center mt-5&quot;&gt;标题&lt;/h1&gt;</span><br><span class=\"line\">      &lt;p class=&quot;lead text-muted mx-3 my-4&quot;&gt;这是一段引导性文字。&lt;/p&gt;</span><br><span class=\"line\">      &lt;ul class=&quot;list-group list-group-flush px-4&quot;&gt;</span><br><span class=\"line\">        &lt;li class=&quot;list-group-item&quot;&gt;列表项1&lt;/li&gt;</span><br><span class=\"line\">        &lt;li class=&quot;list-group-item&quot;&gt;列表项2&lt;/li&gt;</span><br><span class=\"line\">        &lt;li class=&quot;list-group-item&quot;&gt;列表项3&lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这个代码中，我们使用了 <code>.mt-5</code>、<code>.mx-3</code>、<code>.my-4</code>、<code>.px-4</code>、<code>.list-group-flush</code> 等类来改变元素的样式。<code>.mt-5</code> 用于设置标题的上外边距为5个间距单元，<code>.mx-3</code> 和 <code>.my-4</code> 用于设置引导性文字的左右外边距和上下外边距，<code>.px-4</code> 用于设置列表的左右内边距，<code>.list-group-flush</code> 用于去除列表的边框和圆角。这些类的使用可以让我们更加方便地控制元素的样式，从而使网页设计更加美观。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"39-函数的传递\"><a href=\"#39-函数的传递\" class=\"headerlink\" title=\"39.函数的传递\"></a>39.函数的传递</h2><p>JavaScript 函数是一等公民，可以作为变量、参数或返回值在其他函数中传递，因此函数的传递成为了 JavaScript 中的常见操作。</p>\n<p>在 JavaScript 中，函数传递主要有以下几种方式：</p>\n<ol>\n<li>作为函数参数传递</li>\n<li>作为函数返回值传递</li>\n<li>作为对象属性传递</li>\n</ol>\n<p>接下来，让我们分别来详解这些方式。</p>\n<h3 id=\"作为函数参数传递\"><a href=\"#作为函数参数传递\" class=\"headerlink\" title=\"作为函数参数传递\"></a>作为函数参数传递</h3><p>在 JavaScript 中，可以将一个函数作为另一个函数的参数，从而实现进一步的功能。这种方式可以让代码更加抽象、模块化和可复用。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b) &#123;</span><br><span class=\"line\">  return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function square(c) &#123;</span><br><span class=\"line\">  return c * c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function compose(fn1, fn2) &#123;</span><br><span class=\"line\">  return function(x) &#123;</span><br><span class=\"line\">    return fn2(fn1(x));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var addAndSquare = compose(add, square);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(addAndSquare(2, 3)); // 25</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们定义了三个函数，其中 <code>add</code> 和 <code>square</code> 分别是两个单独的函数，而 <code>compose</code> 函数用于将两个函数连接起来，并返回一个新的函数 <code>addAndSquare</code>。在调用 <code>addAndSquare</code> 函数时，它会先执行 <code>add</code> 函数，然后将结果再传递给 <code>square</code> 函数。最终得到的结果是 25。</p>\n<p>可以看到，将函数作为参数传递，可以方便地实现代码模块化和抽象，提高代码的可读性和可维护性。</p>\n<h3 id=\"作为函数返回值传递\"><a href=\"#作为函数返回值传递\" class=\"headerlink\" title=\"作为函数返回值传递\"></a>作为函数返回值传递</h3><p>除了作为参数传递外，在 JavaScript 中，函数还可以作为返回值进行传递。这种方式通常可以用于实现柯里化（currying）和函数式编程的一些高级特性。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a) &#123;</span><br><span class=\"line\">  return function(b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var add5 = add(5);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add5(3)); // 8</span><br><span class=\"line\">console.log(add5(6)); // 11</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们定义了一个 <code>add</code> 函数，它的作用是将一个数加上另一个数。注意到 <code>add</code> 函数返回了一个匿名函数，这个匿名函数在调用时可以继续接收参数，并返回结果。</p>\n<p>通过调用 <code>add(5)</code> 这个函数，我们得到了一个新的函数 <code>add5</code>，它的作用是将一个数加上 5。这样，无论我们传入什么参数，<code>add5</code> 都会将其加上 5，并返回结果。</p>\n<p>可以看到，这种函数返回函数的方式，使我们能够更加灵活地组合和复用函数，提高了代码的可扩展性和可复用性。</p>\n<h3 id=\"作为对象属性传递\"><a href=\"#作为对象属性传递\" class=\"headerlink\" title=\"作为对象属性传递\"></a>作为对象属性传递</h3><p>另外，函数也可以作为对象属性进行传递，这种方式在事件绑定和回调函数中比较常见，可以方便地将某个对象的方法传递到其他函数中去。</p>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  name: &#x27;Jack&#x27;,</span><br><span class=\"line\">  sayHello: function() &#123;</span><br><span class=\"line\">    console.log(`Hello, my name is $&#123;this.name&#125;`);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(obj.sayHello.bind(obj), 1000); // 1秒后输出 &quot;Hello, my name is Jack&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们定义了一个对象 <code>obj</code>，它包含了一个姓名属性和一个 <code>sayHello</code> 方法。在调用 <code>setTimeout</code> 函数时，我们将 <code>obj.sayHello</code> 方法作为参数传入，并在需要时通过 <code>bind</code> 方法绑定执行上下文（也就是 <code>this</code> 关键字）。</p>\n<p>在 1 秒后，<code>sayHello</code> 方法将被调用，并输出 “Hello, my name is Jack”。</p>\n<p>可以看到，将函数作为对象属性传递，可以方便地在不同的上下文中传递并执行函数，提高代码的复用性和灵活性。</p>\n<p>总结</p>\n<p>以上是 JavaScript 中函数传递的几种方式，它们为前端开发提供了更多的编程思路和技能，可以帮助我们编写更加优雅和高效的代码。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}